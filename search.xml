<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vite</title>
      <link href="/post/feaf56e8.html"/>
      <url>/post/feaf56e8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><h2 id="浅谈构建工具"><a href="#浅谈构建工具" class="headerlink" title="浅谈构建工具"></a>浅谈构建工具</h2><p>前端工程存在很多需要解决的问题，例如：</p><ul><li>模块化：ESM、CommonJS、UMD</li><li>资源编译：高级语法的编译</li><li>产物的质量：代码体积、代码性能</li><li>开发效率：热更新</li></ul><p>前端构建工具的意义：</p><ul><li>模块化方案<ol><li>提供模块加载方案</li><li>兼容不同模块规范</li></ol></li><li>语法转译<ol><li>高级语法转译，如 Sass、Typescript</li><li>资源加载，如图片、字体、worker</li></ol></li><li>产物质量<ol><li>产物压缩、无用代码删除、语法降级</li></ol></li><li>开发效率<ol><li>热更新</li></ol></li></ul><h2 id="Vite-概要介绍"><a href="#Vite-概要介绍" class="headerlink" title="Vite 概要介绍"></a>Vite 概要介绍</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>定位：新一代前端构建工具</p><p>两大组成部分：</p><ol><li>No-bundle 开发服务，源文件无需打包</li><li>生产环境基于 Rollup 的 Bundle</li></ol><p>核心特征：</p><ol><li>高性能，dev 启动速度和热更新速度非常快</li><li>简单易用，开发者体验好</li></ol><h3 id="传统构建工具存在的问题"><a href="#传统构建工具存在的问题" class="headerlink" title="传统构建工具存在的问题"></a>传统构建工具存在的问题</h3><ul><li>缓慢的启动 -&gt; 项目编译成本高</li><li>缓慢的热更新 -&gt; 修改代码后不能实时更新</li></ul><p>瓶颈：</p><ul><li>bundle 带来的性能开销</li><li>JavaScript 语言的性能瓶颈</li></ul><h3 id="行业趋势"><a href="#行业趋势" class="headerlink" title="行业趋势"></a>行业趋势</h3><ul><li><p>全球浏览器普遍支持原生 ESM（目前占比 92% 以上）</p><p>在浏览器中使用原生 ESM 实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test esm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>基于原生语言（Go、Rust）编写前端编译工具链</p></li><li><p>如 Go 语言编写的 ESbuild、Rust 编写的 SWC</p></li></ul><h3 id="基于原生-ESM-的开发服务优势"><a href="#基于原生-ESM-的开发服务优势" class="headerlink" title="基于原生 ESM 的开发服务优势"></a>基于原生 ESM 的开发服务优势</h3><p><img src="/img/vite/esm-dev.png" alt="esm-dev"></p><ul><li>无需打包项目源代码</li><li>天然的按需加载</li><li>可以利用文件级的浏览器缓存</li></ul><h3 id="基于-ESbuild-的编译性能优化"><a href="#基于-ESbuild-的编译性能优化" class="headerlink" title="基于 ESbuild 的编译性能优化"></a>基于 ESbuild 的编译性能优化</h3><p>ESbuild 是基于 Golang 开发的前端工具，性能极高，在 Vite 中被深度使用。ESbuild 具备如下能力：</p><ol><li>打包器 Bundler</li><li>编译器 Transformer</li><li>压缩器 Minifier</li></ol><h3 id="内置的-Web-构建能力"><a href="#内置的-Web-构建能力" class="headerlink" title="内置的 Web 构建能力"></a>内置的 Web 构建能力</h3><p>Vite 具有强大的构建能力，它拥有 Webpack 的众多功能，例如 dev-server、loader 和 plugin 等等。 以下是明显的配置对比：</p><p>webpack.config.js</p><p><img src="/img/vite/webpack-config.png" alt="webpack-config"></p><p>等价于：</p><p>vite.config.js</p><p><img src="/img/vite/vite-config.png" alt="vite-config"></p><h2 id="Vite-上手实战"><a href="#Vite-上手实战" class="headerlink" title="Vite 上手实战"></a>Vite 上手实战</h2><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 pnpm</span></span><br><span class="line">npm i -g pnpm</span><br><span class="line"><span class="comment"># 初试化命令</span></span><br><span class="line">pnpm create vite</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pnpm install</span><br><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="使用-Sass-x2F-Scss-amp-CSS-Module"><a href="#使用-Sass-x2F-Scss-amp-CSS-Module" class="headerlink" title="使用 Sass &#x2F; Scss &amp; CSS Module"></a>使用 Sass &#x2F; Scss &amp; CSS Module</h3><p>安装 Sass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i sass -D</span><br></pre></td></tr></table></figure><p>使用 Sass</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Header/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.scss&#x27;</span></span><br><span class="line"><span class="comment">// 使用 CSS Modules 模块化方案，防止 className 命名冲突</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Header</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span>&gt;</span>This is Header<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* components/Header/index.module.scss */</span></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h3 id="使用静态资源"><a href="#使用静态资源" class="headerlink" title="使用静态资源"></a>使用静态资源</h3><p>使用 svg 图片：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Header</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> logoUrl <span class="keyword">from</span> <span class="string">&#x27;./logo/.svg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logoUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>除了常见的图片格式，Vite 也内置了对于 JSON、Worker、WASM 资源的加载支持</p><h3 id="使用-HMR"><a href="#使用-HMR" class="headerlink" title="使用 HMR"></a>使用 HMR</h3><p>vite 默认自动开启 HMR，无需额外配置。</p><h3 id="生产环境-Tree-Shaking"><a href="#生产环境-Tree-Shaking" class="headerlink" title="生产环境 Tree Shaking"></a>生产环境 Tree Shaking</h3><p>优化原理：</p><ol><li>基于 ESM 的 import&#x2F;export 语句依赖关系，与运行时状态无关</li><li>在构建阶段将未使用到的代码进行删除</li></ol><blockquote><p>Tree Shaking 在 Vite 中无需配置，默认开启。</p><p>注意：CommonJS 格式不能做到 Tree Shaking，require 的部分可能依赖运行时计算的结果</p></blockquote><h2 id="Vite-整体架构"><a href="#Vite-整体架构" class="headerlink" title="Vite 整体架构"></a>Vite 整体架构</h2><p><img src="/img/vite/vite-architecture.png" alt="vite-architecture"></p><h3 id="依赖预打包"><a href="#依赖预打包" class="headerlink" title="依赖预打包"></a>依赖预打包</h3><p><img src="/img/vite/pre-bundle.png" alt="pre-bundle"></p><p>预打包的用意：</p><ul><li>避免 node_modules 过多的文件请求</li><li>将 CommonJS 格式转换为 ESM 格式</li></ul><p>实现原理：</p><ol><li><p>服务启动前扫描代码中用到的依赖</p></li><li><p>用 ESbuild 对依赖代码进行预打包</p></li><li><p>改写 import 语句，指定依赖为预构建产物路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改写前</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 改写后</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;/node_modoule/.vite/react.js&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="单文件编译"><a href="#单文件编译" class="headerlink" title="单文件编译"></a>单文件编译</h3><p>用 ESbuild 编译 TS&#x2F;JSX</p><p><img src="/img/vite/esbuild-transform.png" alt="esbuild-transform"></p><p>优势：</p><ul><li>编译速度提升 10 - 100 倍</li></ul><p>缺点：</p><ul><li>不支持类型检查</li><li>不支持语法降级到 ES5</li></ul><h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><p><img src="/img/vite/esbuild-minify.png" alt="esbuild-minify"></p><p>ESbuild 作为默认压缩工具，在速度上有巨大的优势，替换了传统的 Terser、Uglify.js 等压缩工具。</p><h3 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h3><p><img src="/img/vite/vite-plugin-pipeline.png" alt="vite-plugin-pipeline"></p><p>开发阶段 -&gt; 模拟 Rollup 插件机制</p><p>生产阶段 -&gt; 直接使用 Rollup</p><h2 id="Vite-进阶路线"><a href="#Vite-进阶路线" class="headerlink" title="Vite 进阶路线"></a>Vite 进阶路线</h2><h3 id="深入学习双引擎"><a href="#深入学习双引擎" class="headerlink" title="深入学习双引擎"></a>深入学习双引擎</h3><p>继续深入学习 ESbuild 和 Rollup，学习顺序：</p><ol><li>先了解基本使用，动手尝试各项常用配置；</li><li>然后学习其插件开发。</li></ol><h3 id="Vite-插件开发"><a href="#Vite-插件开发" class="headerlink" title="Vite 插件开发"></a>Vite 插件开发</h3><p>插件机制的优势：</p><ul><li>抽离核心逻辑</li><li>易于扩展</li></ul><p>插件开发的各个阶段：</p><p><img src="/img/vite/plugin-dev.png" alt="plugin-dev"></p><p>通过上述 hook 可以在不同的构建阶段插入自定义的逻辑。</p><p>转换自定义文件类型示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileRegex = <span class="regexp">/\.(my-file-ext)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">myPlugin</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;transform-file&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">src, id</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fileRegex.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">code</span>: <span class="title function_">compileFileToJS</span>(src),</span><br><span class="line">          <span class="attr">map</span>: <span class="literal">null</span> <span class="comment">// 如果可行将提供 source map</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> plugin <span class="keyword">from</span> <span class="string">&#x27;./myPlugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">plugin</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开发过程：</p><ol><li>开发 Vite 插件</li><li>配置文件引入插件</li></ol><p>最好先看 Vite 官方文档，过一遍钩子的功能，然后多学习其它插件的实现，掌握套路。复杂度比较低的插件有 json 加载插件，复杂度中等的插件有 ESbuild 接入插件，复杂度较高的插件有官方 React 插件。</p><h3 id="代码分割（拆包）"><a href="#代码分割（拆包）" class="headerlink" title="代码分割（拆包）"></a>代码分割（拆包）</h3><p>拆包前，引用资源会存在无法进行并发请求和缓存服用率低的情况。拆包后，能达到更好的缓存复用，提升页面加载速度。</p><h3 id="JS-编译工具（Babel）"><a href="#JS-编译工具（Babel）" class="headerlink" title="JS 编译工具（Babel）"></a>JS 编译工具（Babel）</h3><p><img src="/img/vite/babel.png" alt="babel"></p><p>Babel 出现的原因：</p><ul><li>JavaScript 语法标准繁多，浏览器支持程度不一</li><li>开发者需要用到高级语法</li></ul><h3 id="语法安全降级"><a href="#语法安全降级" class="headerlink" title="语法安全降级"></a>语法安全降级</h3><p>在构建产物中避免浏览器语法不兼容问题的解决方案：</p><ul><li>上层解决方案：@vitesjs&#x2F;plugin-legacy</li><li>底层原理<ul><li>借助 Babel 进行语法自动降级</li><li>提前注入 Polyfill 实现，如 core-js、regenerator-runtime</li></ul></li></ul><h3 id="服务端渲染（SSR）"><a href="#服务端渲染（SSR）" class="headerlink" title="服务端渲染（SSR）"></a>服务端渲染（SSR）</h3><p>服务端渲染，一种常见的渲染模式，用于提升首屏性能和 SEO 优化。</p><p>构建阶段：</p><p><img src="/img/vite/ssr-build.png" alt="ssr-build"></p><p>代码执行阶段：</p><p><img src="/img/vite/ssr-run.png" alt="ssr-run"></p><h3 id="深入了解底层标准"><a href="#深入了解底层标准" class="headerlink" title="深入了解底层标准"></a>深入了解底层标准</h3><h3 id="Vite-社区生态"><a href="#Vite-社区生态" class="headerlink" title="Vite 社区生态"></a>Vite 社区生态</h3><blockquote><p>注意：本内容来自于字节跳动青训营课程笔记，仅作学习用途，如有侵权行为请联系作者删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/post/764f33bc.html"/>
      <url>/post/764f33bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack-知识体系"><a href="#Webpack-知识体系" class="headerlink" title="Webpack 知识体系"></a>Webpack 知识体系</h1><h2 id="什么是-Webpack"><a href="#什么是-Webpack" class="headerlink" title="什么是 Webpack"></a>什么是 Webpack</h2><p>前端项目由 PNG、JPG、GIF、WEBP、JS、TS、css、Less、Vue、JSX、Sass… 等资源构成。我们可以对这些资源进行手动管理，但会存在以下问题：</p><ul><li>依赖手工，比如有 50 个 JS 文件… 操作，过程繁锁</li><li>当代码文件之间有依赖的时候，就得严格按依赖顺序书写</li><li>开发与生产环境一致，难以接入 TS 或 JS 新特性</li><li>比较难接入 Less、Sass 等工具</li><li>JS、图片、CSS 资源管理模型不一致</li></ul><p>这些都是旧时代非常突出的问题，对开发效率影响非常大，直到出现了很多工程化道具，例如 gulp、webpack、vite 等。</p><p>webpack 本质上是一种前端资源编译、打包工具，它拥有以下功能：</p><ul><li>多份资源文件打包成一个 Bundle</li><li>支持 Babel、Eslint、TS、CoffeScript、 Less、 Sass</li><li>支持模块化处理 css、图片等资源文件</li><li>支持 HMR +  开发服务器支持持续监听、持续构建</li><li>支持代码分离</li><li>支持 Tree-shaking</li><li>支持 Sourcemap</li><li>…</li></ul><h2 id="使用-Webpack"><a href="#使用-Webpack" class="headerlink" title="使用 Webpack"></a>使用 Webpack</h2><p><strong>1.安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack webpack-cli</span><br></pre></td></tr></table></figure><p><strong>2.编辑配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">entry: &#x27;main.js&#x27;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: &quot;[name].js&quot;,</span><br><span class="line">path: path.join(__dirname, &quot;./dist&quot;), </span><br><span class="line">&#125;,</span><br><span class="line">module:&#123;</span><br><span class="line">rules: [&#123;</span><br><span class="line">test: /\.less$/i,</span><br><span class="line">use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;less-loader&#x27;]</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.执行编译命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="Webpack-打包核心流程"><a href="#Webpack-打包核心流程" class="headerlink" title="Webpack 打包核心流程"></a>Webpack 打包核心流程</h3><p>Webpack 打包核心简化版流程：</p><p><strong>Entry &#x3D;&gt; Dependencies Lookup &#x3D;&gt; Transform &#x3D;&gt; Bundle &#x3D;&gt; Output</strong></p><ol><li>入口处理（`entry&#96;)<ul><li>从 `entry&#96; 文件开始，启动编译流程</li></ul></li><li>依赖解析（`require` `import`）<ul><li>从 `entry` 文件开始，根据 `require` or `import` 等语句找到依赖资源</li></ul></li><li>资源解析（`moudle` `output`)<ul><li>根据 `moudle` 配置，调用资源转移器，将 png、css 等非标准 JS 资源转译为 JS 内容</li></ul></li><li>资源合并打包（`output`）<ul><li>将转译后的资源内容合并打包为可直接在浏览器运行的 JS 文件</li></ul></li></ol><blockquote><p>其中 2、3 步递归调用，直到所有资源处理完毕</p></blockquote><p><strong>关于 Webpack 的使用方法，基本都围绕“配置”展开，</strong>而这些配置大致可划分为两类：</p><ul><li>流程类：作用于流程中某个 or 若干个环节，直接影响打包效果的配置项</li><li>工具类：主流程之外，提供更多工程化能力的配置项</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="title class_">HotModuleReplacementPlugin</span></span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span> )</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index&quot;</span>, </span><br><span class="line"><span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Hot Module Replacement!&#x27;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="配置总览"><a href="#配置总览" class="headerlink" title="配置总览"></a>配置总览</h3><p><img src="/img/Webpack/config.png" alt="config"></p><p>按使用频率排序：</p><ol><li><p>`entry&#x2F;ouput`</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index&quot;</span>，</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>`moudle&#x2F;plugins`</p></li><li><p>`mode`</p></li><li><p>`watch&#x2F;devServer&#x2F;devtool`</p></li></ol><h3 id="处理-css"><a href="#处理-css" class="headerlink" title="处理 css"></a>处理 css</h3><p>项目文件结构：</p><p><img src="/img%5CWebpack%5Ccss.png" alt="css"></p><ol><li><p>安装 Loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add -D css-loader style-loader</span><br></pre></td></tr></table></figure></li><li><p>添加 `module` 处理 css 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// css 处理器</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入 css 模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = <span class="built_in">require</span>(<span class="string">&#x27;./index.css&#x27;</span>);</span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;./index.css&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="接入-Babel"><a href="#接入-Babel" class="headerlink" title="接入 Babel"></a>接入 Babel</h3><ol><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/core @babel/preset-env babel-loader</span><br></pre></td></tr></table></figure></li><li><p>声明产物出口 `output`</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js?$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">presets</span>: [[<span class="string">&#x27;@babel/preset-env&#x27;</span>]]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 ES6 语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Tecvan&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Person</span>().<span class="property">name</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">say</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 <code> npx webpack</code></p></li></ol><h3 id="生成-HTML"><a href="#生成-HTML" class="headerlink" title="生成 HTML"></a>生成 HTML</h3><ol><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>声明产物出口 `entry`</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>npx webpack</code></p></li></ol><p>初始目录结构：</p><p><img src="/img%5CWebpack%5Chtml1.png" alt="html1"></p><p>打包后的目录结构：</p><p><img src="/img/Webpack/html2.png" alt="html2"></p><p>生成的 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">!DOCTYPE html&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h3><p>Hot Module Replacement（HMR），模块热替换，用于提高开发效率。</p><p><img src="/img/Webpack/HMR.png" alt="HMR"></p><p>使用方法：</p><ol><li><p>开启 HMR</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动 Webpack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure></li></ol><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree-Shaking"></a>Tree-Shaking</h3><p>Tree-Shaking，摇树，顾名思义，用于删除 Dead Code。</p><p>Dead Code 特征：</p><ul><li>代码没有被用到，不可到达</li><li>代码的执行结果不会被用到</li><li>代码只读不写</li><li>模块导出了，但未被其他模块使用</li><li>…</li></ul><p>开启 Tree-shaking：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123; <span class="attr">usedExports</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶篇：理解-Loader"><a href="#进阶篇：理解-Loader" class="headerlink" title="进阶篇：理解 Loader"></a>进阶篇：理解 Loader</h2><p>为了处理非标准 JS 资源，设计出资源翻译模块 —— Loader，用于将资源翻译为标准的 JS。</p><h3 id="使用-Loader"><a href="#使用-Loader" class="headerlink" title="使用 Loader"></a>使用 Loader</h3><ol><li><p>安装 Loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add -D css-loader style-loader less-loader</span><br></pre></td></tr></table></figure></li><li><p>添加 `modoule` 处理 css 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 css &#x2F; less &#x2F; sass</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./a.less&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Loader-的链式调用"><a href="#Loader-的链式调用" class="headerlink" title="Loader 的链式调用"></a>Loader 的链式调用</h3><p><img src="/img/Webpack/loader1.png" alt="loader1"></p><ul><li>less-loader：实现 less &#x3D;&gt; css 的转换</li><li>css-loader：将 CSS 包装成类似 module.exports &#x3D;”${css}”的内容，包装后的内容符合 JavaScript 语法</li><li>style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数将内容注入到页面的 style 标签</li></ul><p><img src="/img/Webpack/loader2.png" alt="loader2"></p><p>特点：</p><ul><li>链式调用</li><li>支持异步执行</li><li>分 normal、pitch 两种模式</li></ul><h3 id="常见-Loader"><a href="#常见-Loader" class="headerlink" title="常见 Loader"></a>常见 Loader</h3><p><img src="/img/Webpack/loader3.png" alt="loader3"></p><h2 id="进阶篇：理解插件"><a href="#进阶篇：理解插件" class="headerlink" title="进阶篇：理解插件"></a>进阶篇：理解插件</h2><p>许多知名的工具，如：VS Code、Web Storm、Chrome、Firefox、Babel、Webpack、Rollup、Eslint、Vue、Redux、Quill、Axios 等等，都设计了”插件“架构。</p><p>Webpack 编译过程：</p><p><img src="/img/Webpack/webpack-compile.png" alt="webpack-compile"></p><p>Webpack 编译是一个特别复杂的过程，具有上手成本、功能迭代成本高和功能僵化等缺陷，而插件架构的精髓是对外扩展开放，对修改封闭。Webpack 本身的很多功能都是基于插件实现的。</p><p>Webpack 插件是围绕着“钩子”展开的，钩子的核心信息如下：</p><ol><li>时机：编译过程的特定节点，Webpack 会以钩子形式通知插件此刻正在发生什么事情；</li><li>上下文：通过 tapable 提供的回调机制，以参数方式传递上下文信息；</li><li>交互：在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接<br>口改变。</li></ol><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="入门应用"><a href="#入门应用" class="headerlink" title="入门应用"></a>入门应用</h3><ul><li>理解打包流程</li><li>熟练掌握常用配置项、Loader、插件的使用方法，能够灵活搭建集成 Vue、React、 Babel、Eslint、Less、Sass、图片处理等工具的 Webpack 环境</li><li>掌握常见脚手架工具的用法，例如：Vue-cli、create-react-app、@angular&#x2F;cli</li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li>理解 Loader、Plugin 机制，能够自行开发 Webpack 组件</li><li>理解常见性能优化手段，并能用于解决实际问题</li><li>理解前端工程化概念与生态现状</li></ul><h3 id="大师级"><a href="#大师级" class="headerlink" title="大师级"></a>大师级</h3><ul><li>阅读源码，理解 Webpack 编译、打包原理，甚至能够参与共建</li></ul><blockquote><p>注意：本内容来自于字节跳动青训营课程笔记，仅作学习用途，如有侵权行为请联系作者删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/post/bbc04bb4.html"/>
      <url>/post/bbc04bb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js-课程笔记"><a href="#Node-js-课程笔记" class="headerlink" title="Node.js 课程笔记"></a>Node.js 课程笔记</h2><h3 id="Node-js-的应用场景"><a href="#Node-js-的应用场景" class="headerlink" title="Node.js 的应用场景"></a>Node.js 的应用场景</h3><h4 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h4><ul><li>Bundle：webpack，vite，esbuild，parcel</li><li>Uglify：uglifyjs</li><li>Transpile：babel，typescript</li><li>其他语言加入竞争：esbuild，parcel，prisma</li><li>现状：难以替代</li></ul><h4 id="Web-服务端应用"><a href="#Web-服务端应用" class="headerlink" title="Web 服务端应用"></a>Web 服务端应用</h4><ul><li>学习曲线平缓，开发效率较高</li><li>运行效率接近常见的编译语言</li><li>社区生态丰富及工具链成熟（npm，V8 inspector）</li><li>与前端结合的场景会有优势（SSR）</li><li>现状：竞争激烈，Node.js 有自己独特的优势</li></ul><h4 id="Electron-跨端桌面应用"><a href="#Electron-跨端桌面应用" class="headerlink" title="Electron 跨端桌面应用"></a>Electron 跨端桌面应用</h4><ul><li>商业应用：vscode，lack，discord，zoom</li><li>大型公司内的效率工具</li><li>现状：大部分场景在选型时，都值得考虑</li></ul><h4 id="Node-js-在字节"><a href="#Node-js-在字节" class="headerlink" title="Node.js 在字节"></a>Node.js 在字节</h4><ul><li>BFF 应用、SSR 应用，举例：Modern.js</li><li>服务端应用，举例：头条搜索，西瓜视频，懂车帝</li><li>Electron 应用：飞连，飞书</li><li>每年新增 1000+ Node.js 应用，生态发展迅猛</li></ul><h3 id="Node-js-运行时结构"><a href="#Node-js-运行时结构" class="headerlink" title="Node.js 运行时结构"></a>Node.js 运行时结构</h3><h4 id="运行时结构"><a href="#运行时结构" class="headerlink" title="运行时结构"></a>运行时结构</h4><p><img src="/img/nodejs/node.js%E8%BF%90%E8%A1%8C%E6%97%B6.png" alt="node.js运行时"></p><h4 id="V8，libuv"><a href="#V8，libuv" class="headerlink" title="V8，libuv"></a>V8，libuv</h4><ul><li>V8：JavaScript Runtime，诊断调试工具（inspector）</li><li>libuv：eventloop（事件循环），syscall（系统调用）</li><li>举例：用 node-fetch 发起请求时…</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p>异步 I&#x2F;O</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>. <span class="title class_">Log</span>(<span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>单线程</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">num: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span> || num === <span class="number">2</span>) (</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fibonacci</span>(num - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">42</span>)</span><br><span class="line"><span class="title function_">fibonacci</span>(<span class="number">43</span>)</span><br></pre></td></tr></table></figure></li><li><p>跨平台</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span> )</span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> net.<span class="title class_">Socket</span>(<span class="string">&#x27;/tmp/scoket.sock&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h4><p>当 Node.js 执行 IO 操作时，会在响应返回后恢复操作，而不是阻塞线程并占用额外内存等待</p><p><img src="/img/nodejs/%E5%BC%82%E6%AD%A5IO.png" alt="异步IO"></p><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><ul><li><p>JS 单线程</p><p>实际：JS 线程 + uv 线程 + V8 任务线程池 + V8 Inspector 线程</p></li><li><p>优点：不用考虑多线程状态同步问题，也就不需要锁;同时还能比较高效地利用系统资源</p></li><li><p>缺点：阻塞会产生更多负面影响</p><p>解决办法：多进程或多线程</p></li></ul><h4 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h4><ul><li><p>跨平台（大部分功能、api）</p></li><li><p>Node.js 跨平台 + JS 无需编译环境（+ Web 跨平台 + 诊断工具跨平台）</p><p>&#x3D; 开发成本低（大部分场景无需担心跨平台问题），整体学习成本低</p></li></ul><h3 id="编写-Http-Server"><a href="#编写-Http-Server" class="headerlink" title="编写 Http Server"></a>编写 Http Server</h3><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><p>Mac，Linux 推荐使用 nvm 安装；Windows 推荐使用 nvm4w 或者官方安装包。</p><p>如果遇到安装失败或者安装慢的问题，可以设置安装源解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node nvm install 16</span><br></pre></td></tr></table></figure><h4 id="编写-Http-Server-1"><a href="#编写-Http-Server-1" class="headerlink" title="编写 Http Server"></a>编写 Http Server</h4><p>Hello World</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listens on: $[port&#125;`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>JSON</p><p>http_server_json.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bufs = []</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        bufs.<span class="title function_">push</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> reqData = &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            reqData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs).<span class="title function_">toString</span>())</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="comment">// receive invalid json data</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">echo</span>: reqData.<span class="property">msg</span> || <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listens on: $[port&#125;`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>http_client.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;Hello from my own client&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = http.<span class="title function_">request</span>(<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bufs = []</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        bufs.<span class="title function_">push</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> receive = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs).<span class="title function_">toString</span>())</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;json.msg is：&#x27;</span>, receive)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.<span class="title function_">end</span>(body)</span><br></pre></td></tr></table></figure><p>同时运行 http_server_json.js 和 http_client.js，客户端即可接收到从服务端传回的 JSON 数据。</p><h4 id="Promisify"><a href="#Promisify" class="headerlink" title="Promisify"></a>Promisify</h4><p>用 Promise + async await 重写以上两个例子</p><p>技巧：将 callback 转换成 promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">t</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, t)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">wait</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get called&#x27;</span>) &#125;)</span><br></pre></td></tr></table></figure><p>使用 Promise 改写 http_server_json.js ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> bufs = []</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            bufs.<span class="title function_">push</span>(data)</span><br><span class="line">        &#125;)</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            reqData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(bufs).<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> ret = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(buf)</span><br><span class="line">                msg = ret.<span class="property">msg</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                <span class="comment">// receive invalid json data</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">resolve</span>(msg)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> responseJson = &#123;</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">`receive: <span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseJson))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listens on: $[port&#125;`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>编写一个简单的静态文件服务：</p><p>static_server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// expected http://127.0.0.1:3000/index.html?abc=10</span></span><br><span class="line">    <span class="keyword">const</span> info = url.<span class="title function_">parse</span>(req.<span class="property">url</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static/index.html</span></span><br><span class="line">    <span class="keyword">const</span> file = fs.<span class="title function_">createReadStream</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./static/&#x27;</span> + info.<span class="property">path</span>))</span><br><span class="line">    file.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`server listens on: <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行 static_server.js 脚本，在浏览器访问 <a href="http://localhost:3000/index.html">http://localhost:3000/index.html</a> 即可收到 static 目录下的 index.html 文件。</p><h4 id="React-SSR"><a href="#React-SSR" class="headerlink" title="React SSR"></a>React SSR</h4><p>SSR（server side rendering）特点：</p><ul><li>相比传统 HTML 模版引擎：避免重复编写代码</li><li>相比 SPA (single page application)：首屏渲染更快，SEO 友好</li></ul><p>SSR 缺点：</p><ul><li>通常 qps 较低，前端代码编写时需要考虑服务端染情况</li></ul><p>HTML 例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;My App&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;My App&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server listens on: $&#123;port&#125;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>替换为 React：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&#x27;react&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactDOMServer</span> = <span class="built_in">require</span>(<span class="string">&#x27;react-dom/server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;My App&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;main&quot;&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;ReactDOMServer.renderToString(React.createElement(App))&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server listens on: $&#123;port&#125;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>SSR 难点：</p><ol><li>需要处理打包代码</li><li>需要思考前端代码在服务端运行时的逻辑</li><li>移除对服务端无意义的副作用，或重置环境</li></ol><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><ul><li><p>V8 Inspector: 开箱即用、特性丰富强大、与前端开发一致、跨平台</p><ul><li><p><code>node --inspect</code></p></li><li><p><code>open http://localhost:9229/json</code></p></li></ul></li><li><p>场景：</p><ul><li>查看 console.log 内容</li><li>breakpoint</li><li>高 CPU、死循环：cpuprofile</li><li>高内存占用：heapsnapshot</li><li>性能分析</li></ul></li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li><p>部署要解决的问题</p><ul><li>守护进程：当进程退出时，重新拉起</li><li>多进程：cluster 便捷地利用多进程</li><li>记录进程状态，用于诊断</li></ul></li><li><p>容器环境</p><ul><li>通常有健康检查的手段，只需考虑多核 cpu 利用率即可</li></ul></li></ul><h3 id="延伸话题"><a href="#延伸话题" class="headerlink" title="延伸话题"></a>延伸话题</h3><h4 id="Node-js-贡献代码"><a href="#Node-js-贡献代码" class="headerlink" title="Node.js 贡献代码"></a>Node.js 贡献代码</h4><ul><li>快速了解 Node.js 代码<ul><li><a href="https://github.com/joyeecheung/talks/blob/master/code_and_learn_2019_beijing/contributing-to-node-core.pdf">Node.js Core 贡献入门</a></li></ul></li><li>好处：<ul><li>从使用者的角色逐步理解底层细节，可以解决更复杂的问题；</li><li>自我证明，有助于职业发展；</li><li>解决社区问题，促进社区发展；</li></ul></li><li>难点：<ul><li>费时间</li></ul></li></ul><h4 id="编译-Node-js"><a href="#编译-Node-js" class="headerlink" title="编译 Node.js"></a>编译 Node.js</h4><ul><li>为什么要学习编译 Node.js <ul><li>认知：黑盒到白盒，发生问题时能有迹可循</li><li>贡献代码的第一步</li></ul></li><li>如何编译<ul><li>参考: <a href="https://github.com/nodejs/node/blob/master/doc/guides/maintaining-the-build-files.md">Maintaining the build files</a></li><li>.&#x2F;configure &amp;&amp; make install</li><li>演示：给 net 模块添加自定义属性</li></ul></li></ul><h4 id="诊断-x2F-追踪"><a href="#诊断-x2F-追踪" class="headerlink" title="诊断&#x2F;追踪"></a>诊断&#x2F;追踪</h4><ul><li>诊断是一个低频、重要同时也相当有挑战的方向。是企业衡量自己能否依赖一门语言的重要参考</li><li>技术咨询行业中的热门角色</li><li>难点：<ul><li>需要了解 Node.js 底层，需要了解操作系统以及各种工具</li><li>需要经验</li></ul></li></ul><h4 id="WASM，NAPI"><a href="#WASM，NAPI" class="headerlink" title="WASM，NAPI"></a>WASM，NAPI</h4><ul><li>Node.js (因为 V8) 是执行 WASM 代码的天然容器，和浏览器 WASM 是同一运行时，同时 Node.js 支持 WASI</li><li>NAPI 执行 C 接口的代码（C&#x2F;C++&#x2F;Rust…），同时能保留原生代码的性能</li><li>不同编程语言间通信的一种方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="/post/aba4a302.html"/>
      <url>/post/aba4a302.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端设计模式应用"><a href="#前端设计模式应用" class="headerlink" title="前端设计模式应用"></a>前端设计模式应用</h1><h2 id="设计模式概念和背景解读"><a href="#设计模式概念和背景解读" class="headerlink" title="设计模式概念和背景解读"></a>设计模式概念和背景解读</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>软件设计中常见问题的解决方案模型</p><ul><li>历史经验总结</li><li>与特定语言无关</li></ul><h3 id="背景解读"><a href="#背景解读" class="headerlink" title="背景解读"></a>背景解读</h3><ol><li>模式语言：城镇、建筑、建造（A Pattern Language: Towns, Buildings, Construction）1977</li><li>设计模式：可复用面向对象软件的基础（Design Patterns: Elements of Reusable Object-Oriented Software）1994</li></ol><h2 id="设计模式分类枚举"><a href="#设计模式分类枚举" class="headerlink" title="设计模式分类枚举"></a>设计模式分类枚举</h2><ul><li>创建型 - 如何创建一个对象</li><li>结构性 - 如何灵活的将对象组装成较大的结构</li><li>行为型 - 负责对象间的高效通信和职责划分</li></ul><h2 id="浏览器中主要的设计模式"><a href="#浏览器中主要的设计模式" class="headerlink" title="浏览器中主要的设计模式"></a>浏览器中主要的设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>定义：全局唯一访问对象。例如浏览器中的 window 对象。</p><p>应用场景：缓存、全局状态管理等。</p><h4 id="用单例模式实现请求缓存"><a href="#用单例模式实现请求缓存" class="headerlink" title="用单例模式实现请求缓存"></a>用单例模式实现请求缓存</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Requset</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Requset</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">cache</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Requset</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">request</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>[url]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>[url];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">api</span>(url);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>[url] = response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;should response more than 500ms with class&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="title class_">Request</span>.<span class="title function_">getInstance</span>();</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">await</span> request.<span class="title function_">request</span>(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> endTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> costTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(costTime).<span class="title function_">toBeGreaterThanOrEqua</span>(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;should response quickly second time with class&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> request1 = <span class="title class_">Request</span>.<span class="title function_">getInstance</span>();</span><br><span class="line">  <span class="keyword">await</span> request1.<span class="title function_">request</span>(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">const</span> request2 = <span class="title class_">Request</span>.<span class="title function_">getInstance</span>();</span><br><span class="line">  <span class="keyword">await</span> request2.<span class="title function_">request</span>(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> endTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> costTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(costTime).<span class="title function_">toBeLessThan</span>(<span class="number">50</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">cache</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">request</span> = <span class="keyword">async</span> (<span class="params">url: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (cache[url]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[url];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">api</span>(url);</span><br><span class="line"></span><br><span class="line">  cache[url] = response;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;should response quickly second time&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&quot;/user/1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> endTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> costTime = endTime - startTime;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(costTime).<span class="title function_">toBeLessThan</span>(<span class="number">50</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="发布订阅者模式"><a href="#发布订阅者模式" class="headerlink" title="发布订阅者模式"></a>发布订阅者模式</h3><p>定义：一种订阅机制，可在被订阅对象发生变化时通知订阅者。</p><p>应用场景：从系统架构之间的解耦，到业务中一些实现模式，像邮件模式，上线订阅等等，应用广泛。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doSomthing1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Send message to user&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doSomthing2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Log...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, doSomthing1);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, doSomthing2);</span><br></pre></td></tr></table></figure><h4 id="用发布订阅者模式实现用户上线订阅"><a href="#用发布订阅者模式实现用户上线订阅" class="headerlink" title="用发布订阅者模式实现用户上线订阅"></a>用发布订阅者模式实现用户上线订阅</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Notify</span> = <span class="function">(<span class="params">user: User</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;offline&quot;</span> | <span class="string">&quot;online&quot;</span>;</span><br><span class="line">  <span class="attr">followers</span>: &#123; <span class="attr">user</span>: <span class="title class_">User</span>; <span class="attr">notify</span>: <span class="title class_">Notify</span> &#125;[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;offline&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">user: User, notify: Notify</span>) &#123;</span><br><span class="line">    user.<span class="property">followers</span>.<span class="title function_">push</span>(&#123; user, notify &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">online</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;online&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; notify &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">notify</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;should notify followers when user is online formultiple users&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user3 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user3&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mockNotifyUser1 = jest.<span class="title function_">fn</span>();</span><br><span class="line">  <span class="keyword">const</span> mockNotifyUser2 = jest.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">  user1.<span class="title function_">subscribe</span>(user3, mockNotifyUser1);</span><br><span class="line">  user2.<span class="title function_">subscribe</span>(user3, mockNotifyUser2);</span><br><span class="line"></span><br><span class="line">  user3.<span class="title function_">online</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(mockNotifyUser1).<span class="title function_">toBeCalledWith</span>(user3);</span><br><span class="line">  <span class="title function_">expect</span>(mockNotifyUser2).<span class="title function_">toBeCalledWith</span>(user3);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中的设计模式"><a href="#JavaScript-中的设计模式" class="headerlink" title="JavaScript 中的设计模式"></a>JavaScript 中的设计模式</h2><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>定义：复制已有对象来创建新的对象</p><p>应用场景：JS 中对象创建的基本模式</p><h4 id="用原型模式创建线上订阅中的用户"><a href="#用原型模式创建线上订阅中的用户" class="headerlink" title="用原型模式创建线上订阅中的用户"></a>用原型模式创建线上订阅中的用户</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">baseUser</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;offline&quot;</span>,</span><br><span class="line">  <span class="attr">followers</span>: [],</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">user, notify</span>) &#123;</span><br><span class="line">    user.<span class="property">followers</span>.<span class="title function_">push</span>(&#123; user, notify &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">online</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;onine&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; notify &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">notify</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createUser</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(baseUser);</span><br><span class="line">  user.<span class="property">name</span> = name;</span><br><span class="line">  user.<span class="property">followers</span> = [];</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;should notify followers when user is online for user prototypes&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user1 = <span class="title function_">createUser</span>(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user2 = <span class="title function_">createUser</span>(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user3 = <span class="title function_">createUser</span>(<span class="string">&quot;user3&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mockNotifyUser1 = jest.<span class="title function_">fn</span>();</span><br><span class="line">  <span class="keyword">const</span> mockNotifyUser2 = jest.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">  user1.<span class="title function_">subscribe</span>(user3mockNotifyUser1);</span><br><span class="line">  user2.<span class="title function_">subscribe</span>(user3mockNotifyUser2);</span><br><span class="line"></span><br><span class="line">  user3.<span class="title function_">online</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(mockNotifyUser1).<span class="title function_">toBeCalledWith</span>(user3);</span><br><span class="line">  <span class="title function_">expect</span>(mockNotifyUser2).<span class="title function_">toBeCatledWith</span>(user3);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>定义：可自定义控制对原对象的访问方式，并且允许在更新前后做一些额外处理。</p><p>应用场景：监控，代理工具，前端框架实现等等</p><h4 id="用代理模式实现用户状态订阅"><a href="#用代理模式实现用户状态订阅" class="headerlink" title="用代理模式实现用户状态订阅"></a>用代理模式实现用户状态订阅</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Notify</span> = <span class="function">(<span class="params">user: User</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;offline&quot;</span> | <span class="string">&quot;online&quot;</span>;</span><br><span class="line">  <span class="attr">followers</span>: &#123; <span class="attr">user</span>: <span class="title class_">User</span>; <span class="attr">notify</span>: <span class="title class_">Notify</span> &#125;[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;offline&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">user: User, notify: Notify</span>) &#123;</span><br><span class="line">    user.<span class="property">followers</span>.<span class="title function_">push</span>(&#123; user, notify &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">online</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;online&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; notify &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">notify</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Notify</span> = <span class="function">(<span class="params">user: User</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;offline&quot;</span> | <span class="string">&quot;online&quot;</span>;</span><br><span class="line">  <span class="attr">followers</span>: &#123; <span class="attr">user</span>: <span class="title class_">User</span>; <span class="attr">notify</span>: <span class="title class_">Notify</span> &#125;[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;offline&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">followers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">user: User, notify: Notify</span>) &#123;</span><br><span class="line">    user.<span class="property">followers</span>.<span class="title function_">push</span>(&#123; user, notify &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">online</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;online&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createProxyUser</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="function">(<span class="params">target, prop: keyof User, value</span>) =&gt;</span> &#123;</span><br><span class="line">      target[prop] = value;</span><br><span class="line">      <span class="keyword">if</span> (prop === <span class="string">&quot;status&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">notifyStatusHandlers</span>(target, value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">notifyStatusHandlers</span> = (<span class="params">user: User, status: <span class="string">&quot;online&quot;</span> | <span class="string">&quot;offline&quot;</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (status === <span class="string">&quot;online&quot;</span>) &#123;</span><br><span class="line">      user.<span class="property">followers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; notify &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">notify</span>(user);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> proxyUser;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>定义：在不暴露数据类型的情况下访问集合中的数据</p><p>应用场景：数据结构中有多种数据类型，列表，树等，提供通用操作接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers= [<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;k1&quot;</span>，<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;1&quot;</span>，<span class="string">&quot;2&quot;</span>，<span class="string">&quot;3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> number <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> set) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDomElement</span> &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">chidren</span>: <span class="title class_">MyDomELement</span>[];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">tag: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tag</span> = tag;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addChildren</span>(<span class="params">component: MyDomELement</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">push</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">const</span> list = [...<span class="variable language_">this</span>.<span class="property">children</span>];</span><br><span class="line">    <span class="keyword">let</span> node;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ((node = list.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">          node.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; list.<span class="title function_">push</span>(...node.<span class="property">children</span>);</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: node, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">null</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;can iterate root element&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="keyword">new</span> <span class="title class_">MyDomElement</span>(<span class="string">&quot;body&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> header = <span class="keyword">new</span> <span class="title class_">MyDomELement</span>(<span class="string">&quot;header&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> main = <span class="keyword">new</span> <span class="title class_">MyDomElement</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> banner = <span class="keyword">new</span> <span class="title class_">MyDomElement</span>(<span class="string">&quot;banner&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">new</span> <span class="title class_">MyDomEement</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> footer = <span class="keyword">new</span> <span class="title class_">MyDomElement</span>(<span class="string">&quot;footer&quot;</span>);</span><br><span class="line">  body.<span class="title function_">addChildren</span>(header);</span><br><span class="line">  body.<span class="title function_">addChildren</span>(main);</span><br><span class="line">  body.<span class="title function_">addChildren</span>(footer);</span><br><span class="line">  main.<span class="title function_">addChildren</span>(banner);</span><br><span class="line">  main.<span class="title function_">addChildren</span>(content);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">expectTags</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> body) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      expectTags.<span class="title function_">push</span>(element.<span class="property">tag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">expect</span>(expectTags.<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="前端框架中的设计模式"><a href="#前端框架中的设计模式" class="headerlink" title="前端框架中的设计模式"></a>前端框架中的设计模式</h2><h3 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="Vue-实现计数器"><a href="#Vue-实现计数器" class="headerlink" title="Vue 实现计数器"></a>Vue 实现计数器</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> dom = ref&lt;<span class="title class_">HTMLButtonElement</span>&gt;();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Dom before update&quot;</span>, dom.<span class="property">value</span>?.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title class_">Log</span>(<span class="string">&quot;Dom after update&quot;</span>, dom.<span class="property">value</span>?.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>前端框架中对 DOM 操作的代理</p><p><img src="/img/DesignModel/proxy-model.png" alt="proxy-model"></p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>定义：可多个对象组合使用，也可单个对象独立使用</p><p>应用场景：DOM，前端组件，文件目录，部门</p><h4 id="React-的组件结构"><a href="#React-的组件结构" class="headerlink" title="React 的组件结构"></a>React 的组件结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export const Count = () =&gt; &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  return (</span><br><span class="line">    &lt;button onClick=&#123;() =&gt; setCount((count) =&gt; count + 1)&#125;&gt;</span><br><span class="line">      count is: &#123;count&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div cLassName=&quot;App&quot;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;Count /&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>总结出抽象的模式相对比较简单，但是想要将抽象的模式套用到场景中却非常困难</li><li>现代编程语言的多编程范式带来的更多可能性</li><li>真正优秀的开源项目学习设计模式并不断实践</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="/post/45b9746d.html"/>
      <url>/post/45b9746d.html</url>
      
        <content type="html"><![CDATA[<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>概念：函数防抖是指在事件<strong>被触发 n 秒后再执行回调</strong>，如果在这 n 秒内事件又被触发，则重新计时。类似于我们在使用手机时，如果一直用，则不会息屏，但是间隔了特定时间没有使用手机，则手机会自动息屏。防抖可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p><p>使用场景：</p><ul><li>按钮提交场景：防止多次提交按钮，只执行最后提交的一次</li><li>服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能<br>类以生存环境请用 lodash.debounce</li></ul><p>具体实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fun, delay</span>) &#123;</span><br><span class="line">    <span class="comment">// 定义计时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 利用闭包在固定时间内调用 fun 函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fun.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>概念：函数节流是指规定一个单位时间，<strong>在这个时间单位内，只能有一次触发事件的回调函数执行</strong>，如果在同一个单位时间内某事件被触发多次，只有一次能生效。类似于公交车或地铁的班次概念，在车站每隔特定时间才会发一个班次，如果仍在特定时间间隔则不会发车。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p><p>使用场景：</p><ul><li>拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动</li><li>缩放场景：监控浏览器 resize</li><li>动画场景：避免短时间内多次触发动画引起性问题</li></ul><p>具体实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle2</span>(<span class="params">fun, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fun.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fun, delay</span>)&#123;</span><br><span class="line">    <span class="comment">// 设置开始触发时间点</span></span><br><span class="line">    <span class="keyword">let</span> preTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间点</span></span><br><span class="line">        <span class="keyword">let</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="comment">// 时间间隔大于 delay 就调用 fun，并将开始触发时间点设置为当前时间</span></span><br><span class="line">        <span class="keyword">if</span>(nowTime - preTime &gt; delay)&#123;</span><br><span class="line">            preTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            fun.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 节流 </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树遍历</title>
      <link href="/post/b9b9f7e7.html"/>
      <url>/post/b9b9f7e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>非递归版本：</p><p>先初始化一个栈，并将根节点入栈，然后对栈进行遍历。在循环中，<strong>首先访问栈顶元素并出栈</strong>，之后如果有该节点有子节点，则<strong>按先右后左的顺序入栈子节点</strong>。就这样不断循环访问直到栈为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root)</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> stack = [root];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 直接访问栈顶节点</span></span><br><span class="line">        <span class="keyword">const</span> node = stack.<span class="title function_">pop</span>();</span><br><span class="line">        res.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">        <span class="comment">// 再分别 push 右孩子和左孩子</span></span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">right</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">root</span>)  =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">left</span>);</span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">traversal</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>非递归版本：</p><p>循环体：如果 root 不为空，则一直<strong>往左孩子遍历入栈</strong>直到当前节点为空，最后再访问栈顶节点，<strong>出栈</strong>，再将其<strong>右子节点入栈</strong>。如此循环直到 root 为空且栈为空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> stack = [];    </span><br><span class="line">    <span class="keyword">while</span>(root || stack.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 先一直往左走</span></span><br><span class="line">        <span class="keyword">while</span>(root)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(root);</span><br><span class="line">            root = root.<span class="property">left</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 走到底再访问一下自己</span></span><br><span class="line">        root = stack.<span class="title function_">pop</span>();        </span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="comment">// 最后往右一步</span></span><br><span class="line">        root = root.<span class="property">right</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">root</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;       </span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">left</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">traversal</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>非递归版本：</p><p>循环体：相较于前序遍历，在访问栈顶节点之前多了一个条件判断，即<strong>当前节点没有子节点</strong>或者<strong>上一个访问的节点是当前节点的子节点时</strong>，访问当前栈顶节点并<strong>出栈</strong>，并且将<strong>出栈节点记录在 pre</strong> 中以便下次循环做判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> stack = [root];</span><br><span class="line">    <span class="keyword">let</span> pre = root;</span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = stack[stack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 相较于前序遍历，多增加了一个访问栈顶节点的条件，即栈顶节点左右孩子都为空，或者上一个被访问的节点是栈顶节点的左孩子或者右孩子</span></span><br><span class="line">        <span class="keyword">if</span> ((!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>) || (pre === node.<span class="property">left</span> || pre === node.<span class="property">right</span>)) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            pre = node;</span><br><span class="line">            stack.<span class="title function_">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">root</span>)  =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)</span><br><span class="line">            <span class="keyword">return</span>;        </span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">left</span>);</span><br><span class="line">        <span class="title function_">traversal</span>(root.<span class="property">right</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">traversal</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> len = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">const</span> level = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> node = stack.<span class="title function_">shift</span>();</span><br><span class="line">            level.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">left</span>)&#123;</span><br><span class="line">                level.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">right</span>)&#123;</span><br><span class="line">                level.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(level);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>92. 反转链表 II</title>
      <link href="/post/35d07b91.html"/>
      <url>/post/35d07b91.html</url>
      
        <content type="html"><![CDATA[<h2 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a>92. 反转链表 II</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你单链表的头指针 <code>head</code> 和两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>left &lt;= right</code> 。请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回 <strong>反转后的链表</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], left = 2, right = 4</span><br><span class="line">输出：[1,4,3,2,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [5], left = 1, right = 1</span><br><span class="line">输出：[5]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目为 <code>n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-500 &lt;= Node.val &lt;= 500</code></li><li><code>1 &lt;= left &lt;= right &lt;= n</code></li></ul><p><strong>进阶：</strong> 你可以使用一趟扫描完成反转吗？</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>此题有两种思路，一种是使用<a href="https://cooyper.github.io/post/7787fb56.html">206. 反转链表</a>的方法将待反转部分反转，然后将反转后的部分拼接至原链表即可，但这种方法会存在遍历两次链表的情况。另一种则是使用双指针实现链表反转，可以做到只遍历一次链表，具体如下：</p><p>定义四个指针，分别为 <code>prev</code>、<code>cur</code>、<code>beforeLeft</code> 和 <code>dummy</code>。 <code>prev</code> 和 <code>cur</code> 用于指向反转过程中的前驱后驱节点，<code>beforeLeft</code> 用于指向反转部分的前一个节点，<code>dummy</code> 用于指向链表头节点的前驱节点。</p><p>遍历过程：</p><ul><li>如果 <code>i === left</code>，则保存 <code>prev</code> 节点至 <code>beforeLeft</code> </li><li>如果 <code> i &gt; left</code>，则反转链表：<ul><li><code>beforeLeft.next.next</code> 指向 <code>cur.next</code></li><li><code>cur.next</code>  指向 <code>prev</code></li><li><code>prev</code> 指向 <code>cur</code></li><li><code>cur</code> 指向 <code>beforeLeft.next.next</code></li><li>如果 <code> i &lt; right</code>，则将 <code>prev</code> 和 <code>cur</code> 正常往前移</li></ul></li></ul><p>遍历完后判断 <code>beforeLeft</code> 是否为空，不为空则将 <code>beforeLeft.next</code> 指向 <code>prev</code>（反转后的头节点），最后返回 <code>dummy.next</code> 即可。该方法时间复杂度为 O(n)，空间复杂度为 O(1)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">left</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">right</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseBetween = <span class="keyword">function</span>(<span class="params">head, left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prev, cur, beforeLeft;</span><br><span class="line">    <span class="keyword">const</span> dummy  = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">    prev = dummy;</span><br><span class="line">    cur = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= right; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i === left)&#123;</span><br><span class="line">            beforeLeft = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; left)&#123;</span><br><span class="line">            beforeLeft.<span class="property">next</span>.<span class="property">next</span> = cur.<span class="property">next</span>;</span><br><span class="line">            cur.<span class="property">next</span> = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = beforeLeft.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = cur.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(beforeLeft)&#123;</span><br><span class="line">        beforeLeft.<span class="property">next</span> = prev;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 链表 </tag>
            
            <tag> 链表反转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>300. 最长递增子序列</title>
      <link href="/post/c6e888bc.html"/>
      <url>/post/c6e888bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a>300. 最长递增子序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong> 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,7,7,7,7,7,7]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能将算法的时间复杂度降低到 <code>O(n log(n))</code> 吗?</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题解法为动态规划方法，还可以在动态规划的基础之上使用二分查找进行优化。此处状态转移方程为：</p><pre><code>        dp[i] = max(dp[j]) + 1, 其中 0 ≤ j &lt; i 且 num[j] &lt; num[i]</code></pre><p>即在前 <code>dp[0 ... i -1]</code> 中最长的上升子序列后再加一个 <code>nums[i]</code>，但前提是需要满足 0 ≤ j &lt; i 且 <code>nums[j] &lt; nums[i]</code>，最后整个数组的最长上升子序列的最大值即为最终答案。此方法时间复杂度为 O(n<sup>2</sup>)，空间复杂度 O(n)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dp = [];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[i])&#123;</span><br><span class="line">                dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res, dp[i]);        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/post/c8c06f39.html"/>
      <url>/post/c8c06f39.html</url>
      
        <content type="html"><![CDATA[<h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a>21. 合并两个有序链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两种解法，分别是递归和迭代。注意区别该题和 <a href="https://cooyper.github.io/post/7d6a5163.html">88.合并两个有序数组</a> 的区别，主要是空间申请、循环内统一处理和剩余一端元素处理方面的差异。</p><ul><li>递归：判断当前链表是否有一方为空，如果是则返回非空的一方，否则比较两个链表节点的值大小，值小的一方以其头节点的下一个节点和另一方的头节点作为参数进行递归，将得到的返回值作为当前头节点的一个节点。如此递归直到返回最终结果。此方法时间复杂度为 O(m+n)，空间复杂度为 O(m+n)。</li><li>迭代：新建一个空的头节点，并新建一个尾指针指向头节点，以 list1 和 list2 都不为空作为循环迭代条件，在循环体中将两个链表值较小的节点赋值给尾指针，在循环体的最后将尾指针指向下一个节点。跳出循环体后，将非空的 list 赋值给尾指针的 next。最后返回头节点的 next 即为最终结果。此方法时间复杂度 O(m+n)，空间复杂度 O(1)。</li></ul><p>递归</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">list1, list2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!list1)&#123;</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!list2)&#123;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(list1.<span class="property">val</span> &lt; list2.<span class="property">val</span>)&#123;</span><br><span class="line">        list1.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1.<span class="property">next</span>, list2);</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        list2.<span class="property">next</span> = <span class="title function_">mergeTwoLists</span>(list1, list2.<span class="property">next</span>);</span><br><span class="line">        <span class="keyword">return</span> list2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">list2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="keyword">function</span>(<span class="params">list1, list2</span>) &#123;</span><br><span class="line">    <span class="comment">// 新建一个空的头结点</span></span><br><span class="line">    <span class="keyword">const</span> head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 将尾节点指向头结点</span></span><br><span class="line">    <span class="keyword">let</span> tail = head;</span><br><span class="line">    <span class="keyword">while</span>(list1 &amp;&amp; list2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.<span class="property">val</span> &lt; list2.<span class="property">val</span>)&#123;</span><br><span class="line">            tail.<span class="property">next</span> = list1;</span><br><span class="line">            list1 = list1.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tail.<span class="property">next</span> = list2;</span><br><span class="line">            list2 = list2.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统一处理尾结点</span></span><br><span class="line">        tail = tail.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理剩余节点，因为是升序链表，所以可以直接连接在有序链表的末端</span></span><br><span class="line">    tail.<span class="property">next</span> = list1 === <span class="literal">null</span> ? list2 : list1;</span><br><span class="line">    <span class="keyword">return</span> head.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 链表 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/post/7db00131.html"/>
      <url>/post/7db00131.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的是提高开发工过程中的开发效率，减少不必要的重复工作时间。</p><blockquote><p>前端工程化指的是：在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。最终落实到细节上，从而实现前端的 4 个现代化：<strong>模块化</strong>、<strong>组件化</strong>、<strong>规范化</strong>、<strong>自动化</strong></p></blockquote><p>前端过程化是将系统化的、规范的、可度量的方法用于前端应用的开发、运行和维护过程，用工程化方法构建和维护有效的、实用的和高质量的前端应用。</p><p>前端工程化把软件工程相关的方法和思想应用到前端开发中。</p><p>从广义上理解：将开发阶段的代码发布到生产环境，包含：构建，分支管理，自动化测试，部署。</p><p>从狭义上理解：前端工程化应该包含从编码开始到发布、运行和维护阶段。</p><p>前端工程化包括开发、构建、部署、性能、规范化五个部分。</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li>框架选型</li><li>前后端分离</li><li>模块化</li><li>组件化</li><li>脚手架</li><li>组件库</li><li>本地开发服务器</li><li>Mock 服务</li><li>微前端</li></ul><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><ul><li>依赖打包</li><li>文件压缩</li><li>代码分割</li><li>增量更新与缓存</li><li>资源定位</li><li>图标合并</li><li>ECMAScript 与 Babel</li><li>CSS 预编译与 PostCSS</li><li>持续构建和集成</li><li>类库打包</li><li>构建优化</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>持续部署</li><li>部署流程设计</li><li>静态资源部署策略</li><li>Nginx 反向代理</li><li>SPA 路由配置</li><li>跨域</li><li>HTTPS 发布</li><li>HTTP2 配置</li><li>灰度发布</li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul><li>缓存策略</li><li>缓存复用</li><li>CDN 内容分发网络</li><li>按需加载</li><li>同步异步加载</li><li>请求合并</li><li>首屏渲染速度</li><li>HTTP2 服务器推送</li><li>日志性能监控</li><li>预加载</li><li>性能测试</li></ul><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><ul><li>目录结构规范</li><li>编码风格</li><li>技术栈规范</li><li>前后端接口规范</li><li>Commit Message 规范</li><li>Git 分支管理规范</li><li>设计规范</li><li>图标规范</li><li>文档规范</li><li>Git 分支管理规范</li><li>版本规范</li><li>开发流程的规范</li><li>发布工作流规范</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/post/4153ca58.html"/>
      <url>/post/4153ca58.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有多种思路，包括暴力、中心扩散、动态规划和 Manacher 算法（较复杂）等。</p><ul><li>暴力算法：遍历所有字符串判断是否为回文字符串，再将最大长度的回文字符串存储至到 res，最后返回。该方法效率极低，时间复杂度为 O(n*n*n)，空间复杂度为O(n*n)。</li><li>中心扩散法：由回文字符串的规律可知，每个回文字符串两端的值必相等，由此从某个字符串的中心开始扩散，如果两端值相等则代表该回文字符串可以向两边扩散。利用此规律遍历字符串中的每个字符，以每个字符为中心不断扩散，如果得到的回文字符串比当前最长回文字符串还长则重新赋值。遍历完成后即可得到最后结果。此方法时间复杂度为 O(n*n)，空间复杂度为 O(1)。</li></ul><p>中心扩散法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, left = <span class="number">0</span>, right = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        left = right = i;</span><br><span class="line">        <span class="comment">// 多个连续相同字符的字符换串也是回文字符串</span></span><br><span class="line">        <span class="keyword">while</span>(right + <span class="number">1</span> &lt; n &amp;&amp; s[right + <span class="number">1</span>] === s[left])&#123;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩散回文字符串</span></span><br><span class="line">        <span class="keyword">while</span>(left - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; right + <span class="number">1</span> &lt; n &amp;&amp; s[right + <span class="number">1</span>] === s[left - <span class="number">1</span>])&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否为更长回文字符串</span></span><br><span class="line">        <span class="keyword">if</span>(right &gt; left &amp;&amp; res.<span class="property">length</span> &lt; right - left + <span class="number">1</span>)&#123;</span><br><span class="line">            res = s.<span class="title function_">slice</span>(left, right + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res ? res : s[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 回文字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>103. 二叉树的锯齿形层序遍历</title>
      <link href="/post/6d6dcbcb.html"/>
      <url>/post/6d6dcbcb.html</url>
      
        <content type="html"><![CDATA[<h2 id="103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历" class="headerlink" title="103. 二叉树的锯齿形层序遍历"></a>103. 二叉树的锯齿形层序遍历</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>锯齿形层序遍历</strong> 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[20,9],[15,7]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 2000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题是层次遍历的改编题，在层次遍历的基础之上对遍历方向进行调整即可。有两种思路上：</p><ul><li>第一种是使用<strong>翻转标记</strong>和<strong>双端队列</strong>，在遍历每一层节点时控制节点加入队列的方向：总遍历队列容器方向不改变，每层独立遍历的双端队列在入队时，当正序时在队尾入队，当逆序时在队首入队。按照以上思路遍历直到树为空。时间复杂度为 O(n)，空间复杂度为 O(n)。</li><li>第二种是直接层次遍历完后通过奇偶数翻转遍历结果即可得出最后答案，但这样算是投机取巧，实际上没有达到题目要求遍历过程。时间复杂度为 O(n)，空间复杂度为 O(n)。</li></ul><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> queue = [root];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> posSeq = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> n = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="comment">// 新建每一层的双端队列</span></span><br><span class="line">        <span class="keyword">const</span> level = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            <span class="comment">// 根据是否翻转的标记来在双端队列的不同方向插入元素</span></span><br><span class="line">            <span class="keyword">if</span>(posSeq)</span><br><span class="line">                level.<span class="title function_">push</span>(node.<span class="property">val</span>);  </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                level.<span class="title function_">unshift</span>(node.<span class="property">val</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>); </span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>);   </span><br><span class="line">        &#125;  </span><br><span class="line">        res.<span class="title function_">push</span>(level);</span><br><span class="line">        posSeq = !posSeq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64. 最小路径和</title>
      <link href="/post/c462248e.html"/>
      <url>/post/c462248e.html</url>
      
        <content type="html"><![CDATA[<h2 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a>64. 最小路径和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给定一个包含非负整数的 <code>m x n</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><p> <strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6]]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>类似于<a href="https://cooyper.github.io/post/40675670.html">62. 不同路径</a>，该题同样是动态规划题，不过状态转移方程发生了改变，而且也需要注意边界条件的判断和处理。</p><ul><li>状态定义：设 dp 为大小为 m * n 的矩阵，其中 <code>dp[i][j] </code> 代表走到点 (i, j) 的最小路径和。</li><li>转移方程：<code>dp[i][j] = min(dp[i][j] + dp[i-1][j], dp[i][j] + dp[i][j-1])</code></li><li>返回值：返回 dp 矩阵右下角值，即走到终点的最小值。</li></ul><p>此方法时间复杂度为 O(m*n)，由于可以直接修改原矩阵，故空间复杂度为 O(1)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="keyword">function</span>(<span class="params">grid</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = grid.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = grid[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">        grid[i][<span class="number">0</span>] += grid[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            grid[i][j] = <span class="title class_">Math</span>.<span class="title function_">min</span>(grid[i][j-<span class="number">1</span>] + grid[i][j], grid[i-<span class="number">1</span>][j] + grid[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grid[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>704. 二分查找</title>
      <link href="/post/41f30363.html"/>
      <url>/post/41f30363.html</url>
      
        <content type="html"><![CDATA[<h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>没啥好说的，二分查找模板。时间复杂度 O(log n)，空间复杂度 O(1)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>) + left;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/post/cc1b9611.html"/>
      <url>/post/cc1b9611.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>[toc]</p><h2 id="JavaScript-第一步"><a href="#JavaScript-第一步" class="headerlink" title="JavaScript 第一步"></a>JavaScript 第一步</h2><h3 id="JavaScript-概述"><a href="#JavaScript-概述" class="headerlink" title="JavaScript 概述"></a>JavaScript 概述</h3><p>JavaScript 是轻量级解释型语言。</p><h4 id="添加-JavaScript-方式"><a href="#添加-JavaScript-方式" class="headerlink" title="添加 JavaScript 方式"></a>添加 JavaScript 方式</h4><ul><li><p>内部方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 head 部分中加入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在此编写 JavaScript 代码</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="调用-JavaScript-策略"><a href="#调用-JavaScript-策略" class="headerlink" title="调用 JavaScript 策略"></a>调用 JavaScript 策略</h4><p>调用 JavaScript 脚本需要在 HTML 文档渲染完成之后，否则会产生错误。当然也可以通过添加 DOMContentLoaded 事件监听方式来解决这个问题，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span><br><span class="line">  /* . . . */</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者在使用外部调用方式时，使用 async 属性来解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者还有一种旧方法，就是把脚本元素放在 <code>&lt;body/&gt;</code> 标签之前，与之相邻，这样脚本就可以在 HTML 解析完毕之后加载了。此方案（以及上述 <code>DOMContentLoaded</code> 方案）的问题是，只有在所有 HTML DOM 记载完成后才开始脚本的加载&#x2F;解析过程，这对于有大量 JavaScript 代码的大型网站会带来显著的性能损耗。这也是 async 诞生的初衷。</p><h4 id="async-和-defer"><a href="#async-和-defer" class="headerlink" title="async 和 defer"></a>async 和 defer</h4><p><strong>defer 和 async 属性都是去异步加载外部的 JS 脚本文件，它们都不会阻塞页面的解析</strong>。</p><ul><li>如果脚本无需等待页面解析，且无依赖独立运行，那么应该使用 async</li><li>如果脚本需等待页面解析，且依赖于其他脚本，调用这些脚本时应使用 defer，将关联的脚本按所需顺序至于 HTML 中</li></ul><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math.random() 生成一个在 0 和 1 之间的十进制随机数，Math.floor() 会舍弃小数部分返回与之最接近的整数。以下方法生成一个 1 到 100 的随机数</span></span><br><span class="line"><span class="keyword">let</span> randomNumber = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ul><li>Number，数字</li><li>String，字符串</li><li>Boolean ，布尔值</li><li>Null，空值</li><li>Undefined，未定义</li><li>Symbol</li><li>Object，对象</li><li>Array，数组</li><li>Function，函数</li></ul><h4 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h4><p>用途：用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object  constructor</span><br></pre></td></tr></table></figure><ul><li><code>object</code>：某个实例对象</li><li><code>constructor</code>：某个构造函数</li></ul></li></ul><blockquote><p>用来检测 <code>constructor.prototype</code> 是否存在于参数 <code>object</code> 的原型链上。</p></blockquote><p>即 <code>instanceof</code> 可用于判断某个实例是否是某个构造函数的示例。</p><h4 id="数字与运算符"><a href="#数字与运算符" class="headerlink" title="数字与运算符"></a>数字与运算符</h4><p><strong>比较运算符</strong></p><p><code>===</code> 为严格等于比较符，需要左右值的测试值和数据类型都相等才返回 true，而 <code>==</code> 比较符值只需要测试值相等即返回 true。<code>!==</code> 和 <code>==</code> 同理。建议使用严格版本的 <code>===</code> 和 <code>!==</code>。</p><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&#x27;mozilla&#x27;</span>;</span><br><span class="line">browserType.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&#x27;mozilla&#x27;</span>;</span><br><span class="line"><span class="comment">// 返回 2，因为字符串从 2 位置开始</span></span><br><span class="line">browserType.<span class="title function_">indexOf</span>(<span class="string">&#x27;zilla&#x27;</span>);</span><br><span class="line"><span class="comment">// 返回 -1，因为不存在此字符串</span></span><br><span class="line">browserType.<span class="title function_">indexOf</span>(<span class="string">&#x27;vanilla&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&#x27;mozilla&#x27;</span>;</span><br><span class="line"><span class="comment">// splice 第一个参数代表切割开始点，第二个参数代表切割结束点（不填代表切割完所有剩余字符）</span></span><br><span class="line"><span class="comment">// 返回 &#x27;moz&#x27;</span></span><br><span class="line">browserType.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 返回 &#x27;zilla&#x27;</span></span><br><span class="line">browserType.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// split() 函数, 用于把一个字符串分割成字符串数组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;www.google.com&#x27;</span>;</span><br><span class="line"><span class="comment">// 返回 [&#x27;www&#x27;, &#x27;google&#x27;, &#x27;com&#x27;], 不改变原字符串</span></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> radData = <span class="string">&#x27;My NaMe Is MuD&#x27;</span>;</span><br><span class="line"><span class="comment">//  转换为小写，返回 &#x27;my name is mud&#x27;</span></span><br><span class="line">radData.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="comment">// 转换为大写，返回 &#x27;MY NAME IS MUD&#x27;</span></span><br><span class="line">radData.<span class="title function_">toUpperCase</span>();</span><br></pre></td></tr></table></figure><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> browserType = <span class="string">&#x27;mozilla&#x27;</span>;</span><br><span class="line"><span class="comment">// &#x27;moz&#x27; 被替换为 &#x27;van&#x27;，返回 &#x27;vanilla&#x27;，注意：browserType 本身不会改变，返回的是一个新字符串</span></span><br><span class="line">browserType.<span class="title function_">replace</span>(<span class="string">&#x27;moz&#x27;</span>,<span class="string">&#x27;van&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><strong>数值转字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myNum = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> toStr = myNum.<span class="title function_">toString</span>();</span><br><span class="line"><span class="title function_">typeof</span>(toStr);</span><br></pre></td></tr></table></figure><p><strong>字符串转数值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myStr = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> toNum = <span class="title class_">Number</span>(myStr);</span><br><span class="line"><span class="title function_">typeof</span>(toNum);</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = <span class="string">&#x27;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&#x27;</span>;</span><br><span class="line"><span class="comment">// myArray = [&#x27;Manchester&#x27;, &#x27;London&#x27;, &#x27;Liverpool&#x27;, &#x27;Birmingham&#x27;, &#x27;Leeds&#x27;, &#x27;Carlisle&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> myArray = myData.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">&#x27;Manchester&#x27;</span>, <span class="string">&#x27;London&#x27;</span>, <span class="string">&#x27;Liverpool&#x27;</span>, <span class="string">&#x27;Birmingham&#x27;</span>, <span class="string">&#x27;Leeds&#x27;</span>, <span class="string">&#x27;Carlisle&#x27;</span>];</span><br><span class="line"><span class="comment">// 使用 join 方法，带参数，可自定义分隔符号</span></span><br><span class="line"><span class="comment">// myNewString = &#x27;Manchester,London,Liverpool,Birmingham,Leeds,Carlisle&#x27;</span></span><br><span class="line"><span class="keyword">let</span> myNewString = myArray.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toString 方法，不需要参数，但有限制</span></span><br><span class="line"><span class="keyword">let</span> dogNames = [<span class="string">&quot;Rocket&quot;</span>,<span class="string">&quot;Flash&quot;</span>,<span class="string">&quot;Bella&quot;</span>,<span class="string">&quot;Slugger&quot;</span>];</span><br><span class="line"><span class="comment">// dogString = &#x27;Rocket,Flash,Bella,Slugger&#x27;</span></span><br><span class="line"><span class="keyword">let</span> dogString = dogNames.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><h4 id="添加和删除数组项"><a href="#添加和删除数组项" class="headerlink" title="添加和删除数组项"></a>添加和删除数组项</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">&#x27;Manchester&#x27;</span>, <span class="string">&#x27;London&#x27;</span>, <span class="string">&#x27;Liverpool&#x27;</span>, <span class="string">&#x27;Birmingham&#x27;</span>, <span class="string">&#x27;Leeds&#x27;</span>, <span class="string">&#x27;Carlisle&#x27;</span>];</span><br><span class="line"><span class="comment">// 在末尾添加数组项</span></span><br><span class="line">myArray.<span class="title function_">push</span>(<span class="string">&#x27;Cardiff&#x27;</span>);</span><br><span class="line"><span class="comment">// 删除末尾数组项</span></span><br><span class="line">myArray.<span class="title function_">pop</span>();</span><br><span class="line"><span class="keyword">let</span> removedItem = myArray.<span class="title function_">pop</span>();<span class="comment">// pop 方法调用完成会返回删除项，可以使用变量将其存储</span></span><br><span class="line"><span class="comment">// 在头部添加数组项</span></span><br><span class="line">myArray.<span class="title function_">unshift</span>(<span class="string">&#x27;Edinburgh&#x27;</span>);</span><br><span class="line"><span class="comment">// 删除头部数组项</span></span><br><span class="line">myArray.<span class="title function_">shift</span>();</span><br><span class="line"><span class="keyword">let</span> removedItem = myArray.<span class="title function_">shift</span>();<span class="comment">// 同理 shift 方法也会返回删除项</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.output ul&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> totalBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.output p&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">list.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">totalBox.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// number 1</span></span><br><span class="line"><span class="keyword">let</span> products = [</span><br><span class="line">                <span class="string">&#x27;Underpants:6.99&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Socks:5.99&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;T-shirt:14.99&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Trousers:31.99&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Shoes:23.99&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; products.<span class="property">length</span>; i++) &#123; <span class="comment">// number 2</span></span><br><span class="line">  <span class="comment">// number 3</span></span><br><span class="line">  <span class="keyword">let</span> product = products[i].<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> name = product[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> price = <span class="title class_">Number</span>(product[<span class="number">1</span>]);</span><br><span class="line">  <span class="comment">// number 4</span></span><br><span class="line">  total += price;</span><br><span class="line">  <span class="comment">// number 5</span></span><br><span class="line">  itemText = name + <span class="string">&#x27; - $ &#x27;</span> + price;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">  listItem.<span class="property">textContent</span> = itemText;</span><br><span class="line">  list.<span class="title function_">appendChild</span>(listItem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">totalBox.<span class="property">textContent</span> = <span class="string">&#x27;Total: $&#x27;</span> + total.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组模拟栈和队列"><a href="#数组模拟栈和队列" class="headerlink" title="数组模拟栈和队列"></a>数组模拟栈和队列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="keyword">const</span> n1 = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="keyword">const</span> n2 = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="comment">// 在数组头部添加元素</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="数组的迭代方法"><a href="#数组的迭代方法" class="headerlink" title="数组的迭代方法"></a>数组的迭代方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 方法，传入的函数包括三个参数，分别是数组元素、元素索引和数组本身，以下方法类似</span></span><br><span class="line"><span class="keyword">const</span> arr1 = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item % <span class="number">2</span> == <span class="number">0</span>);<span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map 方法</span></span><br><span class="line"><span class="keyword">const</span> arr2 = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item + <span class="number">1</span> );<span class="comment">// [2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 方法，没有返回值，实际上相当于使用 for 循环遍历数组</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：以上迭代方法都不会改变数组本身，有修改需求则需要重新赋值</span></span><br></pre></td></tr></table></figure><h4 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// reduce 方法，四个参数分别是上一个归并值、当前项、当前项索引和数组本身，这个函数返回的任何值都会作为下一次调用同一个函数的第一参数。</span></span><br><span class="line"><span class="keyword">const</span> sum = values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);<span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduceRight 方法，与 reduce 方法类似，只是遍历的方向相反，按需求使用</span></span><br><span class="line"><span class="keyword">const</span> sum = values.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);<span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todoList = [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;阅读&quot;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;学习&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;运动&quot;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      ];</span><br><span class="line"><span class="comment">// 统计事件完成总数，第二个参数为 0 的作用是第一次调用该函数的 prev 值为 0，</span></span><br><span class="line"><span class="keyword">const</span> doneSum = todoList.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev + (cur.<span class="property">done</span> ? <span class="number">1</span> : <span class="number">0</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="JavaScript-基础要件"><a href="#JavaScript-基础要件" class="headerlink" title="JavaScript 基础要件"></a>JavaScript 基础要件</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在 JavaScript 中的函数实际上是对象，每个函数都是 Function 类型的实例，而 Function 也有属性和方法，跟其它引用类型一样。因为函数是对象，所以函数名就是指向函数对象的指针，而且与函数不一定本身紧密绑定。</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>没有函数名的函数，通常将其与事件处理程序一起使用，例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搭配事件处理使用的匿名函数</span></span><br><span class="line"><span class="keyword">const</span> myButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">myButton.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将匿名函数赋值给变量（不建议使用）</span></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">myGreeting</span>();<span class="comment">// 调用匿名函数变量的方式</span></span><br></pre></td></tr></table></figure><p>备注：匿名函数也称为函数表达式。函数表达式与函数声明有一些区别。函数声明会进行<strong>声明提升（declaration hoisting）</strong>，而函数表达式不会。</p><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>在使用非箭头函数时，可以在函数内部访问 arguments 对象，从中取得传进来的每个参数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取参数个数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">    <span class="comment">// 遍历所有参数，进行操作</span></span><br><span class="line">    [...<span class="variable language_">arguments</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> n += i);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 arguments 参数需要注意以下事项：</p><ul><li>匿名函数无法使用 arguments 参数</li><li>arguments 参数可以和命名函数搭配使用</li></ul><p>还有一点值得注意的是：JavaScript 中的所有参数都是按<strong>值传递</strong>的。不可能按引用传递参数。<strong>如果把对象作为参数传递，那么传递的值就是这个对象的引用。</strong></p><h4 id="参数扩展与收集"><a href="#参数扩展与收集" class="headerlink" title="参数扩展与收集"></a>参数扩展与收集</h4><p><strong>参数扩展</strong></p><p>在函数中希望传入一个数组的所有值作为参数，而不是传入数组时，需要使用 apply 方法或者扩展操作符实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getSum.<span class="title function_">apply</span>(<span class="literal">null</span>, values));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展操作符方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(...values));</span><br></pre></td></tr></table></figure><p><strong>收集参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用扩展操作符将不同长度的独立参数组合为一个数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ignoreFirst</span>(<span class="params">firstValue, ...values</span>) &#123;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ignoreFirst</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">// [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...values</span>) =&gt; &#123;  </span><br><span class="line">    <span class="keyword">return</span> values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));<span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h4><p>函数声明会在任何代码执行之前先被读取添加到执行上下文，这个过程称为<strong>函数声明提升</strong>。以下是两种函数定义的区别，使用函数声明会有提升作用，而使用函数表达式定义函数则不会产生提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常运行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">sum1, sum2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">sum1, sum2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this-对象"><a href="#this-对象" class="headerlink" title="this 对象"></a>this 对象</h4><p>this 对象在标准函数和箭头函数中有不同的行为。</p><p>在标准函数中，this 引用的是把函数当成方法<strong>调用</strong>的上下文对象，这时候通常称其为 this 值（在网页的全局上下文中调用函数时，this 指向  windows）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">funciton <span class="title function_">sayColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayColor</span>();<span class="comment">// &#x27;red&#x27;</span></span><br><span class="line">o.<span class="property">sayColor</span> = sayColor;</span><br><span class="line">o.<span class="title function_">sayColor</span>();<span class="comment">// &#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure><p>在箭头函数中，this 引用的是<strong>定义</strong>箭头函数的上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayColor</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line"><span class="title function_">sayColor</span>();<span class="comment">// &#x27;red&#x27;</span></span><br><span class="line">o.<span class="property">sayColor</span> = sayColor;</span><br><span class="line">o.<span class="title function_">sayColor</span>();<span class="comment">// &#x27;red&#x27;</span></span><br></pre></td></tr></table></figure><p>使用箭头函数保留函数定义上下文 this 指针的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">King</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">royaltyName</span> = <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">    <span class="comment">// this引用King的实例</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">royaltyName</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Queen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">royaltyName</span> = <span class="string">&#x27;Elizabeth&#x27;</span>;</span><br><span class="line">    <span class="comment">// this引用window对象</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">royaltyName</span>); &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">King</span>();   <span class="comment">// Henry</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Queen</span>(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="函数的-apply、call、bind-方法"><a href="#函数的-apply、call、bind-方法" class="headerlink" title="函数的 apply、call、bind 方法"></a>函数的 apply、call、bind 方法</h4><p><code>apply()</code> 和 <code>call()</code> 两个方法都会以指定的 <code>this</code> 值来调用函数，即会设置调用函数时函数体内 <code>this</code> 对象的值。它们的区别是第一个参数之后参数的不同。<code>apply()</code> 函数接收两个参数，第一个是 <code>this</code> 的值，第二个是参数数组（可以是 <code>Array</code> 的实例或者 <code>arguments</code> 对象）。类似的，<code>call()</code> 函数的第一个是 <code>this</code> 的值，剩下的参数是逐个传递的参数。如果想直接传 <code>arguments</code> 对象或者一个数组，那就用 <code>apply()</code>；否则，就用 <code>call()</code>。当然，如果不用给被调用的函数传参，则使用哪个方法都一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSum1</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 传入arguments对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSum2</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [num1, num2]); <span class="comment">// 传入数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callSum1</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callSum2</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">call</span>(<span class="variable language_">this</span>, num1, num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">callSum</span>(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p><code>apply()</code> 和 <code>call()</code> 真正强大的地方在于控制函数调用上下文即函数体内 <code>this</code> 值的能力。使用 <code>apply()</code> 或 <code>call()</code> 的好处是可以将任意对象设置为任意函数的作用域，这样对象可以不用关心方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayColor</span>();                <span class="comment">// red</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(<span class="variable language_">this</span>);     <span class="comment">// red</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(<span class="variable language_">window</span>);   <span class="comment">// red</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(o);         <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><p>在 ES5 中出于同样的目的定义了一个新方法：<code>bind()</code>。<code>bind()</code> 方法会创建一个新的函数实例，其 <code>this</code> 值会被<strong>绑定</strong>到传给 <code>bind()</code> 的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objectSayColor = sayColor.<span class="title function_">bind</span>(o);</span><br><span class="line"><span class="title function_">objectSayColor</span>();   <span class="comment">//blue</span></span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>闭包（closure）</strong>指的是<strong>那些引用了另一个函数作用域中变量的函数</strong>，通常是在嵌套函数中实现的。</p><p>变量或者函数的<strong>上下文</strong>决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的<strong>变量对象（variable object）</strong>，而这个上下文中定义的所有变量和函数都存在于这个对象上。</p><p>上下文中的代码在执行的时候，会创建变量对象的一个<strong>作用域链（scope chain）</strong>。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序，代码正在执行的上下文的变量对象始终位于作用域链的最前端，作用域链的下一个变量对象来自包含上下文，再下一个对象来再下一个包含上下文，以此类推直至全局上下文（全局上下文的变量对象始终是作用域链的最后一个变量对象）。</p><p>在调用一个函数时，会为这个函数调用创建一个执行上下文，并创建一个作用域链。然后用 <code>arguments</code> 和其他命名参数来初始化这个函数的<strong>活动对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComparisonFunction</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">        <span class="comment">// 匿名函数使用上一个上下文变量对象中的变量，产生闭包</span></span><br><span class="line">        letvalue1=object1[propertyName];</span><br><span class="line">        letvalue2=object2[propertyName];</span><br><span class="line">        <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建比较函数</span></span><br><span class="line"><span class="keyword">let</span> compareNames = <span class="title function_">createComparisonFunction</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">compareNames</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Nicholas&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Matt&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 解除对函数的引用，这样就可以释放内存了</span></span><br><span class="line">compareNames = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><code>createComparisonFunction()</code> 执行完后，其执行上下文的作用域链会销毁，但它的活动对象仍然会保留在内存中，直到匿名函数销毁后才被销毁。这里，创建的比较函数被保存在变量 <code>compareNames</code> 中。把 <code>compareNames</code> 设置为等于 <code>null</code> 会解除对函数的引用，从而让垃圾回收程序可以将内存释放掉。作用域链也会被销毁，其他作用域（除全局作用域之外）也可以销毁。</p><p>注意：因为闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过度占用，因此建议仅在十分必要时使用。</p><p><strong>闭包的 this 对象</strong></p><p>在闭包中使用 this 会让代码变得复杂。如果内部函数没有使用箭头函数定义，则 <code>this</code>对象会指向运行时执行函数的上下文。如果在全局函数中调用，则 <code>this</code> 在非严格模式下等于 <code>window</code>，在严格模式下等于 <code>undefined</code>。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">identity</span> = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">    <span class="attr">identity</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">    <span class="title function_">getIdentityFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">identity</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 object.getIdentityFunc()() 是在全局函数中调用的，所以 this 指向 window，输出的是 &#x27;The Window&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getIdentityFunc</span>()()); <span class="comment">// &#x27;The Window&#x27;</span></span><br></pre></td></tr></table></figure><p>如果把外部函数的 <code>this</code> 对象保存至闭包可以访问的另一个变量中，则可以正常访问到外部函数的 <code>this</code> 对象。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">identity</span> = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">    <span class="attr">identity</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line">    <span class="title function_">getIdentityFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> that.<span class="property">identity</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 that 指向的是 object，所以输出的是 &#x27;The Window&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getIdentityFunc</span>()()); <span class="comment">// &#x27;The Window&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="立即调用的函数表达式"><a href="#立即调用的函数表达式" class="headerlink" title="立即调用的函数表达式"></a>立即调用的函数表达式</h4><p>立即调用的匿名函数又被称作<strong>立即调用的函数表达式</strong>（IIFE, Immediately Invoked Function Expression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 块级作用域</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>由于 ES5 不支持块级作用域，所以普遍使用 IIFE 来模拟块级作用域。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);   <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure><p>这样也不会导致闭包相关的内存问题，因为不存在对这个匿名函数的引用。为此，只要函数执行完毕，其作用域链就可以被销毁。</p><p>在 ES6 中 IIFE 就没有那么必要了，因为块级作用域中的变量无需 IIFE 就可以实现同样的隔离。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内嵌块级作用域</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 抛出错误</span></span><br><span class="line"><span class="comment">// 循环的块级作用域</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure><p>IIFE 用途举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 达不到目的！因为 var 声明的是函数作用域，使得 console.log(i) 中的 i 始终指向同一个变量，即每个 div 最后点击都会输出 divs.length，即元素个数</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    divs[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常输出。因为使用了 IIFE 对 i 进行了隔离</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    divs[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, (<span class="keyword">function</span>(<span class="params">frozenCounter</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(frozenCounter);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常输出。使用 let 的块级作用域会为每个循环创建独立的变量，同样能实现对 i 的隔离</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    divs[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><strong>事件</strong>是系统内发生的动作或者发生的事情，例如：用户在某个元素上点击鼠标或悬停光标、用户在键盘中按下某个键和一个网页完成加载等等。每个可用的事件一般都会有<strong>事件处理器</strong>，也称为<strong>事件监听器</strong>，也就是事件触发会运行的代码块。</p><h4 id="使用网页事件的方式"><a href="#使用网页事件的方式" class="headerlink" title="使用网页事件的方式"></a>使用网页事件的方式</h4><p><strong>事件处理器属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// button 的 onclick 处理器属性</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似的还有其他各种处理器属性</span></span><br><span class="line"><span class="comment">// 按钮被置于焦点</span></span><br><span class="line">btn.<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 接触焦点事件</span></span><br><span class="line">btn.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 鼠标双击事件</span></span><br><span class="line">btn.<span class="property">ondblclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 键盘按下并松开事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 键盘按下事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 键盘松开事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 鼠标悬浮事件</span></span><br><span class="line">btn.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 鼠标结束悬浮事件</span></span><br><span class="line">btn.<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>内联事件处理器</strong>（建议不要使用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 通常的使用方式 </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;bgChange()&quot;</span>&gt;</span>Press me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// 直接在内联事件属性编写 js 代码，这是后期开发维护的噩梦！！！务必不要使用这种方式</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello, this is my old-fashioned event handler!&#x27;);&quot;</span>&gt;</span>Press me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>addEventListener() 和 removeEventListener()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用如下方式</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件，这是以上两种方式无法做到的</span></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以使用这个方法为事件添加多个事件处理器，这样当事件触发时，functionA 和 functionB 都会被执行</span></span><br><span class="line">myElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, functionA);</span><br><span class="line">myElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, functionB);</span><br><span class="line"><span class="comment">// 以下这种方式无法实现这一点</span></span><br><span class="line">myElement.<span class="property">onclick</span> = functionA;</span><br><span class="line">myElement.<span class="property">onclick</span> = functionB;</span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>在事件处理函数内部，会自动传递进一个参数，它的名称有可能是 event、evt 或者 e，这个参数被称为事件对象，它可以提供额外的功能和信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bgChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rndCol = <span class="string">&#x27;rgb(&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;,&#x27;</span> + <span class="title function_">random</span>(<span class="number">255</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = rndCol;</span><br><span class="line">    <span class="comment">// e 为事件对象，e.target 属性为触发事件元素</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, bgChange);</span><br></pre></td></tr></table></figure><h4 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h4><p>常见的应用为阻止表单提交，例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fname&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lname&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> submit = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> para = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">form.<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fname.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span> || lname.<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">// 阻止表单元素提交</span></span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        para.<span class="property">textContent</span> = <span class="string">&#x27;You need to fill in both names!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件冒泡及捕获"><a href="#事件冒泡及捕获" class="headerlink" title="事件冒泡及捕获"></a>事件冒泡及捕获</h4><p>当一个事件发生在具有父元素的元素上时，浏览器有两种不同的运行阶段：捕获阶段和冒泡阶段。</p><p>捕获阶段：</p><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><p>冒泡阶段：</p><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><p>使用 stopPropagation() 函数可以让当前处理出程序运行，但事件不会在冒泡链上进一步扩大。</p><h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明、定义</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name : [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>],</span><br><span class="line">  age : <span class="number">32</span>,</span><br><span class="line">  gender : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  interests : [<span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;skiing&#x27;</span>],</span><br><span class="line">  bio : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>[<span class="number">0</span>] + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>[<span class="number">1</span>] + <span class="string">&#x27; is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27; years old. He likes &#x27;</span> + <span class="variable language_">this</span>.<span class="property">interests</span>[<span class="number">0</span>] + <span class="string">&#x27; and &#x27;</span> + <span class="variable language_">this</span>.<span class="property">interests</span>[<span class="number">1</span>] + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">greeting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hi! I\&#x27;m &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的使用</span></span><br><span class="line">person.<span class="property">name</span>[<span class="number">0</span>]</span><br><span class="line">person.<span class="property">age</span></span><br></pre></td></tr></table></figure><h4 id="点表示法"><a href="#点表示法" class="headerlink" title="点表示法"></a>点表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问/修改成员</span></span><br><span class="line">person.<span class="property">age</span></span><br><span class="line">person.<span class="property">interests</span>[<span class="number">1</span>]</span><br><span class="line">person.<span class="title function_">bio</span>()</span><br></pre></td></tr></table></figure><h4 id="括号表示法"><a href="#括号表示法" class="headerlink" title="括号表示法"></a>括号表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问/修改成员</span></span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>][<span class="string">&#x27;first&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加新成员</span></span><br><span class="line">person[<span class="string">&#x27;eyes&#x27;</span>] = <span class="string">&#x27;hazel&#x27;</span>;</span><br><span class="line">person.<span class="property">farewell</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="title function_">alert</span>(<span class="string">&quot;Bye everybody!&quot;</span>) &#125;;</span><br><span class="line"><span class="comment">// 还可以自定义成员名（点表示法无法做到）</span></span><br><span class="line"><span class="keyword">let</span> myDataName = nameInput.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> myDataValue = nameValue.<span class="property">value</span>;</span><br><span class="line">person[myDataName] = myDataValue;</span><br></pre></td></tr></table></figure><p>对象有时候也被称为关联数组，对象做了字符串到值的映射，而数组做的是数字到值的映射。</p><h4 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h4><p>关键字”this”指向当前代码运行时的对象( 原文：the current object the code is being written inside )。</p><h4 id="defineProperty-方法"><a href="#defineProperty-方法" class="headerlink" title="defineProperty 方法"></a>defineProperty 方法</h4><p>JavaScript 中对象有两种类型的属性，分别是数据属性和访问器属性。</p><p>其中数据属性包含四个特性：</p><ul><li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。直接定义在对象上的属性的这个特性默认为 true。</li><li>[[Enumerable]]：表示属性是否可以通过for-in循环返回。直接定义在对象上的属性的这个特性默认为 true。</li><li>[[Writable]]：表示属性的值是否可以被修改。直接定义在对象上的属性的这个特性默认为 true。</li><li>[[Value]]：包含属性实际的值。默认值为 undefined。</li></ul><p>想要修改属性的默认特性，就必须使用 <code>Object.defineProperty()</code> 方法。这个方法接收3个参数：要给其添加属性的对象、属性的名称和一个描述符对象。最后一个参数，即描述符对象上的属性可以包含：configurable、enumerable、writable 和 value，跟相关特性的名称一一对应。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="comment">// 在非严格模式下尝试给这个属性重新赋值会被忽略。在严格模式下，尝试修改只读属性的值会抛出错误。</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="comment">// 非严格模式下对这个属性调用 delete 没有效果，严格模式下会抛出错误。</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个属性被定义为不可配置之后，就不能再变回可配置的了。</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>访问器属性同样包含四个特性：</p><ul><li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。直接定义在对象上的属性的这个特性默认为 true。</li><li>[[Enumerable]]：表示属性是否可以通过for-in循环返回。直接定义在对象上的属性的这个特性默认为 true。</li><li>[[Get]]：获取函数，在读取属性时调用。默认为 undefined。</li><li>[[Set]]：设置函数，在写入属性时调用。默认为 undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象，包含伪私有成员year_和公共成员edition</span></span><br><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">    <span class="attr">year_</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">edition</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">edition</span> += newValue -<span class="number">2017</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.<span class="property">year</span> = <span class="number">2018</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">edition</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>JavaScript 常被描述为一种<strong>基于原型的语言 (prototype-based language)<strong>——每个对象拥有一个</strong>原型对象</strong>，对象以其原型为模板、从原型继承方法和属性。<strong>原型对象也可能拥有原型</strong>，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为**原型链 (prototype chain)**，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</p><p>准确地说，这些属性和方法定义在 Object 的<strong>构造器函数 (constructor functions)</strong> 之上的 <code>prototype</code> 属性上，而非对象实例本身。</p><p>在传统的 OOP 中，首先定义“类”，此后创建对象实例时，类中定义的所有属性和方法都被复制到实例中。在 JavaScript 中并不如此复制——而是在对象实例和它的构造器之间建立一个链接（它是__proto__属性，是从构造函数的<code>prototype</code>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法。</p><h4 id="原型使用"><a href="#原型使用" class="headerlink" title="原型使用"></a>原型使用</h4><p>在 javascript 中，函数可以有属性。每个函数都有一个特殊的属性叫作 <code>原型（prototype）</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">doSomething.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomething.<span class="property"><span class="keyword">prototype</span></span> );</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    foo: &quot;bar&quot;,</span><br><span class="line">    constructor: ƒ doSomething(),</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        constructor: ƒ Object(),</span><br><span class="line">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class="line">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class="line">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class="line">        toLocaleString: ƒ toLocaleString(),</span><br><span class="line">        toString: ƒ toString(),</span><br><span class="line">        valueOf: ƒ valueOf()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">doSomething.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span>; <span class="comment">// add a property onto the prototype</span></span><br><span class="line"><span class="keyword">var</span> doSomeInstancing = <span class="keyword">new</span> <span class="title function_">doSomething</span>();</span><br><span class="line">doSomeInstancing.<span class="property">prop</span> = <span class="string">&quot;some value&quot;</span>; <span class="comment">// add a property onto the object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( doSomeInstancing );</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    prop: &quot;some value&quot;,</span><br><span class="line">    __proto__: &#123;</span><br><span class="line">        foo: &quot;bar&quot;,</span><br><span class="line">        constructor: ƒ doSomething(),</span><br><span class="line">        __proto__: &#123;</span><br><span class="line">            constructor: ƒ Object(),</span><br><span class="line">            hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class="line">            isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class="line">            propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class="line">            toLocaleString: ƒ toLocaleString(),</span><br><span class="line">            toString: ƒ toString(),</span><br><span class="line">            valueOf: ƒ valueOf()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doSomething.prototype</code> 即为 <code>doSomething</code> 的原型，<code>doSomeInstancing</code> 的 <code>__proto__</code> 属性就是<code>doSomething.prototype</code>。当访问 <code>doSomeInstancing</code> 的属性时，先查找 <code>doSomeInstancing</code> 是否有这个属性，如果没有则到 <code>doSomeInstancing</code> 的 <code>__proto__</code> 中寻找（也就是 <code>doSomething.prototype</code>），如果有则会被使用，如果没有则会继续到 <code>doSomeInstancing</code> 的 <code>__proto__</code> 的 <code>__proto__</code> 中寻找（也就是 <code>doSomething.prototype</code> 的 <code>__proto__</code> ，即 <code>Object.prototype</code>），如果还是没有，则返回 <code>undefined</code>。</p><p>默认情况下，所有函数原型属性的 <code>__proto__</code> 就是 <code>window.Object.prototype</code>。</p><p>总结：<code>prototype</code> 为对象本身原型，<code>__proto__</code> 为父原型。</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性与方法定义</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;male&#x27;</span>, [<span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;skiing&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><img src="/img/javascript/js-%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%BE%8B%E5%AD%90.png" alt="js-原型链例子"></p><p>person1 的原型链上图所示，当调用 <code>person1.valueOf()</code> 时，先检查 person1 对象是否有 <code>valueOf</code> 方法，如果没有，则浏览器检查 person1 对象的原型对象，即 <code>Person.prototype</code> 是否有 <code>valueOf </code> 方法，如果没有，则检查 Person 对象的原型对象，即 <code>Object.prototype</code> ，发现这里有 <code>valueOf</code> 方法，所以被调用。</p><h4 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h4><p>每个实例对象都从原型中继承了一个 constructor 属性，该属性指向用于构造此实例对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">person1.<span class="property">constructor</span><span class="comment">// 返回 Person() 构造器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 person1.constructor 构造器 new 一个 Person 的对象</span></span><br><span class="line"><span class="keyword">var</span> person3 = <span class="keyword">new</span> person1.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;Karen&#x27;</span>, <span class="string">&#x27;Stephenson&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;female&#x27;</span>, [<span class="string">&#x27;playing drums&#x27;</span>, <span class="string">&#x27;mountain climbing&#x27;</span>]</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 constructor.name 获取构造器名称</span></span><br><span class="line">person1.<span class="property">constructor</span>.<span class="property">name</span></span><br></pre></td></tr></table></figure><h4 id="修改原型"><a href="#修改原型" class="headerlink" title="修改原型"></a>修改原型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 属性与方法定义</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tammi&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;neutral&#x27;</span>, [<span class="string">&#x27;music&#x27;</span>, <span class="string">&#x27;skiing&#x27;</span>, <span class="string">&#x27;kickboxing&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">farewell</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>.<span class="property">first</span> + <span class="string">&#x27; has left the building. Bye for now!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示 Tammi has left the building. Bye for now!</span></span><br><span class="line">person1.<span class="title function_">farewell</span>();</span><br></pre></td></tr></table></figure><p>通过修改构造器原型对象属性添加方法，这种方式会使得上游的方法不会复制到下游中，对象本身没有这些方法，但可以通过上溯原型链从上游对象中找到它们。</p><p>一般来说，在构造器（函数体）中定义属性，在 <code>prototype</code> 中定义方法，是常用的对象定义模式，这种方式的代码分块更明显，可读性更强。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器及其属性定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">a,b,c,d</span>) &#123;</span><br><span class="line">  <span class="comment">// 属性定义</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第二个方法</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Test</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">y</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等等……</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-中的类"><a href="#JavaScript-中的类" class="headerlink" title="JavaScript 中的类"></a>JavaScript 中的类</h3><h4 id="类和构造函数"><a href="#类和构造函数" class="headerlink" title="类和构造函数"></a>类和构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性声明</span></span><br><span class="line">    name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="title function_">introduceSelf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> giles = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Giles&#x27;</span>);</span><br><span class="line"></span><br><span class="line">giles.<span class="title function_">introduceSelf</span>(); <span class="comment">// Hi! I&#x27;m Giles</span></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Professor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  teaches;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, teaches</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">teaches</span> = teaches;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">introduceSelf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, and I will be your <span class="subst">$&#123;<span class="variable language_">this</span>.teaches&#125;</span> professor.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">grade</span>(<span class="params">paper</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> grade = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">5</span> - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(grade);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> walsh = <span class="keyword">new</span> <span class="title class_">Professor</span>(<span class="string">&#x27;Walsh&#x27;</span>, <span class="string">&#x27;Psychology&#x27;</span>);</span><br><span class="line">walsh.<span class="title function_">introduceSelf</span>();  <span class="comment">// &#x27;My name is Walsh, and I will be your Psychology professor&#x27;</span></span><br><span class="line"></span><br><span class="line">walsh.<span class="title function_">grade</span>(<span class="string">&#x27;my paper&#x27;</span>); <span class="comment">// some random grade</span></span><br></pre></td></tr></table></figure><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有属性，私有数据属性必须在类的声明中声明，而且需以 # 开头。私有属性只能在类中访问，通过对象访问会出错</span></span><br><span class="line">    #year;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, year</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.#year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">introduceSelf</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, and I&#x27;m in year <span class="subst">$&#123;<span class="variable language_">this</span>.#year&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">canStudyArchery</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#year &gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法同理，只能在类中访问</span></span><br><span class="line">    #<span class="title function_">somePrivateMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You called me?&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 是一种按照 JavaScript 对象语法的数据格式。JSON 可以作为一个对象或者字符串存在，前者用于解读 JSON 中的数据，后者用于通过网络传输 JSON 数据。</p><h4 id="JSON-结构"><a href="#JSON-结构" class="headerlink" title="JSON 结构"></a>JSON 结构</h4><p>JSON 对象是基于 JavaScript 对象的，在 JavaScript 中可以把对象原原本本地写入 JSON 数据中（其中包括字符串、数字、数组、布尔值和其它字面值对象）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;squadName&quot;</span> : <span class="string">&quot;Super hero squad&quot;</span>,</span><br><span class="line">  <span class="string">&quot;homeTown&quot;</span> : <span class="string">&quot;Metro City&quot;</span>,</span><br><span class="line">  <span class="string">&quot;formed&quot;</span> : <span class="number">2016</span>,</span><br><span class="line">  <span class="string">&quot;secretBase&quot;</span> : <span class="string">&quot;Super tower&quot;</span>,</span><br><span class="line">  <span class="string">&quot;active&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;members&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Molecule Man&quot;</span>,</span><br><span class="line">      <span class="string">&quot;age&quot;</span> : <span class="number">29</span>,</span><br><span class="line">      <span class="string">&quot;secretIdentity&quot;</span> : <span class="string">&quot;Dan Jukes&quot;</span>,</span><br><span class="line">      <span class="string">&quot;powers&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;Radiation resistance&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Turning tiny&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Radiation blast&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Madame Uppercut&quot;</span>,</span><br><span class="line">      <span class="string">&quot;age&quot;</span> : <span class="number">39</span>,</span><br><span class="line">      <span class="string">&quot;secretIdentity&quot;</span> : <span class="string">&quot;Jane Wilson&quot;</span>,</span><br><span class="line">      <span class="string">&quot;powers&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;Million tonne punch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Damage resistance&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Superhuman reflexes&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Eternal Flame&quot;</span>,</span><br><span class="line">      <span class="string">&quot;age&quot;</span> : <span class="number">1000000</span>,</span><br><span class="line">      <span class="string">&quot;secretIdentity&quot;</span> : <span class="string">&quot;Unknown&quot;</span>,</span><br><span class="line">      <span class="string">&quot;powers&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;Immortality&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Heat Immunity&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Inferno&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Teleportation&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Interdimensional travel&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组对象也是一种合法的 JSON 对象，可以在加载 JSON 对象后通过数组索引直接访问数组元素。</p><p>注意事项：</p><ul><li>JSON 是一种<strong>纯数据</strong>格式，它只包含属性，没有方法。</li><li>JSON 要求在字符串和属性名称周围使用<strong>双引号</strong>，单引号无效。</li><li>JSON 中只有<strong>带引号</strong>的字符串可以作属性，而 JavaScript 代码中的对象属性可以不加引号。</li><li>甚至一个错位的逗号或分号就可以导致 JSON 文件出错。</li><li>JSON 可以将任何标准合法的 JSON 数据格式化保存，不只是数组和对象。比如一个单一的字符串或者数字都可以是合法的 JSON 对象。</li></ul><h4 id="使用-XMLHTTPRequest-加载-JSON"><a href="#使用-XMLHTTPRequest-加载-JSON" class="headerlink" title="使用 XMLHTTPRequest 加载 JSON"></a>使用 XMLHTTPRequest 加载 JSON</h4><p>XMLHTTPRequest（XHR） 是 JavaScript 中用于向服务器请求资源文件（如：图片、文本、JSON 和 HTML 片段等等）的对象，它可以更新小段内容而不用重新加载整个页面。具体使用案例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> requestURL = <span class="string">&#x27;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 new 构造函数创建一个新的 HTTP 请求对象</span></span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 打开一个新的请求，open 方法至少需要两个参数，一个请求方法和一个请求地址</span></span><br><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, requestURL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 responseType 设置返回数据的格式为 JSON，并通过 send 方法发起请求</span></span><br><span class="line">request.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">request.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 onload 属性设置请求完成后相关处理</span></span><br><span class="line">request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> superHeros = request.<span class="property">response</span>;</span><br><span class="line">    <span class="comment">// 以下为相关处理方法，可以通过获取到的数据来修改 dom 节点</span></span><br><span class="line">    <span class="title function_">populateHeader</span>(superHeros);</span><br><span class="line">    <span class="title function_">showHeros</span>(superHeros);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象和字符串的转换"><a href="#对象和字符串的转换" class="headerlink" title="对象和字符串的转换"></a>对象和字符串的转换</h4><p>对象和字符串转换的方法有两个：</p><ul><li><code>parse()</code> ：以 JSON 格式字符串作为参数，解析转换返回对应的 JSON 对象</li><li><code>stringify()</code> ：以对象作为参数，返回相应的 JSON 字符串</li></ul><p>使用示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, requestURL);</span><br><span class="line">request.<span class="property">responseType</span> = <span class="string">&#x27;text&#x27;</span>; <span class="comment">// 此处设置返回格式为文本格式</span></span><br><span class="line">request.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">request.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> superHeroesText = request.<span class="property">response</span>; <span class="comment">// 获取返回文本数据</span></span><br><span class="line">  <span class="keyword">var</span> superHeroes = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(superHeroesText); <span class="comment">// 将文本数据转换为对象</span></span><br><span class="line">  <span class="title function_">populateHeader</span>(superHeroes);</span><br><span class="line">  <span class="title function_">showHeroes</span>(superHeroes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步-JavaScript"><a href="#异步-JavaScript" class="headerlink" title="异步 JavaScript"></a>异步 JavaScript</h2><h3 id="异步-JavaScript-简介"><a href="#异步-JavaScript-简介" class="headerlink" title="异步 JavaScript 简介"></a>异步 JavaScript 简介</h3><p>异步编程技术可以使得程序在执行一个可能长期运行的任务的同时继续对其他事件做出反应而不必等待任务完成。通常需要长时间完成并可能会用到异步技术的有：</p><ul><li>使用 <code>fetch()</code> 发起 HTTP 请求</li><li>使用 <code>getUserMedia()</code> 访问用户的摄像头和麦克风</li><li>使用 <code>showOpenFilePicker()</code> 请求用户选择文件以供访问</li></ul><h4 id="同步编程"><a href="#同步编程" class="headerlink" title="同步编程"></a>同步编程</h4><p>同步编程的工作过程是浏览器按照代码书写的顺序一行一行地往下执行，在执行的过程中浏览器会等待代码的解析和工作，在完成上一行工作后才会执行下一行代码。这样就带来一个问题，如果执行的过程当中有一个同步函数需要耗费很长的时间，就会影响后续代码的执行，无法进入后面的工作，这可能会给用户带来不好的体验。</p><h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h4><p>事件处理函数是异步编程的一种形式：你提供的函数（事件处理程序）将在事件发生时被调用（而不是立即被调用）。<code>XMLHttpRequest </code> API 就是被设计成异步 API 的典范，我们可以通过给 <code>XMLHttpRequest </code> 对象附加事件监听器来让程序在请求进展和最终完成时获得通知。具体示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;xhr&quot;</span>&gt;</span>点击发起请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>重载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">readonly</span> <span class="attr">class</span>=<span class="string">&quot;event-log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.event-log&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#xhr&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  log.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    log.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;log.textContent&#125;</span>完成！状态码：<span class="subst">$&#123;xhr.status&#125;</span>`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://raw.githubusercontent.com/mdn/content/main/files/en-us/_wikihistory.json&#x27;</span>);</span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line">  log.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;log.textContent&#125;</span>请求已发起\n`</span>;&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#reload&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  log.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><p>事件处理程序是一种特殊类型的回调函数。而<strong>回调函数</strong>则是一个被传递到另一个函数中的会在适当的时候被调用的函数。使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doStep1</span>(<span class="params">init, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = init + <span class="number">1</span>;</span><br><span class="line">  <span class="title function_">callback</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doStep2</span>(<span class="params">init, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = init + <span class="number">2</span>;</span><br><span class="line">  <span class="title function_">callback</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doStep3</span>(<span class="params">init, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = init + <span class="number">3</span>;</span><br><span class="line">  <span class="title function_">callback</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doOperation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">doStep1</span>(<span class="number">0</span>, <span class="function"><span class="params">result1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">doStep2</span>(result1, <span class="function"><span class="params">result2</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">doStep3</span>(result2, <span class="function"><span class="params">result3</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`结果：<span class="subst">$&#123;result3&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">doOperation</span>();</span><br></pre></td></tr></table></figure><p>以上示例在回调函数中调用回调函数，这样会形成深度嵌套的函数，通常这种情况被称为”回调地狱“和”厄运金字塔“，这样的回调嵌套给异常处理带来巨大的挑战。大多数现代异步 API 都不使用回调，而是以使用 <code>promise</code> 为主。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><code>Promise</code> 对象是为了解决<strong>回调地狱</strong>而提出的，它<strong>不是新的语法功能，而是一种新的写法</strong>，允许<strong>将回调函数的嵌套改成链式调用</strong>。</p><p><code>Promise</code> 的调用流程：</p><ol><li><code>Promise</code> 的构造方法接收一个 <code>executor()</code>，在 <code>new Promise()</code> 时就立刻执行这个 <code>executor</code> 回调</li><li><code>executor()</code> 内部的<em>异步任务</em>被放入<strong>宏&#x2F;微任务队列</strong>，等待执行</li><li><code>then()</code> 被执行，<strong>收集成功&#x2F;失败回调</strong>，放入成功&#x2F;失败队列</li><li><code>executor()</code> 的<strong>异步任务被执行</strong>，触发 <code>resolve/reject</code>，从成功&#x2F;失败队列中<strong>取出回调依次执行</strong></li></ol><p><code>Promise</code> 的设计实际上是<strong>观察者模式</strong>，这种</p><ol><li>收集依赖</li><li>触发通知</li><li>取出依赖执行</li></ol><p>的方式，被广泛运用于观察者模式的实现，</p><blockquote><p>在 <code>Promise</code> 里，执行顺序是</p><ol><li><code>then</code> 收集依赖</li><li>异步触发 <code>resolve</code></li><li><code>resolve</code> 执行依赖。</li></ol></blockquote><p>简略版 <code>Promise </code> 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">// Promise 状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="comment">// 成功队列，resolve 时触发</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_resolveQueue</span> = [];</span><br><span class="line">    <span class="comment">// 失败队列，reject 时触发</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rejectQueue</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于 resolve/reject 是在 executor 内部被调用, 因此需要使用箭头函数固定 this 指向, 否则找不到 this._resolveQueue</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">_resolve</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_status</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用队列来储存回调是为了实现规范要求的 &quot;then 方法可以被同一个 promise 调用多次&quot;</span></span><br><span class="line">      <span class="comment">// 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">_resolveQueue</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> callback = <span class="variable language_">this</span>.<span class="property">_resolveQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="title function_">callback</span>(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现与 resolve 同理</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">_reject</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 对应规范中的&quot;状态只能由 pending 到 fulfilled 或 rejected&quot;</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_status</span> !== <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">_rejectQueue</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> callback = <span class="variable language_">this</span>.<span class="property">_rejectQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="title function_">callback</span>(val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new Promise() 时立即执行 executor，并传入 resolve 和 reject</span></span><br><span class="line">    <span class="title function_">executor</span>(_resolve, _reject);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then 方法，接收一个成功的回调和一个失败的回调</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">resolveFn, rejectFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_resolveQueue</span>.<span class="title function_">push</span>(resolveFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rejectQueue</span>.<span class="title function_">push</span>(rejectFn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在基于 <code>Promise</code> 的 API 中，异步函数会启动操作并返回 <code>Promise</code> 对象。然后我们可以将处理函数附加到 <code>Promise</code> 对象上，当操作完成时（成功或者失败），这些函数将被执行。</p><h4 id="使用-fetch-API"><a href="#使用-fetch-API" class="headerlink" title="使用 fetch() API"></a>使用 fetch() API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 fetch() API，并将返回的 promise 对象赋给 fetchPromise</span></span><br><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fetchPromise);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将处理函数传递给 Promise 的 then() 方法，当获取操作成功时，Promise 将调用处理函数，并传入一个包含服务器相应的 response 对象。</span></span><br><span class="line">fetchPromise.<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已收到响应：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已发送请求……&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="链式使用-Promise"><a href="#链式使用-Promise" class="headerlink" title="链式使用 Promise"></a>链式使用 Promise</h4><p>当我们在 fetch 中得到一个相应对象 response，又继续调用 json 方法以获得其 json 格式数据时，json 方法也是异步的，所以会出现连续调用两个异步函数的情况，这就会出现先前提到的“回调地狱”情况，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fetchPromise.<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> jsonPromise = response.<span class="title function_">json</span>();</span><br><span class="line">  jsonPromise.<span class="title function_">then</span>( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 的优雅之处在于 <code>then()</code> 本身也会返回一个 Promise，这个 Promise 将指示调用函数中的异步函数完成状态。所以我们可以使用 promise 的链式调用来完成上述操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fetchPromise</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如此一来，我们可以不用在 then() 中嵌套调用 then()，而是可以直接返回 json 的 promise，并在返回值上继续调用第二个 then()。这被称为 <strong>Promise 链</strong> ，意味着我们需要连续进行异步函数时，可以避免不断嵌套所带来的缩进增加。</p><h4 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h4><p>Promise 对象提供了一个 <code>catch()</code> 方法来支持错误处理。类似于 <code>then()</code>，调用它并传入一个处理函数。当异步操作成功时，传递给 <code>then()</code> 的处理函数被调用，当异步操作失败时， <code>catch()</code>  处理函数被调用。如果将 <code>catch()</code> 添加到 Promise 链的末尾，它就可以在任何异步函数失败时被调用。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise = <span class="title function_">fetch</span>(<span class="string">&#x27;bad-scheme://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fetchPromise</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP 请求错误：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`无法获取产品列表：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise-术语"><a href="#Promise-术语" class="headerlink" title="Promise 术语"></a>Promise 术语</h4><p>Promise 有三种状态：</p><ul><li><strong>待定（pendding）</strong>：初始状态，既没有被兑现，也没有被拒绝。这是调用 <code>fetch()</code> 返回 Promise 时的状态，此时请求还在进行中。</li><li><strong>已兑现（fulfilled）</strong>：意味着操作成功完成。当 Promise 完成时，它的 <code>then()</code> 处理函数被调用。</li><li><strong>已拒绝（rejected）</strong>：意味着操作失败。当 Promise 失败时，它的 <code>catch()</code> 处理函数被调用。</li></ul><p>有时 fulfilled 和 rejected 两种状态可以使用 <strong>settled（已敲定）</strong>状态来表示。如果一个 Promise 处于已决议（resolved）状态，或者它被“锁定”以跟随另一个 Promise 的状态，那么它就是 <strong>已兑现（fulfilled）</strong>。</p><h4 id="合并多个-Promise"><a href="#合并多个-Promise" class="headerlink" title="合并多个 Promise"></a>合并多个 Promise</h4><p>如果遇到需要合并多个异步函数调用的情况，Promise 提供了 <code>Promise.all()</code> 和 <code>Promise.any()</code> 方法来进行处理。有时我们需要所有的 Promise 都得到实现，但它们并不相互依赖。这种情况适合使用<code>Promise.all()</code> 方法。</p><p>由 <code>Promise.all()</code> 返回的 Promise：</p><ul><li>当且仅当数组中<em>所有</em>的 Promise 都被兑现时，才会通知 <code>then()</code> 处理函数并提供一个包含所有响应的数组，数组中响应的顺序与被传入 <code>all()</code> 的 Promise 的顺序相同。</li><li>会被拒绝——如果数组中有<em>任何一个</em> Promise 被拒绝。此时，<code>catch()</code> 处理函数被调用，并提供被拒绝的 Promise 所抛出的错误。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise1 = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchPromise2 = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/not-found&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchPromise3 = <span class="title function_">fetch</span>(<span class="string">&#x27;bad-scheme://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([fetchPromise1, fetchPromise2, fetchPromise3])</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">responses</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> response <span class="keyword">of</span> responses) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;response.url&#125;</span>：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`获取失败：<span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>有时我们需要等待一组 Promise 中的某一个 Promise 的执行，而不关心是哪一个。这种情况可以使用 <code>Promise.any()</code>，在 Promise 中任何一个被兑现它就会被兑现，所有的 Promise 被拒绝它就被拒绝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchPromise1 = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchPromise2 = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/not-found&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fetchPromise3 = <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([fetchPromise1, fetchPromise2, fetchPromise3])</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;response.url&#125;</span>：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`获取失败：<span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h4><p>在一个函数的开头添加 async 就可以使其变成一个异步函数，异步函数总是返回一个 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这是一个异步函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在异步函数中，可以在调用一个返回 Promise 的函数之前使用 await 关键字，这使得代码在该点上等待，直到 Promise 被完成，这时 Promise 的响应被当作返回值，或者被拒绝的响应作为错误抛出。这使得我们可以编写像同步代码一样的异步函数。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProducts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span></span><br><span class="line">    <span class="comment">// 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP 请求错误：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span></span><br><span class="line">    <span class="comment">// `response.json()` 调用将返回 JSON 对象或抛出一个错误</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`无法获取产品列表：<span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonPromise = <span class="title function_">fetchProducts</span>();</span><br><span class="line">jsonPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">jsonData</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(jsonData[<span class="number">0</span>].<span class="property">name</span>));</span><br></pre></td></tr></table></figure><p>调用 <code>await fetch()</code>，得到的不是 Promise 对象，而是一个完整的 Response 对象。就像 <code>fetch()</code> 是一个同步函数一样。</p><p>类似于 Promise 链，await 强制异步操作以串联的方式完成，如果下一个操作的结果取决于上一个操作的结果，这是必要的，但如果没有关联，则使用 <code>Promise.all()</code> 会效率更高。</p><p>注：Promise 在所有现代浏览器的最新版本中都可以使用；唯一会出现支持问题的地方是 Opera Mini 和 IE11 及更早的版本。</p><h3 id="实现基于-Promise-的-API"><a href="#实现基于-Promise-的-API" class="headerlink" title="实现基于 Promise 的 API"></a>实现基于 Promise 的 API</h3><h4 id="实现和使用-alarm-API"><a href="#实现和使用-alarm-API" class="headerlink" title="实现和使用 alarm() API"></a>实现和使用 alarm() API</h4><p>使用 <code>setTimeout()</code> 函数和普通函数来实现 <code>alarm()</code> 函数。<code>setTimeout()</code> 有两个参数，一个参数为回调函数，另一个参数为以毫秒为单位的延迟。调用 <code>setTimeout()</code> 时，它将启动一个给定延迟的计时器，当时间过期时，它就会调用回调函数。示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;set-alarm&quot;</span>&gt;</span>Set alarm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#set-alarm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setAlarm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    output.<span class="property">textContent</span> = <span class="string">&#x27;Wake up!&#x27;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, setAlarm);</span><br></pre></td></tr></table></figure><p>使用 <strong><code>Promise()</code> 构造器</strong>实现 <code>alarm()</code> 函数。在 <code>alarm()</code> 函数中，定时器过期时才会返回一个兑现的 <code>Promise</code>，兑现的 <code>Promise</code> 会传递一个”wake up！”消息到 <code>then()</code> 处理器中，当调用者提供一个负值的延迟时拒绝这个 promise。</p><p><code>Promise()</code> 构造器使用单个函数作为参数，这个函数为<strong>执行器（executor）</strong>，在创建一个新的 promise 时需要实现这个执行器。执行器有两个参数，分别是 <code>resolve</code> 和 <code>reject</code>。在执行器中实现异步函数，如果异步函数成功，则调用 <code>resolve</code> 方法，如果失败则调用 <code>reject</code> 方法。如果在执行器中抛出错误，则自动调用 <code>reject</code> 方法。在调用  <code>resolve</code> 和 <code>reject</code> 方法中可以传入单个任意类型的参数。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#set-alarm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此函数创建并返回一个新建的 Promise，对于执行器中的 promise：</span></span><br><span class="line"><span class="comment">// 如果 delay 为负数，则抛出异常，自动调用 reject</span></span><br><span class="line"><span class="comment">// 执行 window.setTimeout()，当达到延迟 delay 后调用 resolve 返回 &quot;xxx, wake up!&quot; 信息。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setAlarm</span>(<span class="params">person, delay</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(delay &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Alarm delay must not be negative&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;person&#125;</span>, Wake up!`</span>);</span><br><span class="line">        &#125;, deply);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 alarm() API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#name&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> delay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#delay&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#set-alarm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Alarm delay must not be negative&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">`Wake up, <span class="subst">$&#123;person&#125;</span>!`</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> output.<span class="property">textContent</span> = res)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> output.<span class="property">textContent</span> = <span class="string">`Can&#x27;t not alarm : <span class="subst">$&#123;err&#125;</span>.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="在-alarm-API-上使用-async-和-await"><a href="#在-alarm-API-上使用-async-和-await" class="headerlink" title="在 alarm() API 上使用 async 和 await"></a>在 alarm() API 上使用 async 和 await</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#name&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> delay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#delay&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#set-alarm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> output = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alarm</span>(<span class="params">person, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delay &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Alarm delay must not be negative&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">`Wake up, <span class="subst">$&#123;person&#125;</span>!`</span>);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button.<span class="title function_">addEventlistener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> funciton () &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="keyword">await</span> <span class="title function_">alarm</span>(name.<span class="property">value</span>, delay.<span class="property">value</span>);</span><br><span class="line">        output.<span class="property">textContent</span> = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        output.<span class="property">textContent</span> = <span class="string">`Can&#x27;t not alarm : <span class="subst">$&#123;err&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="worker-简介"><a href="#worker-简介" class="headerlink" title="worker 简介"></a>worker 简介</h3><p>在同步编程中，可能会出现一个耗时较长的任务而阻碍整个程序的运行，使得整个窗口没有反应。从根本上讲，这是由于程序时单线程的。Workers 可以实现在不同的线程运行不同的任务，因此可以启动任务，然后继续其他的处理。workers 有三种不同的类型：</p><ul><li>dedicated workers</li><li>shared workers</li><li>service workers</li></ul><h4 id="使用-web-workers"><a href="#使用-web-workers" class="headerlink" title="使用 web workers"></a>使用 web workers</h4><p>使用 workers 生成质数的示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span><span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;quota&quot;</span>&gt;</span>Number of primes:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;quota&quot;</span> <span class="attr">name</span>=<span class="string">&quot;quota&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;generate&quot;</span>&gt;</span>Generate primes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>Reload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;user-input&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;62&quot;</span>&gt;</span>Try typing in here immediately after pressing &quot;Generate primes&quot;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 &quot;generate.js&quot; 中创建一个新的 worker</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;./generate.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户点击 &quot;Generate primes&quot; 时，给 worker 发送一条消息。</span></span><br><span class="line"><span class="comment">// 消息中的 command 属性是 &quot;generate&quot;, 还包含另外一个属性 &quot;quota&quot;，即要生成的质数。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#generate&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> quota = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#quota&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">  worker.<span class="title function_">postMessage</span>(&#123;</span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;generate&#x27;</span>,</span><br><span class="line">    <span class="attr">quota</span>: quota</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 worker 给主线程回发一条消息时，为用户更新 output 框，包含生成的质数（从 message 中获取）。</span></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#output&#x27;</span>).<span class="property">textContent</span> = <span class="string">`Finished generating <span class="subst">$&#123;message.data&#125;</span> primes!`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#reload&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#user-input&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;Try typing in here immediately after pressing &quot;Generate primes&quot;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听主线程中的消息。</span></span><br><span class="line"><span class="comment">// 如果消息中的 command 是 &quot;generate&quot;，则调用 `generatePrimse()`</span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.<span class="property">data</span>.<span class="property">command</span> === <span class="string">&#x27;generate&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">generatePrimes</span>(message.<span class="property">data</span>.<span class="property">quota</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成质数 (非常低效)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generatePrimes</span>(<span class="params">quota</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">2</span>; c &lt;= <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(n); ++c) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n % c === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> primes = [];</span><br><span class="line">  <span class="keyword">const</span> maximum = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (primes.<span class="property">length</span> &lt; quota) &#123;</span><br><span class="line">    <span class="keyword">const</span> candidate = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (maximum + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPrime</span>(candidate)) &#123;</span><br><span class="line">      primes.<span class="title function_">push</span>(candidate);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 完成后给主线程发送一条包含我们生成的质数数量的消息消息。</span></span><br><span class="line">  <span class="title function_">postMessage</span>(primes.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他类型的-workers"><a href="#其他类型的-workers" class="headerlink" title="其他类型的 workers"></a>其他类型的 workers</h4><ul><li><code>SharedWorker</code>  可以由运行在不同窗口中的多个不同脚本共享。</li><li><code>Service worker</code> 的行为就像代理服务器，缓存资源以便于 web 应用程序可以在用户离线时工作。他们是<strong>渐进式 Web 应用</strong>的关键组件。</li></ul><h4 id="案例：序列动画"><a href="#案例：序列动画" class="headerlink" title="案例：序列动画"></a>案例：序列动画</h4><p>需求：图中有三个图像，实现第一个图像旋转直到消失，第二个图像开始旋转直到消失，以此类推直到第三个图像消失。注：调用 <code>animate()</code> 方法会返回 Animation 对象，其中有一个 finished 属性为 Promise，可以根据这个 promise 来完成对动画播放结束的控制。实现示例如下：</p><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliceTumbling = [</span><br><span class="line">    &#123; <span class="attr">transform</span>: <span class="string">&#x27;rotate(0) scale(1)&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">transform</span>: <span class="string">&#x27;rotate(360deg) scale(0)&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aliceTiming = &#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">iterations</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;forwards&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alice1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> alice2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> alice3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">rotateAlice</span>(<span class="params">alice</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> alice.<span class="title function_">animate</span>(aliceTumbling, aliceTiming).<span class="property">finished</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">rotateAlice</span>(alice1)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">rotateAlice</span>(alice2))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">rotateAlice</span>(alice3))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error animating Alices: <span class="subst">$&#123;error&#125;</span>.`</span>));</span><br></pre></td></tr></table></figure><p>方法二（官方版）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aliceTumbling = [</span><br><span class="line">    &#123; <span class="attr">transform</span>: <span class="string">&#x27;rotate(0) scale(1)&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">transform</span>: <span class="string">&#x27;rotate(360deg) scale(0)&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aliceTiming = &#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">iterations</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">fill</span>: <span class="string">&#x27;forwards&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alice1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> alice2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> alice3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#alice3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alice1.<span class="title function_">animate</span>(aliceTumbling, aliceTiming).<span class="property">finished</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> alice2.<span class="title function_">animate</span>(aliceTumbling, aliceTiming).<span class="property">finished</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> alice3.<span class="title function_">animate</span>(aliceTumbling, aliceTiming).<span class="property">finished</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error animating Alices: <span class="subst">$&#123;error&#125;</span>.`</span>));</span><br></pre></td></tr></table></figure><h2 id="客户端-Web-API"><a href="#客户端-Web-API" class="headerlink" title="客户端 Web API"></a>客户端 Web API</h2><h3 id="客户端-Web-API-简介"><a href="#客户端-Web-API-简介" class="headerlink" title="客户端 Web API 简介"></a>客户端 Web API 简介</h3><p>常见的几种  Web API：</p><ul><li><strong>操作文档的 API</strong>内置于浏览器中。</li><li><strong>从服务器获取数据的 API</strong> 用于更新网页的一小部分是相当好用的。</li><li><strong>用于绘制和操作图形的 API</strong>目前已被浏览器广泛支持 — 最流行的是允许您以编程方式更新包含在 HTML 元素中的像素数据以创建 2D 和 3D 场景的 Canvas 和 WebGL。</li><li><strong>音频和视频 API</strong>。</li><li><strong>设备 API</strong> 基本上是以对网络应用程序有用的方式操作和检索现代设备硬件中的数据的 API。</li><li><strong>客户端存储 API</strong>。</li></ul><h3 id="文档操作-API"><a href="#文档操作-API" class="headerlink" title="文档操作 API"></a>文档操作 API</h3><h4 id="web-浏览器的重要部分"><a href="#web-浏览器的重要部分" class="headerlink" title="web 浏览器的重要部分"></a>web 浏览器的重要部分</h4><p>web 页面视图中的浏览器的主要部分：</p><ul><li>window，载入浏览器的标签。在 js 中用 Window 对象表示，可用于返回窗口大小、操作载入的文档、存储数据等；</li><li>navigator，用户代理，即浏览器在 web 上的状态和标识。在 js 中用 Navigator 对象表示，可获取地理位置信息、语言、多媒体流等；</li><li>document，载入窗口的实际页面。在 js 中用 Document 对象表示，可以用这个对象来返回和操作 HTML 和 CSS 上的信息，例如获取 DOM 中一个元素的引用，修改其文本内容，更改样式，删除，新建元素等等。</li></ul><h4 id="基本-DOM-操作"><a href="#基本-DOM-操作" class="headerlink" title="基本 DOM 操作"></a>基本 DOM 操作</h4><p><strong>选择节点</strong>，使用 <code>document.querySelector()</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// 通过 a 标签选择</span></span><br><span class="line">link.<span class="property">textContent</span> = <span class="string">&#x27;Mozilla Developer Network&#x27;</span>;</span><br><span class="line">link.<span class="property">href</span> = <span class="string">&#x27;https://developer.mozilla.org&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> link2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&#x27;</span>);<span class="comment">// 通过 container 类选择</span></span><br><span class="line"><span class="keyword">let</span> link3 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>);<span class="comment">// 通过 app id选择</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> link4 = <span class="title class_">Document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.container&#x27;</span>)<span class="comment">// 通过 container 类选择所有包含 container 类的标签 </span></span><br></pre></td></tr></table></figure><p><strong>创建新节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sect = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;section&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建新 p 节点</span></span><br><span class="line"><span class="keyword">let</span> para = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">para.<span class="property">textContent</span> = <span class="string">&#x27;We hope you enjoyed the ride.&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加到 section 标签子元素中</span></span><br><span class="line">sect.<span class="title function_">appendChild</span>(para);</span><br><span class="line"><span class="comment">// 创建新的文本节点，并添加到 p 标签中</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27; — the premier source for web development knowledge.&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> linkPara = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">linkPara.<span class="title function_">appendChild</span>(text);</span><br></pre></td></tr></table></figure><p><strong>移动和删除节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动 p 段落到 section 的底部</span></span><br><span class="line">sect.<span class="title function_">appendChild</span>(linkPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 linkPara 节点，需要有 linkPara 节点引用和其父节点的引用</span></span><br><span class="line">sect.<span class="title function_">removeChild</span>(linkPara);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只有节点自身引用，可以使用以下方法删除</span></span><br><span class="line">linkPara.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(linkPara);</span><br></pre></td></tr></table></figure><p><strong>操作样式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接修改节点样式</span></span><br><span class="line">para.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">para.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">para.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&#x27;10px&#x27;</span>;</span><br><span class="line">para.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span><br><span class="line">para.<span class="property">style</span>.<span class="property">textAlign</span> = <span class="string">&#x27;center&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置节点样式类</span></span><br><span class="line">para.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>获取视窗带大小</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 窗口大小调整事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取窗口宽度和高度</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">WIDTH</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">HEIGHT</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    <span class="comment">// 设置元素高度和宽度</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">width</span> = <span class="variable constant_">WIDTH</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">height</span> = <span class="variable constant_">HEIGHT</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取服务器数据-API"><a href="#获取服务器数据-API" class="headerlink" title="获取服务器数据 API"></a>获取服务器数据 API</h3><p>Ajax，全称为 Asynchronous JavaScript and XML（Ajax）。在网页上用于直接处理对服务器上可用的特定资源的 HTTP 请求，并在显示之前根据需要对结果数据进行格式化。</p><h4 id="基本的-Ajax-请求"><a href="#基本的-Ajax-请求" class="headerlink" title="基本的 Ajax 请求"></a>基本的 Ajax 请求</h4><p><strong>XMLHttpRequest</strong></p><p>XMLHttpRequest 通常也称为 XHR，非常古老的技术，在20世纪90年代后期由微软发明。使用实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> verseChoose = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;select&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> poemDisplay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;pre&#x27;</span>);</span><br><span class="line"></span><br><span class="line">verseChoose.<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> verse = verseChoose.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">updateDisplay</span>(verse);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDisplay</span>(<span class="params">verse</span>) &#123;</span><br><span class="line">    <span class="comment">// Web 服务器通常区分大小写，将选项信息转换为请求文件名</span></span><br><span class="line">    verse = verse.<span class="title function_">replace</span>(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    verse = verse.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">let</span> url = verse + <span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 设置请求类型及请求 url</span></span><br><span class="line">    request.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">    <span class="comment">// 设置响应类型，默认为文本 text</span></span><br><span class="line">    request.<span class="property">responseText</span> = <span class="string">&#x27;Text&#x27;</span>;</span><br><span class="line">    <span class="comment">// 在 onload 事件中处理响应程序</span></span><br><span class="line">    request.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        poemDisplay.<span class="property">textContent</span> = request.<span class="property">response</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送 XHR</span></span><br><span class="line">    request.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fetch</strong></p><p>以上使用 XMLHttpRequest 实现接口请求替换为使用 Fetch 实现如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">text</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">poemDisplay.<span class="property">textContent</span> = request.<span class="property">response</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fetch(...).then 相当于 XHR 的 onload 事件</span></span><br></pre></td></tr></table></figure><h3 id="客户端存储-API"><a href="#客户端存储-API" class="headerlink" title="客户端存储 API"></a>客户端存储 API</h3><p>客户端可以通过使用 JavaScript APIs 存储数据，通常会存储的数据有：</p><ul><li>个性化网站偏好（比如显示一个用户选择的窗口小部件，颜色主题，或者字体）。</li><li>保存之前的站点行为 (比如从先前的 session 中获取购物车中的内容，记住用户是否之前已经登陆过)。</li><li>本地化保存数据和静态资源可以使一个站点更快（至少让资源变少）的下载，甚至可以在网络失去链接的时候变得暂时可用。</li><li>保存 web 已经生产的文档可以在离线状态下访问。</li></ul><p>在早期，网站一般使用 cookies 来存储信息。但 cookie 已经过时，存在各种安全问题，并且无法存储复杂数据。它的唯一优势是支持非常古老的浏览器。</p><p>现代浏览器有比使用 cookie 更简单、更有效的存储客户端的 API：</p><ul><li>Web Storage API 提供一种非常简单的语法，用于存储和检索较小的、由名称和相应值组成的数据项。可以用于存储一些简单的数据，例如用户名、用户是否已经登录、用户屏幕背景色等。</li><li>IndexedDB API 提供一个完整的数据库系统来存储复杂的数据。这可以用于存储从完整的用户记录到甚至是复杂的数据类型，如音频或视频文件。</li></ul><h4 id="web-storage"><a href="#web-storage" class="headerlink" title="web storage"></a>web storage</h4><p>web storage 数据有两种类型：sessionStorage 和 localStorage。sessionStorage 在浏览器处于打开状态都会保留，关闭后数据会丢失。localStorage 数据会一直存储，无论浏览器开启或是关闭。通常第二种方法更有用。具体用法如下：</p><p><strong>localStorage</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数据，两个参数分别为数据项的名称和值，传入的第二个参数如果不是字符串类型则自动转为字符串类型</span></span><br><span class="line"><span class="comment">// 如果需要传入对象，记得使用 JSON.stringify() 方法，否则传入没有意义</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Chris&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过数据项的名称获取其值</span></span><br><span class="line"><span class="keyword">var</span> myName = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">myName<span class="comment">// Chris</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过名称删除数据项</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> myName = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">myName<span class="comment">// 返回 null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空数据项</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p><strong>sessionStorage</strong></p><p>用法基本与 localStorage 类似，例如 <code>localStorage.setItem() </code> 改为 <code>sessionStorage.setItem()</code> 即可。其他方法类似。区别是 sessionStorage 关闭网页后数据马上清除。</p><h2 id="ES6-特性"><a href="#ES6-特性" class="headerlink" title="ES6+ 特性"></a>ES6+ 特性</h2><h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p><strong>let</strong> 和 var 的区别，let 有以下特性：</p><ul><li>声明的变量仅在块级作用域内有效</li><li>不存在变量提升</li><li>存在暂时性死区</li><li>不允许重复声明</li></ul><p>块级作用域 —— let 声明的范围是<strong>块级作用域</strong>，var 声明的范围是<strong>函数作用域</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的块级作用域必须有大括号</span></span><br><span class="line"><span class="comment">// 第一种写法，报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法，不报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>暂时性死区</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// TDZ开始</span></span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂时性死区的本质：只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p><code>const</code> 声明一个只读的常量。一旦声明，常量的值就不能改变。<code>const</code> 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415</span>;</span><br><span class="line"><span class="variable constant_">PI</span> <span class="comment">// 3.1415</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span>;<span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo;<span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单的数据类型（数值、字符串、布尔值），值就保存在变量指向的地址，等同于常量。但对于复杂的数据类型（如对象和数组），变量指向的是内存地址，<code>const</code> 保证的是指针固定不变，而它所指向的内容无法保证是否不可变。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">name</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">foo.<span class="property">name</span><span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">foo = &#123;&#125;;<span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure><p>ES5 只有两种声明变量的方法：<code>var</code> 和 <code>function</code> 命令。ES6 除了添加 <code>let</code>和 <code>const</code> 命令，还有 <code>import</code> 和 <code>class</code> 命令。</p><h4 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h4><p>顶层对象，在浏览器环境指的是 <code>window</code> 对象，在 Node 指的是 <code>global</code> 对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>在 ES6 中，<code>var</code> 和 <code>function</code> 命令声明的全局变量依旧是顶层对象的属性，<code>let</code>、<code>const</code> 和 <code>class</code> 命令声明的全局变量不属于顶层对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成 this.a</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="globalThis-对象"><a href="#globalThis-对象" class="headerlink" title="globalThis 对象"></a>globalThis 对象</h4><p>JavaScript 中存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但在不同的运行环境下顶层对象实现是不同的。</p><ul><li>在浏览器中，顶层对象是 <code>window</code>，但 Node 和 Web Worker 没有 <code>window</code></li><li>浏览器和 Web Worker 里面，<code>self</code>也指向顶层对象，但是 Node 没有<code>self</code>。</li><li>Node 里面，顶层对象是<code>global</code>，但其他环境都不支持。</li></ul><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用“模式匹配”方式赋值</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// a=1,b=2,c=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 结构使用数组解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">x <span class="comment">// &quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将现有对象的方法赋值到某个变量</span></span><br><span class="line"><span class="keyword">const</span> &#123; log &#125; = <span class="variable language_">console</span>;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值实际上如下，真正的被赋值的是后一个值。对象的内部解构机制是先找到同名属性，再赋给对应的变量。</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br></pre></td></tr></table></figure><h4 id="函数的解构赋值"><a href="#函数的解构赋值" class="headerlink" title="函数的解构赋值"></a>函数的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]].<span class="title function_">map</span>(<span class="function">(<span class="params">[a, b]</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="comment">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p><strong>交换变量值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><p><strong>从函数返回多个值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="title function_">example</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = <span class="title function_">example</span>();</span><br></pre></td></tr></table></figure><p><strong>提取 JSON 数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">42</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id, status, number);</span><br><span class="line"><span class="comment">// 42, &quot;OK&quot;, [867, 5309]</span></span><br></pre></td></tr></table></figure><p><strong>遍历 Map 结构</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输入模块的指定方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SourceMapConsumer</span>, <span class="title class_">SourceNode</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;source-map&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h3><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认参数使用方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合解构使用参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(&#123;&#125;) <span class="comment">// undefined 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1 2</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// TypeError: Cannot read property &#x27;x&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h4 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h4><p>ES6 引入 rest 参数（形式为 <code>...变量名</code>），用于获取函数的多余参数，这样就不需要使用 <code>arguments</code> 对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 rest 参数实现的多参数求和函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：rest 参数后不能再有其他参数（即 rest 参数只能是最后一个参数），否则会报错</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a, ...b, c</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>ES6 允许使用“箭头”(&#x3D;&gt;)定义函数，使用示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = v =&gt; v;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">function</span> (<span class="params">num1, num2</span>) &#123; </span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果箭头函数返回对象，则必须在对象外面加上花括号，否则会报错</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getTempItem</span> = id =&gt; &#123;<span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&#x27;temp&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getTempItem</span> = id =&gt; &#123;&#123;<span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&#x27;temp&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">full</span> = (<span class="params">&#123;first, last&#125;</span>) =&gt; first + <span class="string">&#x27; &#x27;</span> + last;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">full</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> person.<span class="property">first</span> + <span class="string">&#x27; &#x27;</span> + person.<span class="property">last</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规回调函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 用箭头函数简化回调函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合 rest 参数使用箭头函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numbers</span> = (<span class="params">...nums</span>) =&gt; nums;</span><br><span class="line"><span class="title function_">numbers</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>使用箭头函数需要注意的几个点：</p><ul><li>箭头函数没有自己的 <code>this</code> 指针，箭头函数内的 <code>this</code>  指针是上一层作用域的 <code>this</code> 指针。</li><li>不可以当作构造函数</li><li>不可以使用 <code>arguments</code> 对象，可以使用 <code>rest</code> 参数代替</li><li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s1</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s2</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 箭头函数</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">s1</span>++, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通函数</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">s2</span>++;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timer = <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s1：&#x27;</span>, timer.<span class="property">s1</span>), <span class="number">3100</span>);<span class="comment">// s1:3</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s2：&#x27;</span>, timer.<span class="property">s2</span>), <span class="number">3100</span>);<span class="comment">// s2:0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下为 babel 转箭头函数产生的 ES5 语法，这很清晰地说明了箭头函数中 this 的指向</span></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;id:&#x27;</span>, _this.<span class="property">id</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为箭头函数 <code>this</code> 指针的特性，在定义对象的场合下最好不要使用箭头函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="attr">lives</span>: <span class="number">9</span>,</span><br><span class="line">  <span class="attr">jumps</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lives</span>--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jumps 箭头函数中的 this 指向的是全局对象，因此调用 cat.jumps() 会得不到预期的效果。这是因为对象不会构成单独的作用域，导致 jumps 函数定义时的作用域就是全局作用域。</span></span><br></pre></td></tr></table></figure><h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><h4 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;</span><br><span class="line">baz<span class="comment">// &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ms = &#123;&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getItem</span> (key) &#123;</span><br><span class="line">  <span class="keyword">return</span> key <span class="keyword">in</span> ms ? ms[key] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setItem</span> (key, value) &#123;</span><br><span class="line">  ms[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span> () &#123;</span><br><span class="line">  ms = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;getItem, setItem, clear&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">getItem</span>: getItem,</span><br><span class="line">    <span class="attr">setItem</span>: setItem,</span><br><span class="line">    <span class="attr">clear</span>: clear</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h4><p>ES6 可以使用 super 关键字指向当前对象的原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proto = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="property">foo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto);</span><br><span class="line">obj.<span class="title function_">find</span>() <span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：super 关键字表示原型对象时，只能在对象的方法中使用，在其他地方使用会报错</span></span><br></pre></td></tr></table></figure><h4 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h4><p><strong>解构赋值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><p>解构赋值要求等号右边是一个对象，而且必须是最后一个参数，否则会报错。需要注意的是，解构赋值的拷贝是浅拷贝，如果一个键的值是复合类型的值（数组、对象和函数）时，则解构赋值拷贝的是这个值的引用，而不是这个值的副本。另外，扩展运算符的解构赋值不能赋值继承自原型对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;...z&#125; = <span class="literal">null</span>;<span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;...x, y, z&#125; = someObject;<span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</span><br><span class="line">obj.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;<span class="comment">// 原对象被修改</span></span><br><span class="line">x.<span class="property">a</span>.<span class="property">b</span> <span class="comment">// 2// 浅拷贝的对象也会被修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line">obj2.<span class="property">__proto__</span> = obj1;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;...obj2&#125;;</span><br><span class="line">obj<span class="comment">//  &#123; b: 2 &#125;</span></span><br><span class="line">obj.<span class="property">a</span><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><strong>扩展运算符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 可以使用对象扩展运算符(...)取出参数对象的所有可遍历属性，拷贝到当前对象中。</span></span><br><span class="line"><span class="keyword">let</span> z = &#123;<span class="attr">a</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> n = &#123;...z&#125;;</span><br><span class="line">n<span class="comment">// &#123;a:3, b:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为数组是一个特殊的对象，所以也可以使用 ... 获取所有可遍历值</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;...[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&#125;;</span><br><span class="line">foo<span class="comment">// &#123;0:&#x27;a&#x27;, 1:&#x27;b&#x27;, 2:&#x27;c&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aClone = &#123; ...a &#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> aClone = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, a);</span><br></pre></td></tr></table></figure><h3 id="对象的新增方法"><a href="#对象的新增方法" class="headerlink" title="对象的新增方法"></a>对象的新增方法</h3><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>ES5 有两个比较值相等的方法：相等运算符 <code>==</code> 和严格相等运算符 <code>===</code>。它们都有缺点，<code>==</code> 会自动转换数据类型，<code>===</code> 比较时 <code>NaN</code> 不等于自身，并且 <code>+0</code> 等于 <code>-0</code>。ES6 新增加一个 <code>object.is()</code> 方法来比较两个值是否严格相等，与严格相等运算符 <code>===</code> 行为基本一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);<span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;, &#123;&#125;);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p><code>Object.assign()</code> 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure><p>使用注意点：</p><ul><li><p>浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象中的拷贝过来只是对象的引用，而不是新创建的对象</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">obj2.<span class="property">a</span>.<span class="property">b</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p>同名属性替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">d</span>: <span class="string">&#x27;e&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&#x27;hello&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: &#x27;hello&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>数组的处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>取值函数的处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">foo</span>() &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source)</span><br><span class="line"><span class="comment">// &#123; foo: 1 &#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>常见用途：</p><ul><li><p>为对象添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为对象添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">anotherMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line"><span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">someMethod</span> = <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">anotherMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>克隆对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种方法可以将一个对象拷贝到一个空对象上，但是这样无法拷贝它继承的值。想要保持它的继承链，则需要使用以下方法：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> originProto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>合并多个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 source 合并到 target 中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge1</span> = (<span class="params">target, ...source</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...source);</span><br><span class="line"><span class="comment">// 将 source 合并到一个空对象中，返回新对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge2</span> = (<span class="params">...source</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, ...source);</span><br></pre></td></tr></table></figure></li><li><p>为属性指定默认值</p></li></ul><h4 id="Object-keys-Object-value-和-Object-entries"><a href="#Object-keys-Object-value-和-Object-entries" class="headerlink" title="Object.keys(), Object.value() 和 Object.entries()"></a>Object.keys(), Object.value() 和 Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;keys, values, entries&#125; = <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title function_">values</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([key, value]); <span class="comment">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>ES5 的对象属性都是字符串，为了避免属性名冲突，ES6 引入 Symbol，与 Number、String 和 Boolean 一样都为 JavaScript 的基本数据类型，它表示独一无二的值。</p><p>Symbol 值通过 <code>Symbol()</code> 函数生成。在 ES6 中，对象的属性名有两种类型，一种是原有的字符串类型，另一种是新增加的 Symbol 类型。注意：Symbol 是一种基本数据类型，不是对象，所以不能用 new 命令调用，并且不可以添加属性，它是一种类似于字符串的数据类型。具体使用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">typeof</span> s<span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol 函数接受一个字符串作为参数，表示 Symbol 示例的描述</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br><span class="line"></span><br><span class="line">s1.<span class="property">description</span><span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">s2.<span class="property">description</span><span class="comment">// &#x27;bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol 值不能与其他类型的值进行运算</span></span><br><span class="line"><span class="string">&quot;your symbol is &quot;</span> + s1<span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br><span class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span><span class="comment">// TypeError: can&#x27;t convert symbol to string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是 Symbol 值可以显式转为字符串</span></span><br><span class="line"><span class="title class_">String</span>(s1) <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &#x27;Symbol(My symbol)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h4><p>使用 Symbol 值作为对象属性名可以保证不会出现同名属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">&#x27;hello&#x27;</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, mySymbol, &#123;<span class="attr">value</span>: <span class="string">&#x27;Hello!&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样的结果</span></span><br><span class="line">a[mySymbol]<span class="comment">// &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：Symbol 值作为对象属性名时，不能使用点运算符。因为点运算符后面总是字符串，所以不会读取 mySymbol 作为标识名所指代的值，导致 a 的属性名实际上是一个字符串，而不是 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="property">mySymbol</span> = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">&#x27;mySymbol&#x27;</span>] <span class="comment">// &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><p>同理，在对象内部，使用 Symbol 作为属性名时，Symbol 必须放在方括号内：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s]: <span class="keyword">function</span> (<span class="params">arg</span>) &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 简洁写法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [s]: (arg) &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</p><h4 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h4><p>Symbol 作为对象属性名时，该属性不会出现在 <code>for...in</code>、<code>for...of</code> 循环中，也不会被 <code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code> 返回。</p><p>但是，它也不是私有属性，有一个 <code>Object.getOwnPropertySymbols()</code> 方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是使用 Object.getOwnPropertySymbols() 方法获取所有 Symbol 值的例子</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">obj[b] = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols<span class="comment">// [Symbol(a), Symbol(b)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是 for...in 循环无法获取 Symbol 的例子</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">obj[foo] = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 无输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj) <span class="comment">// []</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj) <span class="comment">// [Symbol(foo)]</span></span><br></pre></td></tr></table></figure><p>还有一个新的 API，<code>Reflect.ownKeys()</code> 方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>(<span class="string">&#x27;my_key&#x27;</span>)]: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">enum</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">nonEnum</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line"><span class="comment">//  [&quot;enum&quot;, &quot;nonEnum&quot;, Symbol(my_key)]</span></span><br></pre></td></tr></table></figure><h3 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h3><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>ES6 提供新的数据结构 Set，它类似于数组，但是成员值都是唯一的，没有重复的值。具体用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="comment">// 用 add 方法添加新成员</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span> =&gt;</span> s.<span class="title function_">add</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化传入数组或者其它具有 iterable 接口的数据结构</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>，<span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]<span class="comment">// 1 2 3 4</span></span><br><span class="line">set.<span class="property">size</span><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 用于存储 dom 节点</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除数组的重复成员</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br><span class="line"><span class="comment">// 去除字符串重复字符</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找是否存在某个值</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">1</span>)<span class="comment">// true</span></span><br><span class="line">set.<span class="title function_">has</span>(<span class="number">5</span>)<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个值</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>)<span class="comment">// true</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">5</span>)<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有成员</span></span><br><span class="line">set.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Set 结构转化为数组</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(items);</span><br></pre></td></tr></table></figure><p>Set 有四个遍历方法，分别为 keys()，values()，entries()，forEach()。而且遍历的顺序就是插入的顺序。具体的遍历操作如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 Set 只有键名没有键值，所以 keys 方法和 values 方法的行为完全一致。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于 for (let x of set.values())</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set 实例的 forEach 方法，可以对成员执行某种操作，没有返回操作</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历的应用</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> arr = [...set];<span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 间接使用数组的 map 和 filter 方法</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>));<span class="comment">// 返回 Set 结构：&#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> != <span class="number">0</span>));<span class="comment">// 返回 Set 结构：&#123;1, 3, 5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。Object 结构提供”字符串-值“的对应，Map 结构提供”值-值“的对应，是一种更完善的 Hash 结构实现。如果需要”键值对“数据结构，则 Map 比 Object 更合适。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 Map 实例</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 设置键值对</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;www.xxx.com&#x27;</span>);</span><br><span class="line"><span class="comment">// 判断是否存在某个键</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;url&#x27;</span>)<span class="comment">// true</span></span><br><span class="line"><span class="comment">// 根据键获取值</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>)<span class="comment">// &#x27;www.xxx.com&#x27;</span></span><br><span class="line"><span class="keyword">const</span> n = &#123;<span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span>&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(o, <span class="string">&#x27;JavaScript is perfect!&#x27;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(o)<span class="comment">// &#x27;JavaScript is perfect!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的初始化,具有 Iterator 接口且每个成员都是一个双元素的数组的数组结构都可以当做 Map 构造函数的参数</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>]</span><br><span class="line">])</span><br><span class="line">m.<span class="property">size</span><span class="comment">// 2</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>)<span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)<span class="comment">// &#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 以 Map 对象当作构造函数参数</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>(m);</span><br><span class="line">m1.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)<span class="comment">// &#x27;Author&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除某个键</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)<span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)<span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>与 Set 类似，Map 也有四个遍历方法，分别为 keys()，values()，entries()，forEach()。而且 Map 的遍历顺序就是插入顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用 map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br></pre></td></tr></table></figure><p>Map 转为其它数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Map 转为数组</span></span><br><span class="line">[...map.<span class="title function_">keys</span>()]</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[...map.<span class="title function_">values</span>()]</span><br><span class="line"><span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"></span><br><span class="line">[...map.<span class="title function_">entries</span>()]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br><span class="line"></span><br><span class="line">[...map]</span><br><span class="line"><span class="comment">// [[1,&#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用数组的 map 和 filter 对 Map 进行遍历和过滤</span></span><br><span class="line"><span class="keyword">const</span> map0 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">filter</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;1 =&gt; &#x27;a&#x27;, 2 =&gt; &#x27;b&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="title class_">Map</span>(</span><br><span class="line">  [...map0].<span class="title function_">map</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">&#x27;_&#x27;</span> + v])</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// 产生 Map 结构 &#123;2 =&gt; &#x27;_a&#x27;, 4 =&gt; &#x27;_b&#x27;, 6 =&gt; &#x27;_c&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map 转为 对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToObj</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">    obj[k] = v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  .<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">strMapToObj</span>(myMap)</span><br><span class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转为 Map</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));</span><br></pre></td></tr></table></figure><h3 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h3><h4 id="promise-的含义"><a href="#promise-的含义" class="headerlink" title="promise 的含义"></a>promise 的含义</h4><p>Promise ，简单来说，就是一个<strong>容器</strong>，<strong>里面存储着某个未来才会结束的事件（通常是一个一步操作）的结果。</strong>从语法上说，Promise 是一个<strong>对象，从它可以获取异步操作的消息</strong>。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>Promise 对象的两个特点：</p><ul><li>对象的状态不受外界状态的影响。Promise 有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。只有异步操作才能决定当前是哪一种状态，其他操作无法改变这个状态。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象状态改变只有两种类型：从 <code>pending</code> 变为 <code>fulfilled</code> 和从 <code>pending</code> 变为 <code>rejected</code>。只要状态发生了改变，就会一直保持这个结果，这时就称为 resolved（已定型）。</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line"><span class="comment">// resolve 操作将 Promise 对象从 pending 转化为 resolved</span></span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// reject 操作将 Promise 对象从 pending 转化为 rejected</span></span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then 方法需要两个回调函数作为参数，第一个是 Promise 对象状态变为 resolved 时调用，第二个是 Promise 对象状态变为 rejected 时调用</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>用 Promise 对象实现 Ajax 操作的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getJSON = <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> handler = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        client.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">        client.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">        client.<span class="property">responseType</span> = <span class="string">&quot;json&quot;</span>;</span><br><span class="line">        client.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        client.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Contents: &#x27;</span> + json);  </span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;出错了&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般来说，最好不要在 then() 里定义 Reject 状态的回调函数，建议总是使用 catch 方法。</span></span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post.json&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Contents: &#x27;</span> + json);  </span><br><span class="line">    &#125;);</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;出错了&#x27;</span>, error);</span><br><span class="line">    &#125;);=</span><br></pre></td></tr></table></figure><h3 id="Generator-函数异步编程"><a href="#Generator-函数异步编程" class="headerlink" title="Generator 函数异步编程"></a>Generator 函数异步编程</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>Generator 函数是 ES6 提供的一种异步编程解决方案。从语法上理解，Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象。</p><p>Generator 函数的两个特征：1.<code>function</code> 关键字与函数名之间有一个星号；2.函数体内部使用 <code>yield</code> 表达式，定义不同的内部状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helloWorldenerator 函数有三个状态：hello, world 和 return 语句（结束状态）</span></span><br><span class="line"><span class="comment">// 与普通甘函数一样，在函数名后面加上一个对圆括号调用，但是调用 Generator 函数不会立即执行，而是返回一个遍历器对象，必须调用 next 方法才会是指针移向下一个状态。</span></span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h4 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h4><p>由于 Generator 函数返回的遍历器对象，只有调用 <code>next</code> 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。<code>yield</code> 表达式就是暂停标志。</p><p>遍历器对象 <code>next</code> 方法的运行逻辑如下：</p><ol><li>遇到 <code>yield</code> 表达式，就暂停执行后面的操作，并将紧跟在 <code>yield</code> 后面的那个表达式的值，作为返回的对象的 <code>value</code> 属性值。</li><li>下一次调用 <code>next</code> 方法时，再继续往下执行，直到遇到下一个 <code>yield</code> 表达式。</li><li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li><li>如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 123 + 456 不会立即求值，只会在 next 方法将指针移到这一句时，才会求值。</span></span><br><span class="line">    <span class="keyword">yield</span>  <span class="number">123</span> + <span class="number">456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Generator-函数异步应用"><a href="#Generator-函数异步应用" class="headerlink" title="Generator 函数异步应用"></a>Generator 函数异步应用</h4><p>ES6 异步编程的方法：</p><ul><li>回调函数</li><li>事件监听</li><li>发布&#x2F;订阅</li><li>Promise 对象</li><li>Generator 函数</li></ul><p><strong>异步</strong></p><p>异步就是一个任务不是连续完成的，可以理解成该任务被认为分成两个阶段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。例如，某个程序有两个操作，分别是读取文件处理操作和其他操作，异步的做法可以先发出读取文件请求，转而继续执行其他操作，等文件读取完毕再紧接着执行处理文件操作，这种不连续的执行方式，就叫异步。</p><p>相应地，连续的执行就叫同步。由于是连续执行，不能插入其他任务，所以读取文件的时候只能干等，无法进行其他操作。</p><p><strong>协程</strong></p><p>协程也是一种异步编程的解决方案，意思是多个线程互相协作，完成异步任务。</p><p>协程的运行流程大致如下：</p><ol><li>协程 A 开始执行</li><li>协程 A 执行到一半，进入暂停，执行权转移到协程 B</li><li>一段时间后协程 B 交还执行权</li><li>协程 A 恢复执行</li></ol><p>读取文件的协程做法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">asyncJob</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">yield</span> <span class="title function_">readFile</span>(fileA);</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncJob 是一个协程，协程遇到 yield 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。</span></span><br><span class="line"><span class="comment">// 使用 Generator 函数实现协程的优点是写法非常像同步操作，如果去掉 yield 命令则与同步操作无异。</span></span><br></pre></td></tr></table></figure><h3 id="async-x2F-await-异步编程"><a href="#async-x2F-await-异步编程" class="headerlink" title="async &#x2F; await 异步编程"></a>async &#x2F; await 异步编程</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>async 函数是 Generator 函数的语法糖。相较于 Generator 函数，async 函数有以下改进点：</p><ul><li>内置执行器。不像 Generator 函数需要调用 next 方法或者 co 模块才会执行得到最后结果，async 函数与普通函数一样会自动执行输出最后结果。</li><li>更好的语义。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</li><li>更高的广泛性。co 模块约定 <code>yield</code>命令后面只能是 Thunk 函数或 Promise 对象，而 <code>async</code> 函数的 <code>await</code> 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但会自动转成立即 resolved 的 Promise 对象）。</li><li>返回值是 Promise。 Generator 函数的返回值是 Iterator 对象，async 函数返回的是 Promise 对象。</li></ul><p>async 函数可以看作是多个异步操作，包装成一个 Promise 对象，而 await 命令就是内部 then 命令的语法糖。</p><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncPrint</span>(<span class="params">value, ms</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeout</span>(ms);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncPrint</span>(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>Promise 对象的状态变化</strong></p><p>async 函数返回的 Promise 对象必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。换句话说，就是只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getTitle</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="keyword">let</span> html = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line">  <span class="keyword">return</span> html.<span class="title function_">match</span>(<span class="regexp">/&lt;title&gt;([\s\S]+)&lt;\/title&gt;/i</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getTitle</span>(<span class="string">&#x27;https://tc39.github.io/ecma262/&#x27;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line"><span class="comment">// &quot;ECMAScript 2017 Language Specification&quot;</span></span><br><span class="line"><span class="comment">// 上述操作会在函数内部执行完抓取网页、取出文本、匹配页面标题三个操作都完成后，才会执行 getTitle 函数 then 方法里的 console.log</span></span><br></pre></td></tr></table></figure><p><strong>await 命令</strong></p><p>正常情况下，await 命令后面是一个 Promise 对象，返回该对象的结果。如果不是 Promise 对象，就直接返回对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 等同于</span></span><br><span class="line">  <span class="comment">// return 123;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>使用 await 命令实现休眠效果，可以让程序停顿指定的时间，以下是简化的 sleep 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">interval</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, interval);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">one2FiveInAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">one2FiveInAsync</span>();</span><br></pre></td></tr></table></figure><p>任何一个 await 语句后面的 Promise 对象变为 reject 状态，那么整个 async 函数都会中断执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 不会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望异步操作失败也继续执行后面的异步操作，可以把第一个 await 放在 try…catch 结构里，这样无论这个异步操作是否成功，第二个都会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p><strong>异常处理</strong></p><p>await 的异步操作出错等同于 async 函数返回的对象被 reject。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = <span class="keyword">await</span> <span class="title function_">firstStep</span>();</span><br><span class="line">    <span class="keyword">const</span> val2 = <span class="keyword">await</span> <span class="title function_">secondStep</span>(val1);</span><br><span class="line">    <span class="keyword">const</span> val3 = <span class="keyword">await</span> <span class="title function_">thirdStep</span>(val1, val2);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Final: &#x27;</span>, val3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>await 命令使用注意点：</p><ul><li>最好把 await 命令放在 try…catch 代码块中</li><li>如果多个 await 异步操作不存在继发关系，最好让它们同时触发</li><li>await 命令只能在 async 函数中使用，如果在其他普通函数中使用会报错</li><li>async 函数可以保留运行堆栈</li></ul><h3 id="Module-的语法"><a href="#Module-的语法" class="headerlink" title="Module 的语法"></a>Module 的语法</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>在 ES6 之前，最主要的模块加载方案有 CommonJS 和 AMD 两种，前者主要用于服务器，后者主要用于浏览器。</p><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的遍历。CommonJS 和 AMD 都只能在运行时确定这些东西。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS模块</span></span><br><span class="line"><span class="keyword">let</span> &#123; stat, exists, readfile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.<span class="property">stat</span>;</span><br><span class="line"><span class="keyword">let</span> exists = _fs.<span class="property">exists</span>;</span><br><span class="line"><span class="keyword">let</span> readfile = _fs.<span class="property">readfile</span>;</span><br></pre></td></tr></table></figure><p>以上代码的实质是整体加载 <code>fs</code> 模块生成一个对象 _fs，然后再从这个对象上读取 3 个方法。这种方式称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没有办法在编译时“静态优化”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; stat, exists, readFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br></pre></td></tr></table></figure><p>以上代码的实质是从 <code>fs</code> 模块加载 3 个方法，其他方法不加载。这种方式称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率比 CommonJS 模块高。</p><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>ES6 的模块自动采用严格模式，不管有没有在模块头部加上 <code>&quot;use strict&quot;;</code>。严格模式主要有以下限制：</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用 <code>with</code> 语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量 <code>delete prop</code>，会报错，只能删除属性 <code>delete global[prop]</code></li><li><code>eval</code> 不会在它的外层作用域引入变量</li><li><code>eval</code> 和 <code>arguments</code> 不能被重新赋值</li><li><code>arguments</code> 不会自动反映函数参数的变化</li><li>不能使用 <code>arguments.callee</code></li><li>不能使用 <code>arguments.caller</code></li><li>禁止 <code>this</code> 指向全局对象</li><li>不能使用 <code>fn.caller</code> 和 <code>fn.arguments</code> 获取函数调用的堆栈</li><li>增加了保留字（比如 <code>protected</code>、<code>static</code> 和 <code>interface</code> ）</li></ul><h4 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h4><p>模块功能主要由两个命令构成：<code>export </code> 和 <code>import</code>。<code>export</code> 命令用于规定模块的对外接口，<code>import</code> 命令用于输入其他模块提供的功能。一个模块就是一个独立的文件，改文件内部的所有变量无法被外部获取。使用 <code>export </code> 命令可以输出变量，供其他模块使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="comment">// 输出变量</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出函数或者类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 as 关键字通过别名的方式输出</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">    v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">    v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>export </code> 语句输出的接口，与其对应的值是动态绑定关系，即通过该接口可以取到模块内部实时的值。</p><p><code>export</code> 命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。</p><h4 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h4><p>使用 <code>export </code> 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 <code>import</code> 命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 as 关键字重命名导入变量</span></span><br><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>import</code> 命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面改写接口。如果输入变量是对象，可以改写其属性值，但是不建议这样做，建议凡是输入的变量都当作完全只读，不要轻易改变它的属性。</p><p><code>import</code> 后面的 <code>from</code> 指定模块的位置，可以是相对路径，也可以是绝对路径。如果不带有路径，只是一个模块名，那么必须有配置文件告诉 JavaScript 引擎该模块的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"><span class="comment">// 以上的 util 是模块文件名，不带有路径名，所以需要有相关配置</span></span><br></pre></td></tr></table></figure><p><code>import</code> 命令具有提升效果，会提升到整个模块的头部，首先执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;my_module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码不会报错</span></span><br></pre></td></tr></table></figure><h4 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h4><p>使用 <code>*</code> 关键字可以指定一个对象，将所有输出值都加载在这个对象上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆面积：&#x27;</span> + circle.<span class="title function_">area</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆周长：&#x27;</span> + circle.<span class="title function_">circumference</span>(<span class="number">14</span>));</span><br></pre></td></tr></table></figure><h4 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h4><p>在以上例子中，都需要事先知道所要加载的变量名或函数名，否则无法加载。但有时候用户未必愿意阅读文档，去了解模块有哪些属性和方法。为了方便用户使用，让他们不使用文档就能加载模块，可以使用 <code>export default</code> 命令，为模块指定默认输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><p>本质上，<code>export default</code> 就是输出一个叫做 <code>default</code> 的变量或方法，然后系统允许你为它取任意名字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// export default add;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="Module-的加载实现"><a href="#Module-的加载实现" class="headerlink" title="Module 的加载实现"></a>Module 的加载实现</h3><h4 id="浏览器加载"><a href="#浏览器加载" class="headerlink" title="浏览器加载"></a>浏览器加载</h4><p>HTML 网页中，浏览器通过 <code>&lt;script&gt;</code> 标签加载 JavaScript 脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面内嵌的脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// module code</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 外部脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;path/to/myModule.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果脚本体积较大，下载和执行时间过长会造成阻塞，带来不好的用户体验。所以可以使用异步加载的方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/myModule.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;path/to/myModule.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>defer</code> 或 <code>async</code> 都是异步加载方式。渲染引擎遇到这行命令不会停止执行，而是开始下载，并直接执行后面的命令。</p><p><code>defer</code> 和 <code>async</code> 的区别：</p><ul><li><code>defer</code> 要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code> 一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。</li><li><code>defer</code> <strong>渲染完再执行</strong>；<code>async</code> <strong>下载完就执行</strong>。</li><li><code>defer</code> 会<strong>按照页面出现顺序加载</strong>；<code>async</code> <strong>不保证加载顺序</strong>。</li></ul><p>浏览器支持使用 <code>&lt;script&gt;</code> 标签加载 ES6 模块，具体使用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;./foo.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- <span class="variable language_">module</span> 的 script 都是异步加载的，所以等同于 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./foo.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h4><p>ES6 模块与 CommonJS 模块的三大重大差异：</p><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li><li>CommonJS 模块的 <code>require()</code> 是同步加载模块，ES6 模块的 <code>import</code> 命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/post/ee69e452.html"/>
      <url>/post/ee69e452.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-知识点"><a href="#CSS-知识点" class="headerlink" title="CSS 知识点"></a>CSS 知识点</h1><h2 id="CSS-第一步"><a href="#CSS-第一步" class="headerlink" title="CSS 第一步"></a>CSS 第一步</h2><h3 id="CSS-之旅"><a href="#CSS-之旅" class="headerlink" title="CSS 之旅"></a>CSS 之旅</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类名选择器"><a href="#类名选择器" class="headerlink" title="类名选择器"></a>类名选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.special</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据元素在文档中的位置确定样式"><a href="#根据元素在文档中的位置确定样式" class="headerlink" title="根据元素在文档中的位置确定样式"></a>根据元素在文档中的位置确定样式</h4><p>包含选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="comment">/* 该选择器将选择&lt;li&gt;内部的任何&lt;em&gt;元素（&lt;li&gt;的后代） */</span></span><br><span class="line">    <span class="attribute">color</span>: rebeccapurple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相邻选择符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 该选择器将选择与&lt;h1&gt;相邻的同级&lt;p&gt;元素 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据状态确定样式"><a href="#根据状态确定样式" class="headerlink" title="根据状态确定样式"></a>根据状态确定样式</h4><p>状态选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="comment">/* 没有被访问的链接颜色变为粉色 */</span></span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="comment">/* 访问过的链接变为绿色 */</span></span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/* 鼠标悬停时移除下划线 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建-CSS"><a href="#构建-CSS" class="headerlink" title="构建 CSS"></a>构建 CSS</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>使用 CSS 的三种方式：</p><ul><li>外部样式（推荐）</li><li>内部样式</li><li>内联样式（除非有充分的理由，否则不要这样用）</li></ul><h4 id="规则"><a href="#规则" class="headerlink" title="@ 规则"></a>@ 规则</h4><p>最常见的 @rule 之一是 <code>@media</code>，它允许您使用<strong>媒体查询</strong>来应用 CSS，仅当某些条件成立 (例如，当屏幕分辨率高于某一数量，或屏幕宽度大于某一宽度时)。在下面的 CSS 中，我们将给 <code>&lt;body&gt;</code> 元素一个粉红色的背景色。但是，我们随后使用 @media 创建样式表的一个部分，该部分仅适用于视口大于 30em 的浏览器。如果浏览器的宽度大于 30em，则背景色将为蓝色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">30em</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-运行过程"><a href="#CSS-运行过程" class="headerlink" title="CSS 运行过程"></a>CSS 运行过程</h3><h4 id="网页加载过程"><a href="#网页加载过程" class="headerlink" title="网页加载过程"></a>网页加载过程</h4><p>浏览器加载网页的简化版流程：</p><ol><li>浏览器载入 HTML 文件（比如从网络上获取）。</li><li>将 HTML 文件转化成一个 DOM（Document Object Model），DOM 是文件在计算机内存中的表现形式，下一节将更加详细的解释 DOM。</li><li>接下来，浏览器会拉取该 HTML 相关的大部分资源，比如嵌入到页面的图片、视频和 CSS 样式。JavaScript 则会稍后进行处理，简单起见，同时此节主讲 CSS，所以这里对如何加载 JavaScript 不会展开叙述。</li><li>浏览器拉取到 CSS 之后会进行解析，根据选择器的不同类型（比如 element、class、id 等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id 选择器等）应用在对应的 DOM 的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><p>流程图如下所示：</p><p><img src="/img/css/rendering.svg" alt="img"></p><p>如果一个浏览器在解析你所书写的 CSS 规则的过程中遇到了无法理解的属性或者值，它会<strong>忽略</strong>这些并<strong>继续解析</strong>下面的 CSS 声明。在你书写了错误的 CSS 代码（或者误拼写），又或者当浏览器遇到对于它来说很新的还没有支持的 CSS 代码的时候上述的情况同样会发生（直接忽略）。相似的，当浏览器遇到无法解析的选择器的时候，他会直接忽略整个选择器规则，然后解析下一个 CSS 选择器。</p><h2 id="CSS-构建基础"><a href="#CSS-构建基础" class="headerlink" title="CSS 构建基础"></a>CSS 构建基础</h2><h3 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h3><h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4><p>当应用两条同级别的规则到一个元素的时候，写在后面的就是实际使用的规则。</p><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>多个不同的选择器选择同一个元素时，<strong>优先级</strong>决定哪个选择器生效，选择器优先级：ID 选择器 &gt; 类选择器 &gt; 元素选择器</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>一些在父元素上的 CSS 属性是可以继承到子元素上的，例如</p><p>可继承的属性：color、font-family</p><p>不可继承的属性：width、margin、padding、border</p><h4 id="优先级权重"><a href="#优先级权重" class="headerlink" title="优先级权重"></a>优先级权重</h4><p>一个选择器的优先级可以说是由三个不同的值（或分量）相加，可以认为是百（ID）十（类）个（元素）——三位数的三个位数：</p><ul><li><strong>ID</strong>：选择器中包含 ID 选择器则百位得一分。</li><li><strong>类</strong>：选择器中包含类选择器、属性选择器或者伪类则十位得一分。</li><li><strong>元素</strong>：选择器中包含元素、伪元素选择器则个位得一分。</li></ul><p>选择器优先级举例：</p><table><thead><tr><th align="left">选择器</th><th align="left">ID</th><th align="left">类</th><th align="left">元素</th><th align="left">优先级</th></tr></thead><tbody><tr><td align="left"><code>h1</code></td><td align="left">0</td><td align="left">0</td><td align="left">1</td><td align="left">0-0-1</td></tr><tr><td align="left"><code>h1 + p::first-letter</code></td><td align="left">0</td><td align="left">0</td><td align="left">3</td><td align="left">0-0-3</td></tr><tr><td align="left"><code>li &gt; a[href*=&quot;en-US&quot;] &gt; .inline-warning</code></td><td align="left">0</td><td align="left">2</td><td align="left">2</td><td align="left">0-2-2</td></tr><tr><td align="left"><code>#identifier</code></td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">1-0-0</td></tr><tr><td align="left"><code>button:not(#mainBtn, .cta)</code></td><td align="left">1</td><td align="left">0</td><td align="left">1</td><td align="left">1-0-1</td></tr></tbody></table><p>注：style 内联样式的优先级高于所有选择器；!important 用于修改特定属性的值，能够覆盖普通规则的层叠，改变层叠的常规工作方式，<strong>强烈建议除了非常情况不要使用它</strong>。</p><h3 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h3><h4 id="选择器列表"><a href="#选择器列表" class="headerlink" title="选择器列表"></a>选择器列表</h4><p>不同的选择器可以混合使用，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-class">.special</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择器种类"><a href="#选择器种类" class="headerlink" title="选择器种类"></a>选择器种类</h4><p>元素、类和 ID 选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123; &#125;</span><br><span class="line"><span class="selector-id">#unique</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>标签属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 根据一个元素上的某个标签的属性的存在以选择元素的不同方式 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据一个有特定值的标签属性是否存在来选择 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;https://example.com&quot;</span>]</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>伪类与伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* :hover 伪类会在鼠标指针悬浮到一个元素上的时候选择这个元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ::first-line是会选择一个元素中的第一行 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>运算符</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子代选择器，下列 &gt; 运算符选择了 &lt;article&gt; 元素的初代子元素，意思为只有 article 的子节点 p 会生效，其更深辈分的节点不会生效 */</span></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">p</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后代选择器，article 的所有后代节点 p 会生效 */</span></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相邻兄弟选择器，选择与 h1 相邻的 p 节点生效 */</span></span><br><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>盒子模型通常有两种：<strong>块级盒子</strong>和<strong>内联盒子</strong></p><h4 id="块级盒子"><a href="#块级盒子" class="headerlink" title="块级盒子"></a>块级盒子</h4><ul><li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li><li>每个盒子都会换行</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性可以发挥作用</li><li>内边距（padding）, 外边距（margin）和 边框（border）会将其他元素从当前盒子周围“推开”</li></ul><h4 id="内联盒子"><a href="#内联盒子" class="headerlink" title="内联盒子"></a>内联盒子</h4><ul><li>盒子不会产生换行。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性将不起作用。</li><li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li><li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li></ul><h4 id="盒模型组成部分"><a href="#盒模型组成部分" class="headerlink" title="盒模型组成部分"></a>盒模型组成部分</h4><ul><li><strong>Content box</strong>: 这个区域是用来显示内容，大小可以通过设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a>。</li><li><strong>Padding box</strong>: 包围在内容区域外部的空白区域；大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a> 相关属性设置。</li><li><strong>Border box</strong>: 边框盒包裹内容和内边距。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border"><code>border</code></a> 相关属性设置。</li><li><strong>Margin box</strong>: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 相关属性设置。</li></ul><h4 id="标准盒模型和替代盒模型"><a href="#标准盒模型和替代盒模型" class="headerlink" title="标准盒模型和替代盒模型"></a>标准盒模型和替代盒模型</h4><p><strong>标准盒模型</strong>的实际大小由 content box、padding 和 border 共同决定，例如其宽度等于 width + padding +border。margin 不计入 box 实际大小，它会影响盒子在页面所占空间，但影响的是盒子外部空间。  </p><p><strong>替代盒模型</strong>的实际大小由 width 和 height 决定，即其 content 宽度高度大小由 width&#x2F;height - padding - border。 </p><p>默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 <code>box-sizing: border-box</code> 来实现。</p><p><strong>备注：</strong> 一个有趣的历史记录 ——Internet Explorer 默认使用替代盒模型，没有可用的机制来切换。（译者注：IE8+ 支持使用 <code>box-sizing</code> 进行切换）</p><h4 id="外边距折叠"><a href="#外边距折叠" class="headerlink" title="外边距折叠"></a>外边距折叠</h4><p>如果你有两个外边距相接的元素，这些外边距将合并为一个外边距，即最大的单个外边距的大小。例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>I am paragraph one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>I am paragraph two.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>paragraph one 和 paragraph two 的上下边距为 50 px，而不是 80 px。修改 two 的 margin-top 为 0px 可以发现边距并不会改变。</p><h4 id="盒子模型和内联盒子"><a href="#盒子模型和内联盒子" class="headerlink" title="盒子模型和内联盒子"></a>盒子模型和内联盒子</h4><p>有些属性也可以应用于<strong>内联盒子</strong>，例如由<code>&lt;span&gt;</code>元素创建的那些内联盒子。对<code>&lt;span&gt;</code>应用了宽度、高度、边距、边框和内边距。可以看到，宽度和高度被忽略了。<strong>外边距</strong>、<strong>内边距</strong>和<strong>边框</strong>是生效的，但它们不会改变其他内容与内联盒子的关系，因此内边距和边框会与段落中的其他单词重叠。 例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    I am a paragraph and this is a <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span> inside that paragraph. A span is an inline element and so does not respect width and height.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E7%9B%92%E6%A8%A1%E5%9E%8B-inlline-box%E4%BE%8B%E5%AD%90.jpg" alt="css-盒模型-inlline-box例子"></p><h4 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display:inline-block"></a>display:inline-block</h4><p>使用 display:inline-block 样式会有块级的部分效果：</p><ul><li>设置 <code>width</code> 和 <code>height</code> 属性会生效。</li><li><code>padding</code>, <code>margin</code>, 以及 <code>border</code> 会推开其他元素。</li></ul><p>但它不会跳转到新行，如果显式添加 <code>width</code> 和 <code>height</code> 属性，它只会 变得比其内容更大。</p><h3 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h3><h4 id="CSS-的背景样式"><a href="#CSS-的背景样式" class="headerlink" title="CSS 的背景样式"></a>CSS 的背景样式</h4><p><strong>背景颜色</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#567895</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景图片</strong>，默认情况下，大图不会缩小以适应方框，只会显示大图的一个边角，而小图则是以平铺的方式填充方框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">balloons.jpg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景平铺</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">star.png</span>);</span><br><span class="line">    <span class="comment">/* 不重复 */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 水平重复 */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">    <span class="comment">/* 水平重复 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">    <span class="comment">/* 在两个方向重复 */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调整背景图大小</strong>，可以使用 <code>background-size</code> 来设置背景图的长度或者百分比值来调整图像大小以适应背景。初次之外，还可以使用关键字：</p><ul><li><code>cover</code> — 浏览器将使图像足够大，使它完全覆盖了盒子区，同时仍然保持其高宽比。在这种情况下，有些图像可能会跳出盒子外</li><li><code>contain</code> — 浏览器将使图像的大小适合盒子内。在这种情况下，如果图像的长宽比与盒子的长宽比不同，则可能在图像的任何一边或顶部和底部出现间隙。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">balloons.jpg</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 直接设置长度和宽度 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100px</span> <span class="number">10em</span>;</span><br><span class="line">    <span class="comment">/* 保持高宽比全覆盖盒子区域 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="comment">/* 保持宽高比覆盖盒子区域，如果盒子宽高比不一致则可能会留空 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景图像定位</strong>，可以使用 <code>background-position</code> 属性控制背景图像在盒子区域中的显示位置。它使用的坐标系中，框的左上角是 (0,0)，框沿着水平 (x) 和垂直 (y) 轴定位。<strong>备注：</strong> 默认的背景位置值是 (0,0)。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">star.png</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="comment">/* 使用关键字定位 */</span></span><br><span class="line">  <span class="attribute">background-position</span>: top center;</span><br><span class="line">    <span class="comment">/* 使用长度值和百分比定位 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">20px</span> <span class="number">10%</span>;</span><br><span class="line">    <span class="comment">/* 混合使用关键字、长度值及百分比定位 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: top <span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/* 使用 4-value 定位 */</span></span><br><span class="line">    <span class="attribute">background-position</span>: top <span class="number">20px</span> right <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>背景附加</strong>，使用 <code>background-attachment</code> 可以控制背景的滚动：</p><ul><li><code>scroll</code>: 使元素的背景在页面滚动时滚动。如果滚动了元素内容，则背景不会移动。实际上，背景被固定在页面的相同位置，所以它会随着页面的滚动而滚动。</li><li><code>fixed</code>: 使元素的背景固定在视图端口上，这样当页面或元素内容滚动时，它就不会滚动。它将始终保持在屏幕上相同的位置。</li><li><code>local</code>: 这个值是后来添加的 (它只在 Internet Explorer 9+中受支持，而其他的在 IE4+中受支持)，因为滚动值相当混乱，在很多情况下并不能真正实现您想要的功能。局部值将背景固定在设置的元素上，因此当您滚动元素时，背景也随之滚动。</li></ul><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="comment">/* 上述 css 样式实际上等同于 */</span></span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: black;    </span><br><span class="line">    <span class="comment">/* 圆角 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="溢出内容处理"><a href="#溢出内容处理" class="headerlink" title="溢出内容处理"></a>溢出内容处理</h3><p>对于固定大小的盒子区域，内容包含的文本可能会存在过多的情况，导致内容显示超出盒子区域，此时可以使用 <code>overflow</code> 属性来控制溢出内容显示方式。<code>overflow </code>的默认值为 <code>visible</code>，这就是我们的内容溢出的时候，我们在默认情况下看到它们的原因。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 隐藏溢出内容 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="comment">/* 显示滚动条，并且无论有没有内容溢出，都会在水平和垂直方向显示滚动条 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: scroll;</span><br><span class="line">    <span class="comment">/* 在 y 轴方向上显示滚动条 */</span></span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    <span class="comment">/* 在 x 轴方向上显示滚动条 */</span></span><br><span class="line">    <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">    <span class="comment">/* （※※※常用）滚动条在有比盒子所能装下更多的内容的时候才显示 */</span></span><br><span class="line">    verflow: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-值和单位"><a href="#CSS-值和单位" class="headerlink" title="CSS 值和单位"></a>CSS 值和单位</h3><h4 id="数字，长度和百分比"><a href="#数字，长度和百分比" class="headerlink" title="数字，长度和百分比"></a>数字，长度和百分比</h4><p><strong>数值</strong>的数据类型：</p><ul><li>&lt;integer&gt;，表示整数，例如 1024, -512 等</li><li>&lt;number&gt;，表示小数，例如0.255、128 或 -1.2。</li><li>&lt;dimension&gt;，表示 &lt;number&gt; 加上附加单位，例如 45deg、5s 或 10px。</li><li>&lt;percentage&gt;，表示一些其他值的一部分，例如 50%。例如，一个元素的长度相对于其父元素的长度。</li></ul><p><strong>绝对</strong>长度单位</p><ul><li>px，像素</li><li>pt， 点</li><li>cm， 厘米</li><li>mm，毫米</li><li>其他 Q，in，pc 等等</li></ul><p><strong>相对</strong>长度单位</p><ul><li>em， 在 font-size 中使用是相对于父元素的字体大小，在其他属性中使用是相对于自身的字体大小，如 width</li><li>rem，根元素的字体大小</li><li>vw，视窗宽度的 1%</li><li>vh，视窗高度的 1%</li><li>其他 ex，ch，lh，vmin，vmax</li></ul><p><strong>百分比</strong></p><p>数值设置为百分比时，例如元素字体大小设置为百分比时，那么它将是父元素字体大小的百分比；如果宽度设置为百分比时，那么它将是父元素宽度的百分比。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.px</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.percent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box px&quot;</span>&gt;</span>I am 200px wide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box percent&quot;</span>&gt;</span>I am 40% wide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box px&quot;</span>&gt;</span>I am 200px wide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box percent&quot;</span>&gt;</span>I am 40% wide<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，有些值只接受长度或百分比，但有一些值只接受长度。</p><p><strong>数字</strong></p><p>纯数字，不添加任何单位。例如透明属性 opacity。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p>颜色值的表示方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="comment">/* 颜色关键词 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="comment">/* 十六进制 RGB 值 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#02798b</span>;</span><br><span class="line">    <span class="comment">/* RGB 值 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">121</span>, <span class="number">139</span>);</span><br><span class="line">    <span class="comment">/* RGBA 值，最后一项数值表示颜色透明度 */</span></span><br><span class="line">    <span class="comment">/* 备注： 在颜色上设置 alpha 通道与使用我们前面看到的opacity属性有一个关键区别。当你使用不透明度时，你让元素和它里面的所有东西都不透明，而使用 RGBA 颜色只让你指定的颜色不透明。 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">2</span>, <span class="number">121</span>, <span class="number">139</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="comment">/* hsl 值，第一个数值表示色调，第二个数值表示饱和度，第三个数值表示亮度 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">188</span>, <span class="number">97%</span>, <span class="number">28%</span>);</span><br><span class="line">    <span class="comment">/* hsla 值，最后一个数值表示透明度 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">188</span>, <span class="number">97%</span>, <span class="number">28%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>使用函数能够在 CSS 中进行简单的计算。例如 rgb()，hsl()，cal() 等都是函数。示例：使用 <code>calc()</code> 使框宽为 20% + 100px。20% 是根据父容器.wrapper 的宽度来计算的，因此如果宽度改变，它也会改变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> + <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>My width is calculated.<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-CSS-中调整大小"><a href="#在-CSS-中调整大小" class="headerlink" title="在 CSS 中调整大小"></a>在 CSS 中调整大小</h3><h4 id="原始尺寸，或固有尺寸"><a href="#原始尺寸，或固有尺寸" class="headerlink" title="原始尺寸，或固有尺寸"></a>原始尺寸，或固有尺寸</h4><p>在受 CSS 设置影响之前，HTML 元素有其原始的尺寸。例如，一副图像的长和宽由图像文件自身确定，这个尺寸就是固有尺寸；一个空的 <code>div </code> 是没有尺寸的，如果给它加上 border 会发现它是一条覆盖整个父元素宽度的直线，因为其内部没有内容，所以高度或者说高度为 0。</p><p>元素的<strong>固有尺寸</strong> — 由其所包含的内容决定。</p><h4 id="设置具体的尺寸"><a href="#设置具体的尺寸" class="headerlink" title="设置具体的尺寸"></a>设置具体的尺寸</h4><p>我们可以使用具体的 width 和 height 属性来设置元素的大小，例如数据数值或百分比。但是这样有可能会产生内容溢出的现象，所以需要慎用。</p><p>如果使用百分数来设置 margin 和 padding 的话，值是以包含块的<strong>内联尺寸</strong>进行计算的，也就是元素的水平宽度。所以，使用百分比作为元素外边距或填充的单位时，将会得到一个相同尺寸的外边距或填充。</p><h4 id="min-和-max-尺寸"><a href="#min-和-max-尺寸" class="headerlink" title="min- 和 max- 尺寸"></a>min- 和 max- 尺寸</h4><p><code>max-width</code> 的常见用法为，在没有足够空间以原有宽度展示图像时，让图像缩小，同时确保它们不会比这一宽度大。如下列示例所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.minibox</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.width</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.max</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;star.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;star&quot;</span> <span class="attr">class</span>=<span class="string">&quot;width&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;star.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;star&quot;</span> <span class="attr">class</span>=<span class="string">&quot;max&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;minibox&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;star.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;star&quot;</span> <span class="attr">class</span>=<span class="string">&quot;width&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4-min-max-%E4%BE%8B%E5%AD%90.jpg" alt="css-大小调整-min-max-例子"></p><p>这个技术是用来让图片<strong>可响应</strong>的，所以在更小的设备上浏览的时候，它们会合适地缩放。</p><h4 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h4><p>视口，即用户在浏览器中看到的部分页面，也是有尺寸的。<code>1vh</code>等于视口高度的 1%，<code>1vw</code>则为视口宽度的 1%。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid darkblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20vh</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图像、媒体和表单元素"><a href="#图像、媒体和表单元素" class="headerlink" title="图像、媒体和表单元素"></a>图像、媒体和表单元素</h3><h4 id="调整图像大小"><a href="#调整图像大小" class="headerlink" title="调整图像大小"></a>调整图像大小</h4><p>除了使用 <code>max-width</code> 属性方法之外，还可以使用 <code>object-fit</code> 属性完成对图像大小的调整，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cover</span> &#123;</span><br><span class="line"><span class="comment">/* 缩小图像，同时维持图像原始比例，这样图像可以充满盒子，但是由于比例保持不变，所以可能会导致图像多余的一部分将会被盒子裁切掉 */</span></span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.contain</span> &#123;</span><br><span class="line">    <span class="comment">/* 图像缩放到足以完整地放到盒子里面的大小，但可能会由于图像和盒子比例不一致，出现“开天窗”的效果 */</span></span><br><span class="line">    <span class="attribute">object-fit</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;balloons&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;balloons&quot;</span> <span class="attr">class</span>=<span class="string">&quot;contain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4-object-fit-%E4%BE%8B%E5%AD%90.jpg" alt="css-大小调整-object-fit-例子"></p><h4 id="form-元素"><a href="#form-元素" class="headerlink" title="form 元素"></a>form 元素</h4><p><strong>继承和表单元素</strong></p><p>在一些浏览器中，表单元素默认不会继承字体样式，因此如果你想要确保你的表单填入区域使用 body 中或者一个父元素中定义的字体，你需要向你的 CSS 中加入这条规则。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span> : inherit;</span><br><span class="line">  <span class="attribute">font-size</span> : <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>form 元素与 box-sizing</strong></p><p>跨浏览器的 form 元素对于不同的挂件使用不同的盒子约束规则。为了保证统一，最好将所有元素的内外边距都设为 <code>0</code>，然后在单独进行样式化控制的时候将这些加回来。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他有用的设置</p><p> <code>&lt;textarea&gt;</code> 上设置 <code>overflow: auto</code> 以避免 IE 在不需要滚动条的时候显示滚动条：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="表单重置"><a href="#表单重置" class="headerlink" title="表单重置"></a>表单重置</h5><p>可以通过使用如下 css 代码或者下载 <a href="http://necolas.github.io/normalize.css/">Normalize.css</a> 来进行表单重置，提供一个统一的工作地基。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line">select,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式化表格"><a href="#样式化表格" class="headerlink" title="样式化表格"></a>样式化表格</h4><p>样式化表格常用的点：</p><ul><li>使您的表格标记尽可能简单，并且保持灵活性，例如使用百分比，这样设计就更有响应性。</li><li>使用 <code>table-layout: fixed</code> 创建更可控的表布局，可以通过在标题 <code>width</code> 中设置 <code>width</code> 来轻松设置列的宽度。</li><li>使用 <code>border-collapse collapse</code> 使表元素边框合并，生成一个更整洁、更易于控制的外观。</li><li>使用 <code>&lt;thead&gt;</code>,  <code>&lt;tbody&gt;</code> 和 <code>&lt;tfoot&gt;</code> 将表格分割成逻辑块，并提供额外的应用 CSS 的地方，因此如果需要的话，可以更容易地将样式层叠在一起。</li><li>使用斑马线来让其他行更容易阅读。</li><li>使用 <code>text-align</code> 直线对齐您的 <code>&lt;th&gt;</code> 和 <code>&lt;td&gt;</code> 文本，使内容更整洁、更易于跟随。</li></ul><p><strong>斑马条纹图案实现</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff33cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e495e4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:nth-child</code> 选择器用于选择特定的子元素，它也可以用一个公式作参数，如 <code>2n-1</code> 等同于 <code>odd</code> 的效果，<code>2n</code> 等同于 <code>even</code> 的效果。</p><h3 id="组织-CSS"><a href="#组织-CSS" class="headerlink" title="组织 CSS"></a>组织 CSS</h3><h4 id="保持-CSS-整洁的技巧"><a href="#保持-CSS-整洁的技巧" class="headerlink" title="保持 CSS 整洁的技巧"></a>保持 CSS 整洁的技巧</h4><ul><li>风格统一（例如命名规范、描述颜色方式统一和使用 Tab 还是空格缩进统一等等）</li><li>CSS 格式化为可读的形式（最好是每个属性值都新起一行）</li><li>为 CSS 加注释</li><li>在样式表中加入逻辑段落</li><li>避免太特定的选择器</li><li>将大样式表分成几个小的样式表</li></ul><h4 id="CSS-方法论"><a href="#CSS-方法论" class="headerlink" title="CSS 方法论"></a>CSS 方法论</h4><p><strong>OOCSS</strong></p><p>OOCSS 是面向对象的 CSS（OOCSS）的概念。OOCSS 的基本理念是将你的 CSS 分解成可复用的对象。</p><p><strong>BEM</strong></p><p>BEM 即为块级元素修饰字符（Block Element Modifier）。BEM 使用的类与 OOCSS 的相似，但是它们遵守了 BEM 严格的命名常规。示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">form</span> class=&quot;<span class="selector-tag">form</span> <span class="selector-tag">form</span><span class="attr">--theme-xmas</span> <span class="selector-tag">form</span><span class="attr">--simple</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span> class=&quot;form__input&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;<span class="selector-tag">input</span></span><br><span class="line">    class=&quot;form__submit form__submit<span class="attr">--disabled</span>&quot;</span><br><span class="line">    type=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/<span class="selector-tag">form</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="CSS-构建体系"><a href="#CSS-构建体系" class="headerlink" title="CSS 构建体系"></a>CSS 构建体系</h4><p>另一种组织 CSS 的方法是利用一些对于前端开发者可用的工具，它们让你可以稍微更程式化地编写 CSS。有很多工具，我们将它们分成<strong>预处理工具</strong>和<strong>后处理工具</strong>。预处理工具以你的原文件为基础运行，将它们转化为样式表；后处理工具使用你已完成的样式表，然后对它做点手脚——也许是优化它以使它加载得更快。</p><p>最为流行的预处理工具是 Sass，Sass 可以定义变量，这些变量在项目中可以重复使用。</p><p>如果你对加入例如许多额外的注释和空格，增大你的样式表大小有所关心的话，那么后处理会通过在生产版本中略去任何不必要的东西的方式，优化 CSS。一个常用的解决方案是 cssnano。</p><h2 id="样式化文本"><a href="#样式化文本" class="headerlink" title="样式化文本"></a>样式化文本</h2><h3 id="基础文本与字体样式化"><a href="#基础文本与字体样式化" class="headerlink" title="基础文本与字体样式化"></a>基础文本与字体样式化</h3><p>用于样式文本的 CSS 属性有两类：</p><ul><li><strong>字体样式</strong>: 作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等。</li><li><strong>文本布局风格</strong>: 作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</li></ul><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>字体颜色和种类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-family</span>: arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网页安全字体，这些字体通常可以应用到所有系统，因此称为<strong>网页安全字体</strong>。</p><table><thead><tr><th align="left">字体名称</th><th align="left">泛型</th><th align="left">注意</th></tr></thead><tbody><tr><td align="left">Arial</td><td align="left">sans-serif</td><td align="left">通常认为最佳做法还是添加 Helvetica 作为 Arial 的首选替代品，尽管它们的字体面几乎相同，但 Helvetica 被认为具有更好的形状，即使 Arial 更广泛地可用。</td></tr><tr><td align="left">Courier New</td><td align="left">monospace</td><td align="left">某些操作系统有一个 Courier New 字体的替代（可能较旧的）版本叫 Courier。使用 Courier New 作为 Courier 的首选替代方案，被认为是最佳做法。</td></tr><tr><td align="left">Georgia</td><td align="left">serif</td><td align="left"></td></tr><tr><td align="left">Times New Roman</td><td align="left">serif</td><td align="left">某些操作系统有一个 Times New Roman 字体的替代（可能较旧的）版本叫 Times。使用 Times 作为 Times New Roman 的首选替代方案，被认为是最佳做法。</td></tr><tr><td align="left">Trebuchet MS</td><td align="left">sans-serif</td><td align="left">您应该小心使用这种字体——它在移动操作系统上并不广泛。</td></tr><tr><td align="left">Verdana</td><td align="left">sans-serif</td><td align="left"></td></tr></tbody></table><p><strong>默认字体</strong>，CSS 常用的五种字体。</p><table><thead><tr><th align="left">名称</th><th align="left">定义</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>serif</code></td><td align="left">有衬线的字体（衬线一词是指字体笔画尾端的小装饰，存在于某些印刷体字体中）</td><td align="left">My big red elephant</td></tr><tr><td align="left"><code>sans-serif</code></td><td align="left">没有衬线的字体。</td><td align="left">My big red elephant</td></tr><tr><td align="left"><code>monospace</code></td><td align="left">每个字符具有相同宽度的字体，通常用于代码列表。</td><td align="left">My big red elephant</td></tr><tr><td align="left"><code>cursive</code></td><td align="left">用于模拟笔迹的字体，具有流动的连接笔画。</td><td align="left">My big red elephant</td></tr><tr><td align="left"><code>fantasy</code></td><td align="left">用来装饰的字体</td><td align="left">My big red elephant</td></tr></tbody></table><p><strong>字体栈</strong>，由多个字体以逗号隔开的 CSS 属性，最后一个字体建议使用通用字体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Trebuchet MS&quot;</span>, Verdana, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字体大小</strong></p><p><code>font-size</code> 大小常用单位：</p><ul><li>px</li><li>em：1em 等于我们设计的当前元素的父元素上设置的字体大小</li><li>rem：1<code>rem</code> 等于 HTML 中的根元素的字体大小（注：rem 不支持 Internet Explorer 8 及更久的浏览器版本）</li></ul><p><strong>字体样式、粗细、文本转换和装饰</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 打开关闭斜体 */</span></span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="comment">/* 设置文字的粗体大小。很少会使用到 normal 和 bold以外的值 */</span></span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="comment">/* 设置要转换字体。 */</span></span><br><span class="line">    <span class="attribute">text-transform</span>: none;</span><br><span class="line">    <span class="comment">/* 设置/取消字体上的文本装饰。 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>文字阴影</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 四个值的含义分别为：阴影与原始文本的水平偏移、阴影与原始文本的垂直偏移、模糊半径和阴影的基础颜色 */</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">5px</span> red;</span><br><span class="line">    <span class="comment">/* 多阴影用法 */</span></span><br><span class="line">    <span class="attribute">text-shadow</span>: -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="number">#aaa</span>,</span><br><span class="line">             <span class="number">0px</span> <span class="number">4px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>),</span><br><span class="line">             <span class="number">4px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>),</span><br><span class="line">             <span class="number">0px</span> <span class="number">0px</span> <span class="number">7px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本布局"><a href="#文本布局" class="headerlink" title="文本布局"></a>文本布局</h4><p><strong>文本对齐</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/* 可选值：left、right、center 和 justify */</span></span><br><span class="line"><span class="attribute">text-align</span>: center; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行高</strong></p><p>行高可以接受大多数单位，也可以接受无单位值，作为乘数。无单位的值乘以 font-size 来获得 line-height。推荐行高大约是 1.5-2 （双倍间距）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字母和单词间距</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">    <span class="comment">/* 字母与字母之间的间距 */</span></span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="comment">/* 单词与单词之间的间距 */</span></span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样式化列表"><a href="#样式化列表" class="headerlink" title="样式化列表"></a>样式化列表</h3><h4 id="列表特定样式"><a href="#列表特定样式" class="headerlink" title="列表特定样式"></a>列表特定样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="comment">/* 符号样式。可选值有：disc（实心圆）、circle（空心圆）和upper-roman（大罗马数字）等。 */</span></span><br><span class="line">    <span class="attribute">list-style-type</span>: upper-roman;</span><br><span class="line">    <span class="comment">/* 使用自定义的项目符号图片 */</span></span><br><span class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">star.svg</span>);</span><br><span class="line">    <span class="comment">/* 设置符号位置。可选值：inside 和 outside。 */</span></span><br><span class="line">    <span class="attribute">list-style-position</span>: inside;    </span><br><span class="line">    <span class="comment">/* 上述三个属性可以按顺序简写为以下语句 */</span></span><br><span class="line">    <span class="attribute">list-style</span>: upper-roman <span class="built_in">url</span>(<span class="string">star.svg</span>) inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样式化链接"><a href="#样式化链接" class="headerlink" title="样式化链接"></a>样式化链接</h3><p>链接样式使用方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链接的默认状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#265301</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 链接被访问过的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#437A16</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 链接被选中的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BAE498</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标光标停留在链接上的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#CDFEAA</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 链接被激活的状态 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#265301</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#CDFEAA</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式化链接为按钮"><a href="#样式化链接为按钮" class="headerlink" title="样式化链接为按钮"></a>样式化链接为按钮</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Music<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Wombats<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Finland<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">19.5%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0.625%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-排版"><a href="#CSS-排版" class="headerlink" title="CSS 排版"></a>CSS 排版</h2><h3 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h3><p>CSS 布局种类：</p><ul><li>正常布局流</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display"><code>display</code></a>属性</li><li>弹性盒子</li><li>网格</li><li>浮动</li><li>定位</li><li>CSS 表格布局</li><li>多列布局</li></ul><p><strong>正常流布局</strong></p><p>正常布局流 (normal flow) 是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。</p><p><strong>display 属性</strong></p><p>该属性主要用于实现页面的布局，改变默认的显示方式，正常流中的所有内容都有一个 display 值，用作元素的默认行为方式。</p><p><strong>弹性盒子</strong></p><p>弹性盒子(Flexbox)，用于创建横向或是纵向的一维页面布局。使用 flexbox 需要在父元素应用 <code>display: flex</code>，所有子元素都将会按照 flex 进行布局。</p><p>设置 <code>display: flex</code> 时，<code>flex-direction</code> 默认值是 <code>row</code>，<code>align-items</code> 默认值是 <code>stretch</code>，所以所有的子元素默认是排成一行，并且所有的子元素被拉伸至和最高元素高度相同。</p><p>除了设置父元素的属性外，还可以设置子元素的 <code>flex</code> 值，改变 flex 项在 flex 布局中占用宽&#x2F;高的方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Grid 布局</strong></p><p>Grid 布局则被设计用于同时在两个维度上把元素按行和列排列整齐。使用方式如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="comment">/* 设置列 */</span></span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="comment">/* 设置行 */</span></span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 设置间隔 */</span></span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box5&quot;</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box6&quot;</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>浮动</strong></p><p>把一个元素“浮动”(float) 起来，会改变该元素本身和在正常布局流（normal flow）中跟随它的其他元素的行为。这一元素会浮动到左侧或右侧，并且从正常布局流 (normal flow) 中移除，这时候其他的周围内容就会在这个被设置浮动 (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float"><code>float</code></a>) 的元素周围环绕。</p><p>float 属性的四个可能值：</p><ul><li><code>left</code> — 将元素浮动到左侧。</li><li><code>right</code> — 将元素浮动到右侧。</li><li><code>none</code> — 默认值，不浮动。</li><li><code>inherit</code> — 继承父元素的浮动属性。</li></ul><p>使用案例如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/css/css-float%E5%B8%83%E5%B1%80.PNG" alt="css-float布局"></p><p><strong>定位技术</strong></p><p>五种主要定位类型：</p><ul><li><strong>静态定位</strong>（Static positioning）是每个元素默认的属性——它表示“将元素放在文档布局流的默认位置——没有什么特殊的地方”。</li><li><strong>相对定位</strong>（Relative positioning）允许我们相对于元素在正常的文档流中的位置移动它——包括将两个元素叠放在页面上。这对于微调和精准设计（design pinpointing）非常有用。</li><li><strong>绝对定位</strong>（Absolute positioning）将元素完全从页面的正常布局流（normal layout flow）中移出，类似将它单独放在一个图层中。我们可以将元素相对于页面的 <code>&lt;html&gt;</code> 元素边缘固定，或者相对于该元素的<em>最近被定位祖先元素</em>（nearest positioned ancestor element）。绝对定位在创建复杂布局效果时非常有用，例如通过标签显示和隐藏的内容面板或者通过按钮控制滑动到屏幕中的信息面板。</li><li><strong>固定定位</strong>（Fixed positioning）与绝对定位非常类似，但是它是将一个元素相对浏览器视口固定，而不是相对另外一个元素。这在创建类似在整个页面滚动过程中总是处于屏幕的某个位置的导航菜单时非常有用。</li><li><strong>粘性定位</strong>（Sticky positioning）是一种新的定位方式，它会让元素先保持和 <code>position: static</code> 一样的定位，当它的相对视口位置（offset from the viewport）达到某一个预设值时，它就会像 <code>position: fixed</code> 一样定位。</li></ul><p><strong>静态定位</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>,<span class="number">232</span>,<span class="number">220</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">79</span>,<span class="number">185</span>,<span class="number">227</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Positioning<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a basic block level element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;positioned&quot;</span>&gt;</span>I am a basic block level element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I am a basic block level element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E9%9D%99%E6%80%81%E5%AE%9A%E4%BD%8D.PNG" alt="css-静态定位"></p><p><strong>相对定位</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.positioned</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">84</span>,<span class="number">104</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">84</span>,<span class="number">104</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D.PNG" alt="css-相对定位"></p><p><strong>绝对定位</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.positioned</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">84</span>,<span class="number">104</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">84</span>,<span class="number">104</span>);</span><br><span class="line">    <span class="comment">/* 此处的距离是相对于页面边界的顶部和左边的距离，即相对于 html 元素的距离 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/css/css-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.PNG" alt="css-绝对定位"></p><p><strong>固定定位</strong></p><p>固定定位 (fixed positioning) 同绝对定位 (absolute positioning) 一样，将元素从文档流 (document flow) 当中移出了。但是，定位的坐标不会应用于”容器”边框来计算元素的位置，而是会应用于视口 (viewport) 边框。通常这一特性用于实现固定位置的菜单栏，不受页面滚动的影响。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.positioned</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粘性定位</strong></p><p>粘性定位 (sticky positioning) ，它将默认的静态定位和固定定位相混合。当一个元素被指定了<code>position: sticky</code>时，它会在正常布局流中滚动，直到它出现在了我们给它设定的相对于容器的位置，这时候它就会停止随滚动移动，就像它被应用了<code>position: fixed</code>一样。</p><h3 id="正常布局流"><a href="#正常布局流" class="headerlink" title="正常布局流"></a>正常布局流</h3><p>默认的，一个块级元素的内容宽度是父元素的 100%，其高度与其内容高度一致。内联元素的 height width 与内容一致。内联元素的 height width 无法设置，除非设置了 <code>display: block</code> 或者 <code>display: inline-block</code>。</p><p>块级元素默认会在上一个元素下面另起一行，然后会被设置好的 margin 分隔。内联元素则不会另起一行，只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素、相邻的文本内容被安排在一行。如果空间不够，溢出的文本或者元素则移到新的一行。</p><h3 id="弹性区块"><a href="#弹性区块" class="headerlink" title="弹性区块"></a>弹性区块</h3><p><strong>模型说明</strong></p><p>当元素表现为 flex 框时，它们沿着两个轴来布局：</p><p><img src="/img/css/flexbox-%E6%A8%A1%E5%9E%8B%E8%AF%B4%E6%98%8E.png" alt="flexbox-模型说明"></p><ul><li><strong>主轴</strong>（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li><li><strong>交叉轴</strong>（cross axis）是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li><li>设置了 <code>display: flex</code> 的父元素（在本例中是 <code>&lt;section&gt;</code>）被称之为 <strong>flex 容器（flex container）。</strong></li><li>在 flex 容器中表现为柔性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）（本例中是 <code>&lt;article&gt;</code> 元素。）</li></ul><p>主轴的方向可以使用 <code>flex-direction</code> 属性改变，正向和反向排列也可以使用 <code>row-reverse</code> 和 <code>column-reverse</code> 改变。</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>当 flex 容器中的元素存在溢出情况时，可以在父元素使用 <code>flex-wrap: wrap</code> ，并在子元素使用 <code>flex: 200px;</code> 来更改布局。这样意味着 flex 容器具有多行弹性盒子，溢出的元素将被移到下一行，每个元素的宽度至少是 200px。</p><h4 id="flex-项的动态尺寸"><a href="#flex-项的动态尺寸" class="headerlink" title="flex 项的动态尺寸"></a>flex 项的动态尺寸</h4><p>可以在子元素使用 <code>flex: 1;</code> 来控制 flex 项占用空间的比例，还可以指定 flex 最小值。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="comment">/* 每个 flex 项将首先给出 200px 的可用空间，然后，剩余的可用空间将根据分配的比例共享 */</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">2</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以在子元素使用 <code>flex: auto;</code> 用控制子元素的尺寸，这样代表每个子元素的尺寸会动态分配直至占满整行区域。</p><h4 id="水平和垂直居中"><a href="#水平和垂直居中" class="headerlink" title="水平和垂直居中"></a>水平和垂直居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 控制 flex 项在交叉轴上的位置, center 表示在交叉轴居中 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">/* 控制 flex 项在主轴上的位置，space-around 表示 flex 项沿着主轴均匀地分布，在任意一端都会留有一点空间。 space-between 与 space-around 非常相似，但是它不会在两端留下任何空间 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Smile<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Laugh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Wink<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Shrug<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Blush<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flex-项顺序"><a href="#flex-项顺序" class="headerlink" title="flex 项顺序"></a>flex 项顺序</h4><p>改变子元素的 <code>order</code> 元素会改变 flex 项的显示顺序，但<strong>不会影响到源顺序</strong>（即 dom 树里元素的顺序）。</p><p>所有 flex 项的默认 order 值为 0；order 值大的 flex 项比 order 值小的在显示顺序中更靠后。</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/post/2eec1551.html"/>
      <url>/post/2eec1551.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML-介绍"><a href="#HTML-介绍" class="headerlink" title="HTML 介绍"></a>HTML 介绍</h2><h3 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a>块级元素和内联元素</h3><ul><li>块级元素：块级元素在页面中以块的形式展现，相对于其前面的内容它会出现在新的一行，其后的内容也被挤到下一行展现。块级元素通常用于展示页面上结构化的内容，例如段落、列表、导航菜单、页脚等等。一个以 block 形式展现的块级元素不会被嵌套进内联元素中，但可以嵌套在其他块级元素中。</li><li>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行，它通常出现在一堆文字之间，例如超链接元素 <code>&lt;a&gt;</code> 或者强调元素<code>&lt;em&gt;</code>和 <code>&lt;strong&gt;</code>。</li></ul><p><code>&lt;div&gt;</code> 与 <code>&lt;span&gt;</code> 都表示通用容器，它们都没有任何语义，但 <code>&lt;div&gt;</code> 是块级元素，<code>&lt;span&gt;</code> 是行内元素。</p><h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>不是所有元素都拥有开始标签，内容，结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入&#x2F;嵌入一些东西。例如：元素 <code>&lt;img&gt;</code> 是用来在元素 <code>&lt;img&gt;</code> 所在位置插入一张指定的图片。</p><h3 id="Metadata-HTML-中的元数据"><a href="#Metadata-HTML-中的元数据" class="headerlink" title="Metadata-HTML 中的元数据"></a>Metadata-HTML 中的元数据</h3><h4 id="元素数据：-lt-meta-gt-元素"><a href="#元素数据：-lt-meta-gt-元素" class="headerlink" title="元素数据：&lt;meta&gt; 元素"></a>元素数据：&lt;meta&gt; 元素</h4><p>元数据就是描述数据的数据，而 HTML 有一个“官方的”方式来为一个文档添加元数据 —— <code>&lt;meta&gt;</code> 元素。</p><p>制定文档字符编码：<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p><p>添加作者和描述：</p><ul><li><code>name</code> 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。</li><li><code>content</code> 指定了实际的元数据内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Chris Mills&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;The MDN Web Docs Learning Area aims to provide</span></span></span><br><span class="line"><span class="string"><span class="tag">complete beginners to the Web with all they need to know to get</span></span></span><br><span class="line"><span class="string"><span class="tag">started with developing web sites and applications.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加自定义网页图标"><a href="#添加自定义网页图标" class="headerlink" title="添加自定义网页图标"></a>添加自定义网页图标</h4><p>页面添加图标的方式：</p><ol><li><p>将其保存在与网站的索引页相同的目录中，以 <code>.ico</code> 格式保存（大多数浏览器将支持更通用的格式，如 <code>.gif</code> 或 <code>.png</code>，但使用 ICO 格式将确保它能在如 Internet Explorer 6 那样古老的浏览器显示）</p></li><li><p>将以下行添加到 HTML 的 <code>&lt;head&gt;</code> 中以引用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="引入-CSS-和-JavaScript"><a href="#引入-CSS-和-JavaScript" class="headerlink" title="引入 CSS 和 JavaScript"></a>引入 CSS 和 JavaScript</h4><p>引入 CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;my-css-file.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 JavaScript：</p><p><code>&lt;script&gt;</code> 元素没必要放在文档的 <code>&lt;head&gt;</code> 中，并包含  <code>src</code> 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 <code>defer</code> 以告诉<strong>浏览器在解析完成 HTML 后再加载 JavaScript</strong>。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容（如果脚本尝试访问某个不存在的元素，浏览器会报错）。实际上还有很多方法可用于处理加载 JavaScript 的问题，但这是现代浏览器中最可靠的一种方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my-js-file.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="设定主语言"><a href="#设定主语言" class="headerlink" title="设定主语言"></a>设定主语言</h4><p>最后，值得一提的是可以（而且有必要）为站点设定语言，这个可以通过添加 lang 属性到 HTML 开始的标签中来实现。这在很多方面都很有用。如果你的 HTML 文档的语言设置好了，那么你的 HTML 文档就会被搜索引擎更有效地索引（例如，允许它在特定于语言的结果中正确显示），对于那些使用屏幕阅读器的视障人士也很有用（例如，法语和英语中都有“six”这个单词，但是发音却完全不同）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字处理基础"><a href="#文字处理基础" class="headerlink" title="文字处理基础"></a>文字处理基础</h3><h4 id="标题和段落"><a href="#标题和段落" class="headerlink" title="标题和段落"></a>标题和段落</h4><p>标签：</p><p><code>&lt;h1&gt;&lt;/h1&gt;</code> … <code>&lt;h2&gt;&lt;/h2&gt;</code> </p><p> <code>&lt;p&gt;&lt;/p&gt;</code></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>有序：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>豆浆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>油条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>豆汁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>焦圈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无序：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>沿着条路走到头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>右转<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>直行穿过第一个十字路口<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>在第三个十字路口处左转<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>继续走 300 米，学校就在你的右手边<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>强调、斜体：<code>&lt;em&gt;</code> 元素</p><p>重点强调、粗体：<code>&lt;strong&gt;</code> 元素</p><p>斜体：<code>&lt;i&gt;</code></p><p>粗体：<code>&lt;b&gt;</code></p><p>下划线：<code>&lt;u&gt;</code></p><h3 id="文档和网站框架"><a href="#文档和网站框架" class="headerlink" title="文档和网站框架"></a>文档和网站框架</h3><p>根据网页布局，一个网页应该包括的基本元素有：页眉、导航栏、主内容、侧边栏和页脚，其语义化的专用标签分别如下所示：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header"><code>&lt;header&gt;</code></a>：页眉。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav"><code>&lt;nav&gt;</code></a>：导航栏。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main"><code>&lt;main&gt;</code></a>：主内容。主内容中还可以有各种子内容区段，可用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article"><code>&lt;article&gt;</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section"><code>section</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div"><code>&lt;div&gt;</code></a> 等元素表示。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside"><code>&lt;aside&gt;</code></a>：侧边栏，经常嵌套在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main"><code>&lt;main&gt;</code></a> 中。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer"><code>&lt;footer&gt;</code></a>：页脚。</li></ul><p>具体例子如下所示：</p><p><img src="/img/html/sample-website.png" alt="一个简单站点首页截图"></p><h3 id="HTML-调试"><a href="#HTML-调试" class="headerlink" title="HTML 调试"></a>HTML 调试</h3><p>写错代码通常有两种类型：</p><ul><li>语法错误：由于拼写错误导致程序无法运行。</li><li>逻辑错误：不存在语法错误，但代码无法按预期运行。通常逻辑错误比语法错误更难修复，因为无法得到指向错误源头的信息。</li></ul><h4 id="HTML-验证"><a href="#HTML-验证" class="headerlink" title="HTML 验证"></a>HTML 验证</h4><p>如果遇到庞大、复杂的 HTML 文件，想查找错误，可以使用 <a href="https://validator.w3.org/">Markup Validation Service</a> 网站。</p><h2 id="多媒体与嵌入"><a href="#多媒体与嵌入" class="headerlink" title="多媒体与嵌入"></a>多媒体与嵌入</h2><h3 id="HTML-中的图片"><a href="#HTML-中的图片" class="headerlink" title="HTML 中的图片"></a>HTML 中的图片</h3><p>我们可以用 <code>&lt;img&gt;</code> 元素来把图片放到网页上。它是一个空元素（它不需要包含文本内容或闭合标签），最少只需要一个 <code>src</code> （一般读作其全称 <em>source</em>）来使其生效。<code>src</code> 属性包含了指向我们想要引入的图片的路径，可以是相对路径或绝对 URL) 元素的 <code>href</code> 属性一样。</p><ul><li>src 最好使用相对路径，不要使用绝对路径，类似 <code>&lt;img src=&quot;https://www.example.com/images/dinosaur.jpg&quot;&gt;</code> 这样的使用方法，会使浏览器做更多的工作，例如重新通过 DNS 再去寻找 IP 地址。通常我们都会把图片和 HTML 放在同一个服务器上。</li><li>像<code>&lt;img&gt;</code>和 <code>&lt;video&gt;</code> 这样的元素有时被称之为<strong>替换元素</strong>，因为这样的元素的内容和尺寸由外部资源（像是一个图片或视频文件）所定义，而不是元素自身。</li><li>使用 <code>alt</code> 属性可以增加图片描述信息，使用 <code>title</code> 属性可以增加鼠标悬停显示标题内容信息</li><li>CSS 背景图也可以把图片嵌入网站中，但是这样插入图片是没有语义上的意义的，它不能被有任何备选文本，也不能被屏幕阅读器识别。所以如果图像对内容有意义则使用 HTML 图像。</li></ul><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>基本用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Glossary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Glossary&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>allowfullscreen</code> 表示可全屏模式</p><p><code>frameborder</code> 表示边框</p><h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>使用 <code>srcset</code> 和 x 语法结合：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浏览器会根据显示设备分辨率来加载最适合的图像，标准/低分辨率设备会显示 elva-fairy-320w.jpg 图片，高分辨率，两个或者更多的设备像素表示一个 CSS 像素，则 elva-fairy-640w.jpg 图片会被加载。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-480w.jpg 1.5x,</span></span></span><br><span class="line"><span class="string"><span class="tag">             elva-fairy-640w.jpg 2x&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;elva-fairy-640w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>&lt;picture&gt;</code> 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">media 表示媒体条件，如果设备满足此条件则显示 srcset 对应路径图片</span></span><br><span class="line"><span class="comment">&lt;img&gt; 元素为必备元素，不然不会有图片显示。当媒体条件都不为真时，&lt;img&gt; 元素会提供图片；当浏览器不支持&lt;picture&gt; 元素时，它可以作为后备方案。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(max-width: 799px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-480w-close-portrait.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 800px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-800w.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;elva-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Chris standing up holding his daughter Elva&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不使用-css-和-JavaScript-的原因"><a href="#不使用-css-和-JavaScript-的原因" class="headerlink" title="不使用 css 和 JavaScript 的原因"></a>不使用 css 和 JavaScript 的原因</h4><p>当浏览器开始加载一个页面，它会在主解析器开始加载和解析页面的 CSS 和 JavaScript 之前先下载 (预加载) 任意的图片。这是一个非常有用的技巧，平均下来减少了页面加载时间的 20%。但是，这对响应式图片一点帮助都没有，所以需要类似 <code>srcset</code> 的实现方法。因为你不能先加载好 <code>&lt;img&gt;</code> 元素后，再用 JavaScript 检测可视窗口的宽度，如果觉得大小不合适，再动态地加载小的图片替换已经加载好的图片，这样的话，原始的图像已经被加载了，然后你又加载了小的图像，这样的做法对于响应式图像的理念来说，是很糟糕的。</p><h2 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h2><p>最好不要使用表格布局，而是使用 CSS 布局，主要理由如下：</p><ul><li><strong>表格布局减少了视觉受损的用户的无障碍</strong></li><li><strong>表格会产生很多标签</strong></li><li><strong>表格不能自动响应</strong></li></ul><p>表格的基本元素：根元素 <code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code> (table row) 和 <code>&lt;td&gt;</code> (table data)，表格的基本用法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Mr.Liang&#x27;s timetable<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#97DB9A;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;width: 42px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #97DB9A;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#DCC48E; border:4px solid #C1437A;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;width: 42px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;width: 42px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Mon<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Tues<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Wed<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Thurs<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Fri<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Sat<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Sun<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1st period<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>English<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>German<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dutch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>2nd period<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>English<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>English<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>German<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dutch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>3rd period<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>German<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>German<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dutch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>4th period<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>English<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>English<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Dutch<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>colspan</code> 和 <code>rowspan</code> 属性可以改变单元格所占的行数、列数；使用 <code>&lt;colgroup&gt;</code> 容器可以整体改变表格每列单元格的样式；使用 <code>&lt;caption&gt;</code> 可以为表格添加标题。</p><p>表格通常包括 <code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt; </code>和 <code>&lt;tbody&gt;</code> 三部分。<code>&lt;thead&gt;</code> 需要嵌套在 table 元素中，放置在头部的位置；<code>&lt;tfoot&gt;</code> 需要嵌套在 table 元素中，放置在底部 (页脚) 的位置，浏览器总会把它呈现在表格的底部；<code>&lt;tbody&gt;</code> 需要嵌套在 table 元素中，放置在 <code>&lt;thead&gt;</code>的下面或者是 <code>&lt;tfoot&gt;</code> 的下面，<code>&lt;tbody&gt;</code> 是隐式的，不管有没有添加该标签，都会在表格中呈现出来。</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/post/58add7e9.html"/>
      <url>/post/58add7e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当一个请求 url 的<strong>协议</strong>、<strong>域名</strong>和<strong>端口</strong>三者之间<strong>任意一个</strong>与当前页面 url 不同即为<strong>跨域</strong>。</p><p>出现跨域问题的<strong>原因</strong>：出于浏览器的同源策略限制。同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能会收到影响。可以说 Web 是构建在同源策略基础之上的，浏览器知识针对同源策略的一种实现。同源会阻止一个域的 JavaScript 脚本和另一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol）、主机（host）和端口号（port）。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="跨域资源共享（CROS）"><a href="#跨域资源共享（CROS）" class="headerlink" title="跨域资源共享（CROS）"></a>跨域资源共享（CROS）</h4><p>普通跨域请求：在服务端的响应头设置 Access-Control-Allow-origin 即可，前端无需配置，若要带 Cookie 请求：前后端都需要设置。</p><p>CROS，Cross-origin resource sharing。</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>jsonp 的原理是利用 <code>&lt;script&gt;</code> 标签没有跨域限制，通过 <code>&lt;script&gt;</code> 标签 <code>&lt;src&gt;</code> 属性，发送带有 <code>callback</code> 参数的 <code>GET</code> 请求，服务端将接口返回数据拼凑到 <code>callback</code> 函数中，返回给浏览器执行，从而前端拿到 callback 函数返回的数据。</p><p>原生 js 的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">    script.<span class="property">src</span> = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调执行函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleCallback</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>服务器会返回如下结果，这时将会执行全局函数 handleCallback。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleCallback</span>(&#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>jQuery Ajax 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&quot;handleCallback&quot;</span>,  <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Vue axios 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span> = axios;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">jsonp</span>(<span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;handleCallback&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Node.js 实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> params = querystring.<span class="title function_">parse</span>(req.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> fn = params.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp返回设置</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">write</span>(fn + <span class="string">&#x27;(&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params) + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>JSONP 缺点是只能发送 get 请求。</p><h4 id="vue-cli-代理跨域"><a href="#vue-cli-代理跨域" class="headerlink" title="vue cli 代理跨域"></a>vue cli 代理跨域</h4><p><strong>方法一</strong>：</p><p>在 vue.config.js 中添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （<strong>优先匹配前端资源</strong>）</li></ol><p><strong>方法二</strong>：</p><p>编写 vue.config.js 配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">// 用于控制请求头中的 host 值</span></span><br><span class="line">                <span class="comment">// ws: true, // 用于支持 websocket</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="comment">// 重写请求路径，将发送到目标服务器的路径去除开头请求路径</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// ws: true, </span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><p>配置完成后，可以按以下方式请求接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        axios</span><br><span class="line">        <span class="comment">// 添加本地前缀路径</span></span><br><span class="line">            .<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8080/api1/students&quot;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功，结果为：&quot;</span>, response.<span class="property">data</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败，&quot;</span>, error.<span class="property">data</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        axios</span><br><span class="line"><span class="comment">// 不添加本地前缀路径</span></span><br><span class="line">            .<span class="title function_">get</span>(<span class="string">&quot;api2/cars&quot;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功，结果为：&quot;</span>, response.<span class="property">data</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败，&quot;</span>, error.<span class="property">data</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="nginx-代理跨域"><a href="#nginx-代理跨域" class="headerlink" title="nginx 代理跨域"></a>nginx 代理跨域</h4><h4 id="NodeJS-中间件代理跨域"><a href="#NodeJS-中间件代理跨域" class="headerlink" title="NodeJS 中间件代理跨域"></a>NodeJS 中间件代理跨域</h4><h4 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h4><h4 id="location-hash-iframe跨域"><a href="#location-hash-iframe跨域" class="headerlink" title="location.hash + iframe跨域"></a>location.hash + iframe跨域</h4><h4 id="window-name-iframe跨域"><a href="#window-name-iframe跨域" class="headerlink" title="window.name + iframe跨域"></a>window.name + iframe跨域</h4><h4 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h4><h4 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h4>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> CROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101. 对称二叉树</title>
      <link href="/post/2293ac9d.html"/>
      <url>/post/2293ac9d.html</url>
      
        <content type="html"><![CDATA[<h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 1000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两个思路，分别是<strong>递归</strong>和<strong>迭代</strong>，但他们的思想类似，都是根据镜像的特点来对二叉树的节点进行遍历对比。互为镜像的两个节点应该满足两个条件： 1.他们的两个根节点具有相同的值；2.每个树的右子树和左子树镜像对称。两种解题思路具体如下：</p><ul><li>递归：使用 <code>p</code>、<code>q</code> 两个指针，分别往相反方向递归，即如果 <code>p</code> 指针指向左子节点，则 <code>q</code> 指针指向右子节点，将他们进行比较，判断是否为镜像节点。最开始传入两个相同的根节点。此方法时间复杂度为 O(n)，空间复杂度为 O(n)。</li><li>迭代：使用队列来模拟递归过程。将两个相同的根节点加入队列，然后进行遍历。在遍历过程中，首先出队两个节点，判断是否相同，如果不同，则返回 <code>false</code>，如果相同则将按次序将 <code>node1</code> 节的左子节点，<code>node2</code> 的右子节点，<code>node1</code> 的右子节点，<code>node2</code> 的左子节点入队。如此循环直到队列为空。此方法时间复杂度为 O(n)，空间复杂度为 O(n)。</li></ul><p>递归：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">p, q</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(!p || !q)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">val</span> === q.<span class="property">val</span> &amp;&amp; <span class="title function_">traversal</span>(p.<span class="property">left</span>, q.<span class="property">right</span>) &amp;&amp; <span class="title function_">traversal</span>(p.<span class="property">right</span>, q.<span class="property">left</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">traversal</span>(root, root);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>迭代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> queue = [root, root];</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> node1 = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">const</span> node2 = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">if</span>(!node1 &amp;&amp; !node2)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!node1 || !node2 || node1.<span class="property">val</span> != node2.<span class="property">val</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        queue.<span class="title function_">push</span>(node1.<span class="property">left</span>);</span><br><span class="line">        queue.<span class="title function_">push</span>(node2.<span class="property">right</span>);</span><br><span class="line">        queue.<span class="title function_">push</span>(node1.<span class="property">right</span>);</span><br><span class="line">        queue.<span class="title function_">push</span>(node2.<span class="property">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62. 不同路径</title>
      <link href="/post/40675670.html"/>
      <url>/post/40675670.html</url>
      
        <content type="html"><![CDATA[<h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向下</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 7, n = 3</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 100</code></li><li>题目数据保证答案小于等于 <code>2 * 109</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题首先想到了 dfs 的解法，虽然可以得出正确答案，但是不出意外超时了。经过 aBadString 同学提醒，此题需要使用 dp 才恍然大悟。</p><p>dp 的思路：在矩阵中，每一个格只会是从左边或者上边进入，所以每一格的路径总数等于左边格路径数 + 上边格路径数，其中第一行和第一列的路径数都为 1，因为它们只能从左边或者上边进入，所以只需要计算其他格子路径数即可， 又因为在 dp 过程中 dp[i] 只和 dp[i-1]、dp[i] 相关，所以空间复杂度可以优化为 min(m, n)，故此方法时间复杂度为 O(m * n)，空间复杂度为 O(min(m, n))。</p><p>除此之外，该题还有组合数学的方法，使用组合公式可以直接计算出答案，时间复杂度为 O(min(m, n))，空间复杂度为 O(1)。如果编程语言有 API 则时间复杂度为 O(1)。</p><p>dp：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="keyword">function</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; m; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;    </span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i];            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm和yarn</title>
      <link href="/post/ae8504b.html"/>
      <url>/post/ae8504b.html</url>
      
        <content type="html"><![CDATA[<h1 id="npm-和-yarn"><a href="#npm-和-yarn" class="headerlink" title="npm 和 yarn"></a>npm 和 yarn</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm，Node Package Manager，即 node 包管理器，它是 Node.js 默认的以 JavaScript 编写的软件包管理系统，npm 用于分享和使用代码已经成为前端的标配。</p><h3 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h3><p>node 自带 npm 模块，安装 node 即可使用 npm 工具。</p><p>安装完成后，通过 <code>npm install xxx</code> 即可安装和使用 npm 包，如果速度太慢，可以使用命令来修改镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/ --global</span><br></pre></td></tr></table></figure><p>使用以下命令可切换回默认源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npmjs.org --global</span><br></pre></td></tr></table></figure><p>或者使用 nrm 工具切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换淘宝源</span></span><br><span class="line">npx nrm use tabao</span><br><span class="line"><span class="comment"># 切换默认源</span></span><br><span class="line">npx nrm use npm</span><br></pre></td></tr></table></figure><h3 id="npm-的基本使用"><a href="#npm-的基本使用" class="headerlink" title="npm 的基本使用"></a>npm 的基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm -v <span class="comment"># 查看版本号</span></span><br><span class="line"></span><br><span class="line">npm install &lt;Module Name&gt;<span class="comment"># 使用 npm 命令安装模块</span></span><br><span class="line"></span><br><span class="line">npm install &lt;Module Name&gt; -g<span class="comment"># 全局安装模块，可以直接在命令行使用</span></span><br><span class="line"></span><br><span class="line">npm list -g<span class="comment"># 查看所有全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm list vue<span class="comment"># 查看某个模块的版本号</span></span><br><span class="line"></span><br><span class="line">npm -g install npm@5.9.1<span class="comment"># 全局安装指定版本的模块</span></span><br><span class="line"></span><br><span class="line">npm install -save moduleName<span class="comment"># -save 在 package 文件的 dependencies 节点写入依赖</span></span><br><span class="line"></span><br><span class="line">npm install -save-dev moduleName<span class="comment"># -save-dev 在 package 文件的 devDependencies 节点写入依赖</span></span><br><span class="line"><span class="comment"># dependencies：运行时的依赖，发布后，即生产环境下还需要使用的模块</span></span><br><span class="line"><span class="comment"># devDependencies：开发时的依赖，里面的模块是开发的时候用的，发布的时候用不到，例如项目的 gulp、压缩 css 和 js 等文件的模块。这些模块在部署后都是不需要的。</span></span><br></pre></td></tr></table></figure><h3 id="package-json-文件属性详解"><a href="#package-json-文件属性详解" class="headerlink" title="package.json 文件属性详解"></a>package.json 文件属性详解</h3><p>package.json 文件属性说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">name - 包名</span><br><span class="line">version - 包的版本号</span><br><span class="line">description - 包的描述</span><br><span class="line">main - main 字段指定程序的主入口文件，require(&#x27;moduleName&#x27;) 就会加载这个文件。这个字段的默认值是模块根目录下的 index.js。</span><br><span class="line">scripts - 运行命令。</span><br><span class="line">keywords - 关键字</span><br><span class="line">author - 包的作者姓名</span><br><span class="line">homepage - 包的官网 url</span><br><span class="line">contributors - 包的其他贡献者姓名</span><br><span class="line">dependencies - 运行依赖包列表。如果依赖包没有安装，npm 会自动把依赖包安装在 node_module 目录下。</span><br><span class="line">devDependencies - 开发依赖包列表。同运行依赖包列表，区别是开发依赖包不会在部署环境中保留。</span><br><span class="line">repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 GitHub 上。</span><br><span class="line"></span><br><span class="line">package.json 文件中 version 版本号的说明，安装的时候代表不同的含义：</span><br><span class="line"><span class="string">&quot;5.0.3&quot;</span> 表示安装指定的 <span class="number">5.0</span><span class="number">.3</span> 版本</span><br><span class="line"><span class="string">&quot;~5.0.3&quot;</span> 表示安装 <span class="number">5.0</span>.x 中最新的版本</span><br><span class="line"><span class="string">&quot;^5.0.3&quot;</span> 表示安装 <span class="number">5.</span>x.x 中最新的版本</span><br></pre></td></tr></table></figure><p>package.json 文件示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm-learn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jquery&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="npm-安装的包使用"><a href="#npm-安装的包使用" class="headerlink" title="npm 安装的包使用"></a>npm 安装的包使用</h3><p>通过命令行使用 npm 下载和更新包</p><p>在没有 webpack 之前使用包需要搜寻整个 node_modules 目录来定位每个包的路径，再通过外部引入标签手动添加到 HTML 文件中，这种操作太过于繁琐。</p><p>大多数编程语言都会提供一个导入另一个文件代码的机制，然而 JavaScript 最初设计时并没有这个特性，因为 JavaScript 原本是为了在浏览器端运行而设计的，并没有权限获取计算机客户端的文件系统（出于安全考虑）。所以很长一段时间以来，组织多个文件的 JavaScript 代码就是把每个文件下载下来，变量是全局共享的。</p><p>CommonJS 中很大的一部分便是对模块系统的规范，它主要用于服务端，使用 module.export 语句导出包，使用 require 语句导入包。在 ES6 新标准中，使用  ES6 模块可以完全取代 CommonJS，详情请见 ES6 新特性。</p><p>古老的包引入方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CommonJS 引入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="npm-安装包解决-ES6-语法兼容"><a href="#npm-安装包解决-ES6-语法兼容" class="headerlink" title="npm 安装包解决 ES6 语法兼容"></a>npm 安装包解决 ES6 语法兼容</h3><p>通过 cdn 引入方式使用 babel 示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Babel 语法转换测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.baomitu.com/babel-core/5.8.38/browser.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> t = <span class="string">&#x27;ES6 转 ES5 语法成功&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 ie9+ 浏览器中运行以上文件可以得到正常的输出结果，说明转码成功。</p><p>使用 npm 方式安装使用 babel：</p><p>向项目下使用命令行安装 babel 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p> 在项目目录下创建 .babelrc 文件，添加以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span> <span class="string">&quot;stage-2&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">// 设置转码规则</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;transform-runtime&quot;</span><span class="punctuation">]</span><span class="comment">// 设置插件</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>因为需要转换为 es2015，所以仍然需要安装其他库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core babel-preset-es2015 babel-plugin-transform-runtime babel-preset-stage-2 -save-dev</span><br></pre></td></tr></table></figure><p>在项目文件夹创建 src 和 lib 文件夹，在 src 文件夹创建 es6 语法的 js 文件，然后在 package.json 文件 scripts 项中添加以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel src -w -d lib&quot;</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>此命令的作用是编译整个 src 目录并将其输出到 lib 目录。这里的 src 指的是需要转换的目录，lib 指的是输出内容的存放目录，-w 实际上为 -watch，就是监听文件，实时编译输出的意思。</p><p>执行命令后，src 目录下的 ES6 语法 js 文件就会被转换为 lib 目录下的 ES5 语法文件，使用 Ctrl + C 终止运行。</p><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p>Yarn 是由 Facebook、Google、 Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。因为 NPM5 以下会出现下面的问题：</p><ul><li>npm install 的时候很慢。特别是新的项目拉下来要等半天，删除 node modules，重新 install 的时候依目如此。</li><li>同一个项目，多人开发时，由于安装的版本不一致出现 bug。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>yarn 的安装和使用和 npm 相差不大，可以使用以下方式安装 yarn：</p><ul><li><p>下载 node.js，使用 npm 安装，运行 <code>npm install -g yarn</code> 命令，查看版本：<code>yarn --version</code></p></li><li><p>安装node.js，下载 yarn 的安装程序：提供一个msi文件，在运行时将引导您在 Windows 上安装 Yarn</p></li><li><p>Yarn 淘宝源安装，运行以下命令即可更换淘宝源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config <span class="built_in">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br></pre></td></tr></table></figure></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>基本使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yarn init// 初始化项目 同npm init，执行输入信息后，会生成package.json文件</span><br><span class="line">yarn install// 安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</span><br><span class="line">yarn install --flat// 安装一个包的单一版本</span><br><span class="line">yarn install --force// 强制重新下载所有包</span><br><span class="line">yarn install --production// 只安装dependencies里的包</span><br><span class="line">yarn install --no-lockfile//不读取或生成yarn.lock</span><br><span class="line">yarn install --pure-lockfile//不生成yarn.lock</span><br><span class="line">yarn add [package]// 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</span><br><span class="line">yarn add [package]@[version]//安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</span><br><span class="line"></span><br><span class="line">yarn add [package]@[tag]//安装某个 tag(比如beta,next或者latest)</span><br><span class="line">yarn add --dev/-D//加到 devDependencies</span><br><span class="line">yarn add --peer/-P//加到 peerDependencies</span><br><span class="line">yarn add --optional/-O//加到 optionalDependencies</span><br></pre></td></tr></table></figure><h3 id="yarn-的优势"><a href="#yarn-的优势" class="headerlink" title="yarn 的优势"></a>yarn 的优势</h3><p>相较于 npm，yarn 有以下优点：</p><ul><li>速度快</li><li>安装版本统一</li><li>更简洁的输出</li><li>多注册来源处理</li><li>更好的语义化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>695. 岛屿的最大面积</title>
      <link href="/post/8ea40170.html"/>
      <url>/post/8ea40170.html</url>
      
        <content type="html"><![CDATA[<h2 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695. 岛屿的最大面积"></a>695. 岛屿的最大面积</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个大小为 <code>m x n</code> 的二进制矩阵 <code>grid</code> 。</p><p><strong>岛屿</strong> 是由一些相邻的 <code>1</code> (代表土地) 构成的组合，这里的「相邻」要求两个 <code>1</code> 必须在 <strong>水平或者竖直的四个方向上</strong> 相邻。你可以假设 <code>grid</code> 的四个边缘都被 <code>0</code>（代表水）包围着。</p><p>岛屿的面积是岛上值为 <code>1</code> 的单元格的数目。</p><p>计算并返回 <code>grid</code> 中最大的岛屿面积。如果没有岛屿，则返回面积为 <code>0</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class="line">输出：6</span><br><span class="line">解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0,0,0,0,0,0,0,0]]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题是经典岛屿相关问题，同样是两个思路，分别是深度优先遍历和广度优先遍历，直接套模板即可。</p><ul><li>深度优先遍历：从头开始遍历，遇到值为 1 的元素则调用 DFS 方法进行遍历，在 DFS 中除了改变点的值外还需要统计并返回岛屿面积，遍历完成后得到岛屿面积，将其与 res 比较取较大值赋给 res。该方法的时间复杂度为 O(M * N)，空间复杂度为 O(M * N)。</li><li>广度优先遍历：与深度优先遍历类似，在遍历过程中计算岛屿面积即可，每一轮广度优先遍历完得到一个岛屿的面积。该方法的时间复杂度为 O(M * N)，空间复杂度为 O(M * N)。</li></ul><p>深度优先遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxAreaOfIsland = <span class="keyword">function</span>(<span class="params">grid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = grid.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = grid[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">grid, i, j</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; m - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; n - <span class="number">1</span> || grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 不是岛屿点，返回 0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 返回当前统计岛屿面积数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="title function_">dfs</span>(grid, i + <span class="number">1</span>, j) + <span class="title function_">dfs</span>(grid, i - <span class="number">1</span>, j) + <span class="title function_">dfs</span>(grid, i, j + <span class="number">1</span>) + <span class="title function_">dfs</span>(grid, i, j - <span class="number">1</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res, <span class="title function_">dfs</span>(grid, i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>广度优先遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxAreaOfIsland = <span class="keyword">function</span>(<span class="params">grid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = grid.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = grid[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> queue = [[i, j]];</span><br><span class="line">                <span class="keyword">let</span> cur = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 出队并使用解构赋值获取横竖坐标</span></span><br><span class="line">                    <span class="keyword">const</span> [x, y] = queue.<span class="title function_">shift</span>();</span><br><span class="line">                    grid[x][y] = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">// 统计当前岛屿面积</span></span><br><span class="line">                    cur++;</span><br><span class="line">                    <span class="comment">// 如果临接点是岛屿点则入队</span></span><br><span class="line">                    <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x - <span class="number">1</span>][y] != <span class="number">0</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x - <span class="number">1</span>, y]);</span><br><span class="line">                        grid[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(x + <span class="number">1</span> &lt; m &amp;&amp; grid[x + <span class="number">1</span>][y] != <span class="number">0</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x + <span class="number">1</span>, y]);</span><br><span class="line">                        grid[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y - <span class="number">1</span>] != <span class="number">0</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x, y - <span class="number">1</span>]);</span><br><span class="line">                        grid[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(y + <span class="number">1</span> &lt; n &amp;&amp; grid[x][y + <span class="number">1</span>] != <span class="number">0</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x, y + <span class="number">1</span>]);</span><br><span class="line">                        grid[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res = <span class="title class_">Math</span>.<span class="title function_">max</span>(res, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>200. 岛屿数量</title>
      <link href="/post/953ac065.html"/>
      <url>/post/953ac065.html</url>
      
        <content type="html"><![CDATA[<h2 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a>200. 岛屿数量</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p>**<br>示例 1：**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>grid[i][j]</code> 的值为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有三个思路，分别是深度优先搜索、广度优先搜索和并查集。</p><ul><li>深度优先搜索：从头扫描矩阵，遇到值为 ‘1’ 的节点则进行深度优先搜索，把未被遍历节点标记为已遍历，并把岛屿数 + 1，扫描完矩阵即可得到答案。该方法时间复杂度为 O(M*N)，空间复杂度为 O(M*N)。</li><li>广度优先搜索：思路同深度优先搜索，只是把深度优先搜索更换为广度优先搜索。该方法时间复杂度为 O(M*N)，空间复杂度为 O(min(M*N))。</li><li>并查集：使用并查集代替搜索，在扫描矩阵时，如果一个位置为 1，则将其与相邻的四个方向上的 1 在并查集上合并。最终岛屿的数量就是并查集中的连通分量数目。该方法时间复杂度为 O(M*N)，空间复杂度为 O(M*N)。</li></ul><p>深度优先搜索：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="keyword">function</span>(<span class="params">grid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = grid.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = grid[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">grid, i, j, m, n</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt; m - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; n - <span class="number">1</span> || grid[i][j] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="title function_">dfs</span>(grid, i + <span class="number">1</span>, j, m, n);</span><br><span class="line">        <span class="title function_">dfs</span>(grid, i, j + <span class="number">1</span>, m, n);</span><br><span class="line">        <span class="title function_">dfs</span>(grid, i - <span class="number">1</span>, j, m, n);</span><br><span class="line">        <span class="title function_">dfs</span>(grid, i, j - <span class="number">1</span>, m, n);       </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_">dfs</span>(grid, i, j, m, n);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>广度优先搜索：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[][]</span>&#125; <span class="variable">grid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="keyword">function</span>(<span class="params">grid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> m = grid.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = grid[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">const</span> queue = [[i, j]];</span><br><span class="line">                grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">const</span> [x, y] = queue.<span class="title function_">shift</span>();</span><br><span class="line">                    <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x - <span class="number">1</span>][y] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x - <span class="number">1</span>, y]);</span><br><span class="line">                        grid[x - <span class="number">1</span>][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x, y - <span class="number">1</span>]);</span><br><span class="line">                        grid[x][y - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(x + <span class="number">1</span> &lt;= m - <span class="number">1</span> &amp;&amp; grid[x + <span class="number">1</span>][y] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x + <span class="number">1</span>, y]);</span><br><span class="line">                        grid[x + <span class="number">1</span>][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(y + <span class="number">1</span> &lt;= n - <span class="number">1</span> &amp;&amp; grid[x][y + <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                        queue.<span class="title function_">push</span>([x, y + <span class="number">1</span>]);</span><br><span class="line">                        grid[x][y + <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/post/a1ede006.html"/>
      <url>/post/a1ede006.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="HTTP-协议概念"><a href="#HTTP-协议概念" class="headerlink" title="HTTP 协议概念"></a>HTTP 协议概念</h3><p>HTTP 是数据传输协议（超文本传输协议），用于沟通客户端和服务器。HTTP 使用的是可靠的数据传输协议。</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>Web 服务器是 Web 资源的宿主。Web 资源是 Web 内容的源头。</p><h4 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h4><p>媒体类型就是一种数据类型标记，用来告诉接收端，接收到的数据是什么类型，让接收端知道如何处理该文件。常见的标记方式是 MIME，MIME 描述了文件的主要类型以及特定子类型，例如：”Content-Type”: “text&#x2F;html”，其中 text 描述的文件的主要类型是文本，而其特定类型是 html 文档。</p><h4 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h4><p>服务器资源名被称为统一资源标识符（Uniform Resource Identifier，URI）。URI 就像因特网上的邮政地址一样，在世界范围内唯一确定标识并定位信息资源。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符（URL）是资源标识符最常见的形式。URL 描述了一台服务器上某资源的特定位置。现在几乎所有的 URI 都是 URL。</p><h4 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h4><p>统一资源名（URN）是 URI 的另一种形式。URN 是作为特定内容的唯一名称使用的，与目前的资源所在地无关。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务就是“一次 HTTP 连接（不包括 TCP&#x2F;IP 连接，只包括一次 HTTP 报文发送与接收）”的整个过程，由请求命令和响应结果组成，中间数据格式是 HTTP 报文。在日常使用网站的过程中，会产生很多事务，例如：请求网页文档、请求某个 logo 图片以及请求某个视频等。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>方法就是客户端向服务器发起的请求命令。常见的方法有 GET、POST、DELETE、PUT、HEAD 等。</p><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>状态码是一个三位数字的代码，告知客户端请求是否成功，或者是否需要采取其他动作。</p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>报文是 HTTP 协议的一种纯文本数据格式，分为请求报文和响应报文，两种报文都具有类似的结构，分别由三个部分构成：起始行、首部、主体，起始行描述报文做了什么，首部描述报文传输的具体细节，主体描述传输的实际内容。</p><h3 id="HTTP-请求过程"><a href="#HTTP-请求过程" class="headerlink" title="HTTP 请求过程"></a>HTTP 请求过程</h3><p>浏览器通过 HTTP 显示位于远端服务器中某个简单 HTML 资源的过程：</p><ol><li>浏览器从 URL 中解析出服务器的主机名；</li><li>浏览器将服务器的主机名转换成服务器的 IP 地址（可能经过去 DNS 服务器查询）；</li><li>浏览器将端口号（如果有的话）从 URL 中解析出来；</li><li>浏览器建立一条与 Web 服务器的 TCP 连接；</li><li>浏览器向服务器发送一条 HTTP 请求报文；</li><li>服务器向浏览器发送一条 HTTP 响应报文；</li><li>关闭连接，浏览器显示文档。</li></ol><h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><p>常见的 HTTP 协议版本如下：</p><ul><li>HTTP&#x2F;0.9，有严重的设计缺陷，只用于与老客户端的交互。</li><li>HTTP&#x2F;1.0，第一个得到广泛使用的版本。</li><li>HTTP&#x2F;1.0+，非官方的 HTTP&#x2F;1.0 的扩展版本。</li><li>HTTP&#x2F;1.1，当前使用的版本，它修复了相关设计缺陷，增加相关特性。</li><li>HTTP&#x2F;2.0，下一代 HTTP 协议版本，目前只用于 https:&#x2F;&#x2F; 网址。</li></ul><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><p>能在服务器端有操作的是非安全方法，例如：POST、PUT、DELETE；不在服务器端有操作的就是安全方法，例如：GET、HEAD，当然安全方法并非不能在服务端有操作，这可以由 Web 开发者决定。</p><p>HTTP 协议的请求方法详细如下：</p><ul><li>GET：用于请求服务器发送某个资源</li><li>POST：用于向服务器端发送数据</li><li>DELETE：用于向服务器删除某个指定的资源</li><li>PUT：用于向服务器端修改、插入数据</li><li>HEAD：与 GET 方法类似，区别是不返回主体</li><li>TRACK：用于向服务器端告知其支持什么功能</li><li>OPTIONS：用于请求服务器告知其支持什么功能</li></ul><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>五大类 HTTP 状态码：</p><ul><li>100 - 199 信息性状态码</li><li>200 - 299 成功状态码（常见 200 表示请求成功）</li><li>300 - 399 重定向状态码（常见 302 重定向）</li><li>400 - 499 客户端错误状态码（常见 404，请求资源不存在）</li><li>500 - 599 服务端错误状态码</li></ul><table><thead><tr><th align="left">状态码</th><th align="left">原因短语</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">说明收到了请求的初始部分，请客户端继续，发送了这个状态码之后，服务器在收到请求之后必须进行响应。</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">说明服务器正在根据客户端的指定，将协议切换成 Update 首部所列的协议</td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求没问题，实体的主体部分包含了所请求的资源</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">用于创建服务器对象的请求（比如，PUT）。响应的实体主体部分中应该包含各种引用了已创建的资源的 URL，Location 首部包含的则是最具体的引用。</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">请求已被接受，但服务器还未对其执行任何动作。不能保证服务器会完成这个请求；这只是意味着接受请求时，它看起来是有效的。服务器应该在实体的主体部分包含对请求状态的描述，或许还应该有对请求完成时间的估计（或者包含一个指针，指向可以获取此信息的位置）</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">实体首部包含的信息不是来自原远端服务器，而是来自于资源的一份副本。如果中间节点上有一份资源副本，但无法或者没有对它所发送的与资源有关的元信息进行验证，就会出现这种情况</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">响应报文中包含若干首部和一个状态行，但没有实体的主体部分。主要用于在浏览器不转为显示新文档的情况下，对其进行更新（比如刷新一个表单页面）</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">另一个主要用于浏览器的代码。负责告知浏览器清除当前页面中的所有 HTML 表单元素</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">成功执行了一个部分或 Range（范围）请求。稍后我们会看到，客户端可以通过一些特殊的首部来获取部分或某个范围内的文档——这个状态码就说明范围请求成功了。</td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">客户端请求一个实际指向多个资源的URL时会返回这个状态码，比如服务器上有某个HTML文档的英语和法语版本。返回这个代码时会带有一个选项列表；这样用户就可以选择它希望使用的那一项了。有多个版本可用时，客户端需要沟通解决。</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">在请求的URL已被移除时使用。响应的Location首部中应该包含资源现在所处的URL</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">与301状态码类似，但是，客户端应该使用Location首部给出的URL来临时定位资源。将来的请求仍应该使用老的URL</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">告知客户端应该用另一个URL来获取资源。新的URL位于响应报文的 Location 首部。其主要母的是允许POST请求的响应将客户端定向到某个资源上去</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">客户端可以通过所包含的请求首部，使其请求变成有条件的。如果客户端发起、了一个条件GET请求，而最近资源未被修改的话，就可以用这个状态码来说明资源未被修改。带有这个状态码的响应不应该包含实体的主体部分。</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">用来说明必须通过一个代理访问资源；代理的位置由 Location 首部给出。很重要的一点是，客户端是相对某个特定资源来解析这条响应的，不能假定所有请求。甚至所有对持有请求资源的服务器的请求都通过这个代理进行。如果客户端错误地让代理介入了某条请求，可能会引发破坏性的行为，而且会造成安全漏洞。</td></tr><tr><td align="left">307</td><td align="left">Temporary Redireat</td><td align="left">与 301 状态码类似；但客户端应该使用 Location 首部给出的 URL 来临时定位资源。将来的请求应该使用老的 URL</td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">用于告知客户端发起了一个错误的请求</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">返回适当的首部，用于获取客户端访问资源的权限</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器拒绝请求，可在响应主体中告知原因</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">用于告知客户端请求的资源在服务器不存在</td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器错误</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">请求超出了服务器能处理的范围</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为代理或网关使用的服务器从请求响应链的下一条链路上收到了一条伪响应（比如，它无法连接到其父网关）时，使用此状态码</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">用来说明服务器现在无法为请求提供服务，但将来可以。如果服务器知道什么时候资源会变为可用的，可以在响应中包含包含一个 Retry-After 首部。</td></tr></tbody></table><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie  是一种功能强大且高效的持久身份识别技术。它是当前识别用户，实现持久会话的最好方式。</p><p>Cookie 分为会话 Cookie（非持久 Cookie）和 持久 Cookie。</p><p>用户第一次请求服务器时，服务器返回一个带 Set-Cookie（Set-Cookie1）首部的报文，值为键值对，描述了 Cookie 的名字、值、域、路径等信息，然后客户端接下来每次访问服务器的时候都会带上一个 Cookie 首部的报文，它的值刚好是前面响应报文返回的名字键值对，从而达到验证用户身份的信息。</p><p>Cookie 的属性：</p><ul><li>domain : Cookie 的域</li><li>allh : 那些主机可以使用此 Cookie</li><li>path ：那些路径能使用 Cookie</li><li>secure : 是否在发送 HTTPS 报文的时候使用 Cookie</li><li>expires ： 过期时间</li><li>name ： Cookie 的名字</li><li>value : Cookie 的值</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session 是另一种记录客户状态的机制，它表示会话。一般来说，用户打开浏览器，在浏览器上进行一些操作，然后将浏览器关闭，表示一次会话结束。从本质上描述：从 Session 对象的创建，到最终 Session 对象超时之后销毁，这个才是真正意义的一次完整会话。</p><p>Cookie 与 Session 是紧密相关的：</p><ul><li>Cookie 可以将会话状态保存在客户端，Session 可以将会话状态保存在服务端。</li><li>Session 的使用要求用户浏览器必须支持 Cookie，如果浏览器不支持使用 Cookie，或者设置为禁用 Cookie，那么将无法使用 Session。</li></ul><h2 id="HTTPS-协议"><a href="#HTTPS-协议" class="headerlink" title="HTTPS 协议"></a>HTTPS 协议</h2><h3 id="HTTPS-协议概念"><a href="#HTTPS-协议概念" class="headerlink" title="HTTPS 协议概念"></a>HTTPS 协议概念</h3><p>HTTPS 是一种通过计算机网络进行安全通信的传输协议，经由 HTTP 进行通信，利用 SSL&#x2F;TLS 建立全信道，加密数据包。HTTPS 使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。</p><p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密。</p><p>HTTP + 加密 + 认证 + 完整性保护 &#x3D; HTTPS</p><p>安全套接字层 超文本传输协议 HTTPS：为了数据传输的安全，<strong>在HTTP的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密</strong>。</p><p>HTTPS  的作用：1、建立一个安全的信息通道；2、确认网站的真实性。</p><h3 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a>HTTP 与 HTTPS 的区别</h3><ol><li>HTTPS 需要申请 CA 证书。</li><li>HTTP 是明文传输数据的；HTTPS 则是具有安全性的 SSL 加密传输协议。</li><li>HTTP 默认端口号 80；HTTPS 默认端口号 443。</li><li>HTTP 连接比较简单，是无状态的；HTTPS 可以加密传输和进行身份认证。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 SSL 握手需要的 9 个包，所以一共是 12 个包。</li></ol><h3 id="SSL-握手"><a href="#SSL-握手" class="headerlink" title="SSL 握手"></a>SSL 握手</h3><p>在发送已加密的 HTTP 报文之前，客户端和服务器需要进行一次 SSL 握手，SSL 握手过程中确定以下细节：</p><ul><li>交换协议版本号；</li><li>选择一个两端都了解的密码；</li><li>对两端的身份进行认证；</li><li>生成临时的会话密钥，以便加密信道。</li></ul><p>SSL 握手步骤：</p><ol><li>客户端发送可供选择的密码并请求证书；</li><li>服务器发送选中的密码和证书；</li><li>客户端发送保密信息，客户端和服务端生成密钥；</li><li>客户端和服务端相互告知，开始加密过程。</li></ol><h3 id="HTTPS-连接流程"><a href="#HTTPS-连接流程" class="headerlink" title="HTTPS 连接流程"></a>HTTPS 连接流程</h3><ul><li>TCP 三次握手；</li><li>客户端向服务器发送自己支持的加密算法，并请求服务器的数字证书；</li><li>服务器进行算法协商。将协商好的加密算法和公钥，以及自己的数字证书发给客户端；</li><li>客户端验证服务器数字证书。生成会话使用的对称密钥。然后使用服务器的公钥将会话密钥加密发给服务器。</li><li>服务器使用私钥解码会话密钥；</li><li>SSL 安全加密隧道协商完成，之后的通讯就可以使用对称的会话密钥进行了。</li></ul><p>网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。</p><p><strong>客户端验证证书：</strong> 客户端在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。</p><p><strong>算法协商：</strong></p><ol><li>浏览器把自己支持的密钥算法套件发给服务器</li><li>服务器接受到后，与自己支持的套件做对比。如果找到双方都支持的，则告知浏览器；如果没有，则浏览器会报错。</li><li>浏览器和服务器使用匹配的密钥算法套件进行通讯。</li></ol><p>HTTPS 协议部分参考：aBadString <a href="https://note.abadstring.cloud/#/04_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/02_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C?id=_523-https">博客笔记</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>141. 环形链表</title>
      <link href="/post/ac40edf7.html"/>
      <url>/post/ac40edf7.html</url>
      
        <content type="html"><![CDATA[<h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 104]</code></li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两种解法，一种是用 <strong>Set</strong> 数据结构存储遍历节点，如果存在环，则在遍历过程中必定能在 Set 中找到产生环的节点；另一种是使用<strong>快慢指针</strong>，慢指针每次移动一格，快指针每次移动两格，如果链表有环，则两个指针必定会相遇，如果没有则说明没有环。需要注意循环遍历终止的条件，当<strong>快指针为空或者快指针的 next 为空</strong>时跳出循环，说明无环。</p><p>Set 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nodeSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nodeSet.<span class="title function_">has</span>(head.<span class="property">next</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        nodeSet.<span class="title function_">add</span>(head);</span><br><span class="line">        head = head.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>快慢指针：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span>)&#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span>(slow == fast)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 链表 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54. 螺旋矩阵</title>
      <link href="/post/e2205fc0.html"/>
      <url>/post/e2205fc0.html</url>
      
        <content type="html"><![CDATA[<h2 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a>54. 螺旋矩阵</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10</code></li><li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可以考虑一层一层地往内部遍历，使用上下左右边界控制遍历的范围，注意边界细节的处理，以及遍历结束条件的设置。每次遍历分为四个部分：第一部分是从左到右遍历，起点为左边界，终点为右边界；第二部分是从上到下遍历，起点为上边界 + 1，终点为下边界；第三部分是从右到左遍历，起点为右边界 + 1，终点为左边界；第四部分是从下到上遍历，起点为下边界 + 1，终点为上边界 - 1。不断循环知道不满足 <code>left &lt;= right &amp;&amp; top &lt;= bottom</code> 条件为止。具体做法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">matrix</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="keyword">function</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用上下左右边界控制遍历范围</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = matrix[<span class="number">0</span>].<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> bottom = matrix.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> res = [];  </span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right &amp;&amp; top &lt;= bottom)&#123;</span><br><span class="line">        <span class="comment">// 从左往右遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">            res.<span class="title function_">push</span>(matrix[top][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从上到下遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = top + <span class="number">1</span>; i &lt;= bottom; i++) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(matrix[i][right]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; right &amp;&amp; top &lt; bottom)&#123;</span><br><span class="line">            <span class="comment">// 从右到左遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = right - <span class="number">1</span>; i &gt;= left; i--)&#123;</span><br><span class="line">                res.<span class="title function_">push</span>(matrix[bottom][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从下到上遍历，注意此处下标的控制，i &gt; top</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = bottom - <span class="number">1</span>; i &gt; top; i--)&#123;</span><br><span class="line">                res.<span class="title function_">push</span>(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [top, right, bottom, left] = [top + <span class="number">1</span>, right - <span class="number">1</span>, bottom - <span class="number">1</span>, left + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 矩阵 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理</title>
      <link href="/post/e28d3347.html"/>
      <url>/post/e28d3347.html</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>用户界面</li><li>浏览器引擎<ul><li>数据持久层</li></ul></li><li>渲染引擎（浏览器内核）<ul><li>网络</li><li>js 解析器</li></ul></li></ul><p>各种浏览器内核</p><ul><li>Blink（基于 webkit 改造） —— Chrome &#x2F; Opera &#x2F; Edge</li><li>Webkit —— Safari</li><li>Gecko —— Firefox</li><li>Trident —— IE</li></ul><p>浏览器是操作系统上的一个应用程序，运行程序至少需要一个进程，进程又能调度使用线程。</p><p>进程：操作系统进行资源分配和调度的基本单元，可以申请和拥有计算机资源，进程是程序的基本执行实体。进程之间的通信需要通过进程间通信管道（IPC）来完成。</p><p>线程：操作系统能够进行运算调度的最小单位，一个进程中可以并发多个线程，每条线程并行执行不同的任务。同一进程的不同线程之间可以直接通信。</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><strong>浏览器进程</strong>：控制除标签页外的用户界面，包括地址，书签，后退，前进按钮等，以及负责与浏览器其他进程的协调工作。</p><p><strong>GPU 进程</strong>：负责接收整个浏览器界面的渲染。</p><p><strong>网络进程</strong>：负责接收网络请求。</p><p><strong>插件进程</strong>：负责控制整个网站使用的所有插件，如 flash 等。</p><p><strong>渲染器进程</strong>：负责控制显示 tab 标签内的所有内容，将 html、css、JavaScript、image 等资源渲染成用户可交互的 web 页面。</p><p><strong>缓存进程</strong>：负责网页资源的缓存。</p><p>Chrome 的四种进程模式：</p><ul><li><strong>Process-per-site-instance (default)</strong> - 同一个 site-instance 使用一个进程</li><li><strong>Process-per-site</strong> - 同一个 site 使用一个进程</li><li><strong>Process-per-tab</strong> - 每个 tab 使用一个进程</li><li><strong>Single process</strong> - 所有 tab 共用一个进程</li></ul><h3 id="渲染网页流程"><a href="#渲染网页流程" class="headerlink" title="渲染网页流程"></a>渲染网页流程</h3><h4 id="HTML-渲染过程"><a href="#HTML-渲染过程" class="headerlink" title="HTML 渲染过程"></a>HTML 渲染过程</h4><ol><li>浏览器进程通过网络线程请求网页数据，请求完成后通知 UI 线程；</li><li>UI 线程创建一个渲染进程，浏览器进程通过 IPC 将数据传递到渲染进程；</li><li>渲染进程通过主线程将 html 进行解析，构造 <strong>DOM 树</strong>。注：在构造 DOM 树的过程中遇到 script 标签时会停止解析，转而去加载解析并且执行 js，所以 script 标签一定要放在合适的位置（一般为 body 的尾部），或者使用 async 、defer 属性来异步加载和执行 js；</li><li>DOM 树构造后主线程进行<strong>样式计算</strong>。不管有没有添加额外的 css 样式都会进行这一步骤，因为浏览器中也会有默认的样式；</li><li>主线程根据 DOM 树和计算好的样式生成 <strong>layoutTree；</strong></li><li>主线程遍历 layoutTree 创建<strong>绘制记录表（Paint Record）</strong>，记录绘制顺序；</li><li>主线程将 layoutTree 和 Paint Record 等信息传递给合成器线程；</li><li>合成器线程将每个图层<strong>栅格化</strong>，图层被切分为多个图块，发送到多个栅格线程中；</li><li>栅格线程将图块栅格化，并存储至 GPU 内存中，栅格化完成后生成 <strong>Draw Quads</strong>，返回给合成器线程；</li><li>合成器线程根据这些 Draw Quads 生成<strong>合成器帧</strong>，通过 IPC 发送给浏览器进程；</li><li>浏览器进程将合成器帧发送到 GPU 进程；</li><li>GPU 进程进行渲染，显示网页。过程中如果页面发送了变化，合成器线程会重新生成合成器帧发送到浏览器进程，再发送到 GPU 线程进行重新渲染。</li></ol><h4 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h4><p><strong>重排</strong>：当改变 dom 的属性时，会重新样式计算，会重新布局和绘制</p><p><strong>重绘</strong>：当改变颜色时，只会发生样式计算和绘制</p><p>重排和重绘都会占用渲染进程的主线程，js 也会占用主线程，如果 js 占用过多线程，重排和重绘被阻塞，就会产生掉帧卡帧的现象。使用 <strong>requestAnimationFrame()</strong> 方法可以将主线程的任务分散到每一帧的间隔，在每一帧执行前暂停 js 执行归还主线程，从而不影响布局和绘制。React Fiber 就使用这个 API 进行了很多优化。另一个优化的方式是，通过不占用主线程的<strong>栅格化流程</strong>，例如 css 中的 <strong>Transform</strong> 属性实现的动画不需要经过布局绘制和样式计算等步骤，能节省大量运算时间。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> HTML渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/post/7787fb56.html"/>
      <url>/post/7787fb56.html</url>
      
        <content type="html"><![CDATA[<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>经典题，有两种解法：迭代和递归。</p><ul><li>迭代：使用两个指针 p 和 q 分别记录当前逆置链表的头节点和剩余链表头节点，在循环中首先将头节点赋给 q，头节点指向下一个节点，然后 q 节点的 next 指向 p，再将 p 指向q，如此循环直到头节点为空。</li><li>递归：递归体的终止条件为当前节点为空或者当前节点的 next 为空，判断后先传入 head.next 递归调用函数返回新的头节点，然后再将当前节点的下一个节点的 next 指向当前节点，再把当前节点的 next 指向 null，最后返回新的头节点。</li></ul><p>迭代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> q;</span><br><span class="line">    <span class="keyword">while</span>(head)&#123;</span><br><span class="line">        q = head;</span><br><span class="line">        head = head.<span class="property">next</span>;</span><br><span class="line">        q.<span class="property">next</span> = p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递归：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newHead = <span class="title function_">reverseList</span>(head.<span class="property">next</span>);</span><br><span class="line">    head.<span class="property">next</span>.<span class="property">next</span> = head;</span><br><span class="line">    head.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 链表 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 链表反转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102. 二叉树的层序遍历</title>
      <link href="/post/ddbff69.html"/>
      <url>/post/ddbff69.html</url>
      
        <content type="html"><![CDATA[<h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 2000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>经典题，此题主要考点在于如何确定每个节点所在的层数。此处的方法是使用<strong>队列中的当前长度</strong>来控制节点所在层。遍历有两层循环，最外层获取当前队列长度，次长度即为当前层的所有节点数，第二层循环以队列当前长度为范围，进行出队，入队和添加结果操作。队列为空返回最终结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">const</span> queue = [root];</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// len 为当前层的节点数，以此作为分层依据</span></span><br><span class="line">        <span class="keyword">const</span> len = queue.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">const</span> curLayer = [];</span><br><span class="line">        <span class="comment">// 将当前层所有节点出队，并将其孩子节点入队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">            curLayer.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">left</span>)</span><br><span class="line">                queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.<span class="property">right</span>)</span><br><span class="line">                queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(curLayer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 层次遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>121. 买卖股票的最佳时机</title>
      <link href="/post/b6eb7294.html"/>
      <url>/post/b6eb7294.html</url>
      
        <content type="html"><![CDATA[<h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 105</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可能会首先想到暴力破解，但是面对数据量过大的情况会超时。所以，需要采用其他办法处理。这里有两个思路，第一个思路是从前往后遍历，维护一个当前最小值，用当前价格减去当前最小值，如果大于 max 则赋值给 max，遍历完即可得出最终结果；第二个思路是从后往前遍历，维护一个当前最大值，用当前最大值减去当前价格，如果大于 max 则赋值给 max。两种思路做法类似。</p><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; prices.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        res = prices[i] - min &gt; res ? prices[i] - min : res;</span><br><span class="line">        min = prices[i] &lt; min ? prices[i] : min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> max = prices[prices.<span class="property">length</span> - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = prices.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        res = max - prices[i] &gt; res ? max - prices[i] : res;</span><br><span class="line">        max = prices[i] &gt; max ? prices[i] : max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>两种做法的时间复杂度都是 O(n)，空间复杂度是 O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和</title>
      <link href="/post/e192590d.html"/>
      <url>/post/e192590d.html</url>
      
        <content type="html"><![CDATA[<h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题不能使用暴力解法，因为最坏的情况可以为数组元素都是 0，数组长度很长并且结果需要去重的话，会超出时间限制。该题目的思路是用排序 + 双指针。具体如下：</p><ol><li>首先对数组进行排序</li><li>固定一个数 <code>nums[i]</code>，再使用左右指针指向 <code>nums[i]</code> 后面两端，分别为 <code>nums[left]</code> 和 <code>nums[right]</code>，计算三个数的和 <code>sum </code> 判断是否满足为 0， 满足则添加进结果集。</li><li>如果 <code>nums[i] </code> 大于 0，则三数之和必然无法等于 0，结束循环</li><li>如果 <code>nums[i] == nums[i-1] </code>，则说明该数字重复，会导致结果重复，所以应该跳过</li><li>如果 <code>sum == 0   </code> 时，<code>nums[left] == nums[left] </code> 会导致结果重复，所以应该 <code>left++</code>；同理 <code>nums[right] == nums[right] </code> 会导致结果重复，所以应该 <code>right++</code>。</li><li>如果 <code>sum &gt; 0   </code> 时，<code>right++</code></li><li>如果 <code>sum &lt; 0   </code> 时，<code>left++</code></li></ol><p>此方法时间复杂度：O(n^2^)</p><p>JavaScript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @return &#123;number[][]&#125;</span><br><span class="line"> */</span><br><span class="line">var threeSum = function(nums) &#123;</span><br><span class="line">    if(nums == null || nums.length &lt; 3) return [];</span><br><span class="line">    const res = [];</span><br><span class="line">    nums.sort((a, b) =&gt; a - b);</span><br><span class="line">    for(let i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">        if(nums[i] &gt; 0)</span><br><span class="line">            break;</span><br><span class="line">        if(i &gt; 0 &amp;&amp; nums[i] == nums[i-1])</span><br><span class="line">            continue;</span><br><span class="line">        let left = i + 1;</span><br><span class="line">        let right = nums.length - 1;</span><br><span class="line">        while(left &lt; right)&#123;</span><br><span class="line">            const sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">            if(sum == 0)&#123;</span><br><span class="line">                res.push([nums[i], nums[left], nums[right]]);</span><br><span class="line">                while(left &lt; right &amp;&amp; nums[left] == nums[left+1])</span><br><span class="line">                    left++;</span><br><span class="line">                while(left &lt; right &amp;&amp; nums[right] == nums[right+1])</span><br><span class="line">                    right--;</span><br><span class="line">                left++;</span><br><span class="line">                right--;                </span><br><span class="line">            &#125;</span><br><span class="line">            else if(sum &lt; 0)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;                </span><br><span class="line">            else if(sum &gt; 0)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>912. 排序数组</title>
      <link href="/post/9413e0e7.html"/>
      <url>/post/9413e0e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="912-排序数组"><a href="#912-排序数组" class="headerlink" title="912. 排序数组"></a>912. 排序数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,2,3,1]</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,1,1,2,0,0]</span><br><span class="line">输出：[0,0,1,1,2,5]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li><li><code>-5 * 104 &lt;= nums[i] &lt;= 5 * 104</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>没什么好讲的，懂的都懂。今天做了一道需要用快排思想的题，所以想复习一下手撕快排，以用作今后的模板解法。其余排序算法等以后再作补充。</p><p>手撕快排：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">quickSort</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 随机生成排序主元</span></span><br><span class="line">        <span class="keyword">let</span> random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(right - left + <span class="number">1</span>)) + left;</span><br><span class="line">        <span class="comment">// 将主元移至数组最后处</span></span><br><span class="line">        [nums[right], nums[random]] = [nums[random], nums[right]];</span><br><span class="line">        <span class="comment">// 对数组进行划分，同时获取主元下标</span></span><br><span class="line">        <span class="keyword">let</span> pivotIndex = <span class="title function_">partition</span>(nums, left, right);</span><br><span class="line">        <span class="comment">// 继续以主元为分界进行划分</span></span><br><span class="line">        <span class="title function_">quickSort</span>(left, pivotIndex - <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">quickSort</span>(pivotIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">partition</span> = (<span class="params">nums, left, right</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 存储主元进行比较</span></span><br><span class="line">        <span class="keyword">let</span> pivot = nums[right];</span><br><span class="line">        <span class="keyword">let</span> pivotIndex = left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = left; i &lt; right; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; pivot)&#123;</span><br><span class="line">                <span class="comment">// 比主元小则进行交换，并把主元下标向右移</span></span><br><span class="line">                [nums[i], nums[pivotIndex]] = [nums[pivotIndex], nums[i]];</span><br><span class="line">                pivotIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动主元至最终位置</span></span><br><span class="line">        [nums[right], nums[pivotIndex]] = [nums[pivotIndex], nums[right]];</span><br><span class="line">        <span class="keyword">return</span> pivotIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quickSort</span>(<span class="number">0</span>, nums.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = nums[right];</span><br><span class="line">        <span class="type">int</span> pivotIndex = left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = left; i &lt; right; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; pivot)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[pivotIndex]);</span><br><span class="line">                pivotIndex++;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[right], nums[pivotIndex]);</span><br><span class="line">        <span class="keyword">return</span> pivotIndex;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = <span class="built_in">rand</span>() % (right - left + <span class="number">1</span>) + left; <span class="comment">// 随机选择主元下标</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">swap</span>(nums[right], nums[mid]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pivotIndex = <span class="built_in">partition</span>(nums, left, right);</span><br><span class="line">        <span class="built_in">quickSort</span>(nums, left, pivotIndex<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">quickSort</span>(nums, pivotIndex+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">quickSort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n * log n)</p><p>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 排序 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 快排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>215. 数组中的第K个最大元素</title>
      <link href="/post/18edd0aa.html"/>
      <url>/post/18edd0aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a>215. 数组中的第K个最大元素</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code>**k**</code> 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p><p>你必须设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4], k = 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6], k = 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有三个思路：</p><ul><li>堆排序：使用大根堆，不断调整数组，直到选出第 K 大的值。时间复杂度 O(n + k * log n) &#x3D; O(n * log n)，空间复杂度 O(log n)。</li><li>快速选择：使用快速排序的思想，对数组不断地进行划分，不需要进行整体排序，即可求出第 K 大的值。时间复杂度为 O(n)，空间复杂度为 O(log n)。</li><li>投机取巧：通过分析题目所给定值域范围，使用 Map 存储数组元素和其数量，以最大值作为下标，从元素最大值往值域最小值遍历，对存在的元素从大到小进行计数，直到找出第 K 大的值。时间复杂度为 O(n + t)，空间复杂度为 O(n)，t 为值域大小。</li></ul><p>堆排序解法（堆排序模板，建议熟读背诵）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 整个流程就是上浮下沉</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="comment">// 自下而上构建一颗大顶堆</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">buildMaxHeap</span> = (<span class="params">nums, heapSize</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(heapSize / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, i, heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从左向右，自上而下的调整节点</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">maxHeapify</span> = (<span class="params">nums, i, heapSize</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> l = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> r = i * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> largest = i;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; heapSize &amp;&amp; nums[l] &gt; nums[largest]) &#123;</span><br><span class="line">            largest = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; heapSize &amp;&amp; nums[r] &gt; nums[largest]) &#123;</span><br><span class="line">            largest = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (largest !== i) &#123;</span><br><span class="line">            [nums[i], nums[largest]] = [nums[largest], nums[i]]; <span class="comment">// 进行节点交换调整</span></span><br><span class="line">            <span class="comment">// 继续调整下面的非叶子节点</span></span><br><span class="line">            <span class="title function_">maxHeapify</span>(nums, largest, heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> heapSize = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="title function_">buildMaxHeap</span>(nums, heapSize); <span class="comment">// 构建好了一个大顶堆</span></span><br><span class="line">    <span class="comment">// 进行下沉 大顶堆是最大元素下沉到末尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.<span class="property">length</span> - <span class="number">1</span>; i &gt;= nums.<span class="property">length</span> - k + <span class="number">1</span>; i--) &#123;</span><br><span class="line">        [nums[<span class="number">0</span>], nums[i]] = [nums[i], nums[<span class="number">0</span>]];</span><br><span class="line">        --heapSize; <span class="comment">// 下沉后的元素不参与到大顶堆的调整</span></span><br><span class="line">        <span class="comment">// 重新调整大顶堆</span></span><br><span class="line">        <span class="title function_">maxHeapify</span>(nums, <span class="number">0</span>, heapSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>快速选择（快速排序模板）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">partition</span> = (<span class="params">nums, left, right</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = nums[right];             <span class="comment">//最右边的元素为基准</span></span><br><span class="line">        <span class="keyword">let</span> pivotIndex = left;               <span class="comment">//pivotIndex初始化为left</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; right; i++) &#123; <span class="comment">//遍历left到right-1的元素</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; pivot) &#123;             <span class="comment">//如果当前元素比基准元素小 </span></span><br><span class="line">                [nums[i], nums[pivotIndex]] = [nums[pivotIndex], nums[i]];  <span class="comment">//把它交换到pivotIndex的位置</span></span><br><span class="line">                pivotIndex++;                    <span class="comment">//pivotIndex往前移动一步</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [nums[right], nums[pivotIndex]] = [nums[pivotIndex], nums[right]];  <span class="comment">//最后交换pivotIndex和right</span></span><br><span class="line">        <span class="keyword">return</span> pivotIndex;                   <span class="comment">//返回pivotIndex</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">quick</span> = (<span class="params">l, r</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;<span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">let</span> random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (r - l + <span class="number">1</span>)) + l; <span class="comment">//随机选取一个索引</span></span><br><span class="line">        [nums[random], nums[r]] = [nums[r], nums[random]];  <span class="comment">//将它和位置r的元素交换，让nums[r]作为基准元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对基准元素进行partition</span></span><br><span class="line">        <span class="keyword">let</span> pivotIndex = <span class="title function_">partition</span>(nums, l, r);</span><br><span class="line">        <span class="comment">//进行partition之后，基准元素左边的元素都小于它 右边的元素都大于它</span></span><br><span class="line">        <span class="comment">//如果partition之后，这个基准元素的位置pivotIndex正好是n-k 则找大了第k大的数</span></span><br><span class="line">        <span class="comment">//如果n-k&lt;pivotIndex,则在pivotIndex的左边递归查找</span></span><br><span class="line">        <span class="comment">//如果n-k&gt;pivotIndex，则在pivotIndex的右边递归查找</span></span><br><span class="line">        <span class="keyword">if</span> (n - k &lt; pivotIndex) &#123;</span><br><span class="line">            <span class="title function_">quick</span>(l, pivotIndex - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">quick</span>(pivotIndex + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quick</span>(<span class="number">0</span>, n - <span class="number">1</span>);<span class="comment">//函数开始传入的left=0，right= n - 1</span></span><br><span class="line">    <span class="keyword">return</span> nums[n - k]; <span class="comment">//最后找到了正确的位置 也就是n-k等于pivotIndex 这个位置的元素就是第k大的数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>投机取巧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findKthLargest = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrMap = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arrMap[nums[i]])&#123;</span><br><span class="line">            arrMap[nums[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            arrMap[nums[i]]++;</span><br><span class="line">        &#125;      </span><br><span class="line">        max = nums[i] &gt; max ? nums[i] : max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = max; i &gt;= -<span class="number">10000</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arrMap[i])&#123;</span><br><span class="line">            <span class="keyword">while</span>(arrMap[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                arrMap[i]--;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(k == count)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 分治 </tag>
            
            <tag> 快速选择 </tag>
            
            <tag> 快排 </tag>
            
            <tag> 大根堆 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46. 全排列</title>
      <link href="/post/5cb3fe61.html"/>
      <url>/post/5cb3fe61.html</url>
      
        <content type="html"><![CDATA[<h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题应该使用回溯法，递归过程中维护一个遍历路径栈，存储遍历过的元素，当满足长度等于原数组长度时，添加至结果中，除此之外，还需要维护一个访问数组，存储元素是否已被访问的信息。</p><p>回溯的具体流程：</p><ol><li>先判断当前路径长度是否等于 n，如果等于，则添加到结果中，并返回结束当前执行</li><li>从头开始遍历数组元素，如果第 i 个元素已被遍历，则 continue，如果没有被遍历，则将其添加至路径栈中，并标记已访问，然后再传入当前路径栈和访问数组进行递归，递归后出栈，并标记未访问</li></ol><p>此解法的时间复杂度为 O(n)，空间复杂度为 O(n*n)。</p><p>JavaScript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = [], path = [];</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">backTracking</span> = (<span class="params">nums, n, used</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">length</span> === n)&#123;</span><br><span class="line">            <span class="comment">// 解构赋值将路径栈深拷贝为一个新数组并添加至 res 中，如果不是深拷贝而直接 push(path) 的话会出现 res 中元素被修改的情况。</span></span><br><span class="line">            res.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">backTracking</span>(nums, n, used);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">backTracking</span>(nums, nums.<span class="property">length</span>, []);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p>C++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res,vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span>&amp; n, vector&lt;<span class="type">bool</span>&gt;&amp; used)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>() == n)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">backTracking</span>(res, path, nums, n, used);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">used</span><span class="params">(nums.size(), <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">backTracking</span>(res, path, nums, n, used);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>129. 求根节点到叶节点数字之和</title>
      <link href="/post/6adee9d2.html"/>
      <url>/post/6adee9d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="129-求根节点到叶节点数字之和"><a href="#129-求根节点到叶节点数字之和" class="headerlink" title="129. 求根节点到叶节点数字之和"></a>129. 求根节点到叶节点数字之和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一个二叉树的根节点 <code>root</code> ，树中每个节点都存放有一个 <code>0</code> 到 <code>9</code> 之间的数字。</p><p>每条从根节点到叶节点的路径都代表一个数字：</p><ul><li>例如，从根节点到叶节点的路径 <code>1 -&gt; 2 -&gt; 3</code> 表示数字 <code>123</code> 。</li></ul><p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> 。</p><p><strong>叶节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3]</span><br><span class="line">输出：25</span><br><span class="line">解释：</span><br><span class="line">从根到叶子节点路径 1-&gt;2 代表数字 12</span><br><span class="line">从根到叶子节点路径 1-&gt;3 代表数字 13</span><br><span class="line">因此，数字总和 = 12 + 13 = 25</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [4,9,0,5,1]</span><br><span class="line">输出：1026</span><br><span class="line">解释：</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495</span><br><span class="line">从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491</span><br><span class="line">从根到叶子节点路径 4-&gt;0 代表数字 40</span><br><span class="line">因此，数字总和 = 495 + 491 + 40 = 1026</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[1, 1000]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>树的深度不超过 <code>10</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两种解题思路，一种是广度优先遍历，另一种是深度优先遍历。</p><p>广度优先遍历的思路是用队列记录遍历节点和节点当前值，首先队首出队，如果当前节点为叶子节点则将结果加上其值，否则继续将其孩子节点加入到队列中继续遍历。</p><p>深度优先遍历的思路是从根节点开始遍历，如果当前节点为空，则返回0，否则计算当前节点值，如果当前节点为叶子节点，则返回当前节点值，如果不为叶子节点则返回递归遍历左右子节点返回值之和。</p><p>以下分别为广度优先遍历和深度优先遍历的具体实现：</p><p>BFS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sumNumbers = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line">    queue.<span class="title function_">push</span>([root, root.<span class="property">val</span>]);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> [node, val] = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">if</span>(!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>)&#123;</span><br><span class="line">            res += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span>)&#123;</span><br><span class="line">            queue.<span class="title function_">push</span>([node.<span class="property">left</span>, val * <span class="number">10</span> + node.<span class="property">left</span>.<span class="property">val</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">right</span>)&#123;</span><br><span class="line">            queue.<span class="title function_">push</span>([node.<span class="property">right</span>, val * <span class="number">10</span> + node.<span class="property">right</span>.<span class="property">val</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DFS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sumNumbers = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">node, val</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(!node)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> sum = val * <span class="number">10</span> + node.<span class="property">val</span>;</span><br><span class="line">        <span class="keyword">if</span>(!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">dfs</span>(node.<span class="property">left</span>, sum) + <span class="title function_">dfs</span>(node.<span class="property">right</span>, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dfs</span>(root, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>415. 字符串相加</title>
      <link href="/post/62817a6b.html"/>
      <url>/post/62817a6b.html</url>
      
        <content type="html"><![CDATA[<h2 id="415-字符串相加"><a href="#415-字符串相加" class="headerlink" title="415. 字符串相加"></a>415. 字符串相加</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num1 = &quot;11&quot;, num2 = &quot;123&quot;</span><br><span class="line">输出：&quot;134&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num1 = &quot;456&quot;, num2 = &quot;77&quot;</span><br><span class="line">输出：&quot;533&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num1 = &quot;0&quot;, num2 = &quot;0&quot;</span><br><span class="line">输出：&quot;0&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num1.length, num2.length &lt;= 104</code></li><li><code>num1</code> 和<code>num2</code> 都只包含数字 <code>0-9</code></li><li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题的思路就是普通模拟加法过程，把握好计算过程中的进位，整数取模和整除操作即可，以下分别给出 C++ 和 JavaScript 的实现版本：</p><p>JavaScript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">num2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> i = num1.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> j = num2.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> x = i &gt;= <span class="number">0</span> ? num1.<span class="title function_">charAt</span>(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> y = j &gt;= <span class="number">0</span> ? num2.<span class="title function_">charAt</span>(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> cur = x + y + flag;</span><br><span class="line">        sum += cur % <span class="number">10</span>;</span><br><span class="line">        flag = <span class="title class_">Math</span>.<span class="title function_">floor</span>(cur/<span class="number">10</span>);</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flag != <span class="number">0</span>)</span><br><span class="line">        sum += flag;</span><br><span class="line">    <span class="keyword">return</span> sum.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>C++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addStrings</span><span class="params">(string num1, string num2)</span> </span>&#123;   </span><br><span class="line">        string res;   </span><br><span class="line">        <span class="type">int</span> i = num1.<span class="built_in">size</span>()<span class="number">-1</span>, j = num2.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x = i &gt;= <span class="number">0</span> ? num1[i] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> y = j &gt;= <span class="number">0</span> ? num2[j] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum = x + y + carry;</span><br><span class="line">            res += <span class="string">&#x27;0&#x27;</span> + sum % <span class="number">10</span>;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>()); </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 大数相加 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>112. 路径总和</title>
      <link href="/post/e54d0632.html"/>
      <url>/post/e54d0632.html</url>
      
        <content type="html"><![CDATA[<h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22</span><br><span class="line">输出：true</span><br><span class="line">解释：等于目标和的根节点到叶节点路径如上图所示。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3], targetSum = 5</span><br><span class="line">输出：false</span><br><span class="line">解释：树中存在两条根节点到叶子节点的路径：</span><br><span class="line">(1 --&gt; 2): 和为 3</span><br><span class="line">(1 --&gt; 3): 和为 4</span><br><span class="line">不存在 sum = 5 的根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [], targetSum = 0</span><br><span class="line">输出：false</span><br><span class="line">解释：由于树是空的，所以不存在根节点到叶子节点的路径。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题为二叉树遍历类型题，可以采用两种思路，一种是用深度遍历的思想，另一种是用广度遍历的思想。具体思路分别为：</p><ul><li>DFS：利用减法的思想，每遍历到一个节点，先判断是否为空节点，如果是空节点则直接返回 <code>falsel</code>，如果不是则判断当前节点是否有子节点，如果没有，判断其值是否等于 <code>targetSum</code>，如果等于则返回 <code>true</code>，不等则返回 <code>false</code>。如果有子节点则继续遍历其子节点。此方法时间复杂度为 O(n)，空间复杂度为 O(H)。H 为二叉树的高度，也为 logN。</li><li>BFS：首先从队首节点开始遍历，如果当前节点为叶子节点，判断其路径值是否等于 <code>targetSum</code>，如果等于则返回 <code>true</code>，紧接着将当前节点的子节点和其路径值入队，如此循环直到队列为空 。这种做法需要记录两个值，一个是当前节点，另一个是当前节点路径值。可以使用两个队列或者一个队列来记录当前遍历节点和路径值。此方法时间复杂度为 O(n)，空间复杂度为 O(n)。</li></ul><p>DFS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">targetSum</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasPathSum = <span class="keyword">function</span>(<span class="params">root, targetSum</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root.<span class="property">left</span> &amp;&amp; !root.<span class="property">right</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> targetSum === root.<span class="property">val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hasPathSum</span>(root.<span class="property">left</span>, targetSum - root.<span class="property">val</span>) || <span class="title function_">hasPathSum</span>(root.<span class="property">right</span>, targetSum - root.<span class="property">val</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>BFS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">targetSum</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasPathSum = <span class="keyword">function</span>(<span class="params">root, targetSum</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line">    <span class="keyword">const</span> queue_val = [];</span><br><span class="line">    queue.<span class="title function_">push</span>(root);</span><br><span class="line">    queue_val.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">        <span class="keyword">const</span> node_val = queue_val.<span class="title function_">shift</span>();       </span><br><span class="line">        <span class="keyword">if</span>(!node.<span class="property">left</span> &amp;&amp; !node.<span class="property">right</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node_val === targetSum)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">left</span>)&#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">            queue_val.<span class="title function_">push</span>(node_val + node.<span class="property">left</span>.<span class="property">val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.<span class="property">right</span>)&#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">            queue_val.<span class="title function_">push</span>(node_val + node.<span class="property">right</span>.<span class="property">val</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="/post/777a8c1f.html"/>
      <url>/post/777a8c1f.html</url>
      
        <content type="html"><![CDATA[<h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题最直接的方法就是用栈，匹配的思想是从头开始遍历给定字符串，遇到左括号入栈，遇到右括号查看栈顶元素是否匹配，匹配则出栈，不匹配则直接返回 <code>false</code>，遍历完之后查看栈是否空，空则返回 <code>true</code>，不为空则返回 <code>false</code>。</p><p>不用 map 的版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++)&#123;  </span><br><span class="line">        <span class="keyword">const</span> n = stack.<span class="property">length</span>;     </span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span> )&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &gt; <span class="number">0</span> &amp;&amp; stack[n-<span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &gt; <span class="number">0</span> &amp;&amp; stack[n-<span class="number">1</span>] == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &gt; <span class="number">0</span> &amp;&amp; stack[n-<span class="number">1</span>] == <span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                stack.<span class="title function_">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 map 的版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pairs = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">        [<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>]</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">const</span> stk = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pairs.<span class="title function_">has</span>(ch)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stk.<span class="property">length</span> || stk[stk.<span class="property">length</span> - <span class="number">1</span>] !== pairs.<span class="title function_">get</span>(ch)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="title function_">pop</span>();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            stk.<span class="title function_">push</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> !stk.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 栈 </tag>
            
            <tag> 括号匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>165. 比较版本号</title>
      <link href="/post/47cce20f.html"/>
      <url>/post/47cce20f.html</url>
      
        <content type="html"><![CDATA[<h2 id="165-比较版本号"><a href="#165-比较版本号" class="headerlink" title="165. 比较版本号"></a>165. 比较版本号</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p><p>版本号由一个或多个修订号组成，各修订号由一个 <code>&#39;.&#39;</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p><p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等</strong> 。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本 <code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 &lt; 1</code> 。</p><p>返回规则如下：</p><ul><li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li><li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li><li>除此之外返回 <code>0</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：忽略前导零，&quot;01&quot; 和 &quot;001&quot; 都表示相同的整数 &quot;1&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：version1 = &quot;1.0&quot;, version2 = &quot;1.0.0&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：version1 没有指定下标为 2 的修订号，即视为 &quot;0&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：version1 = &quot;0.1&quot;, version2 = &quot;1.1&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：version1 中下标为 0 的修订号是 &quot;0&quot;，version2 中下标为 0 的修订号是 &quot;1&quot; 。0 &lt; 1，所以 version1 &lt; version2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li><li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>&#39;.&#39;</code></li><li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li><li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题要求直观明了，分别有两种思路：</p><ul><li>方法一：将原字符串分割为字符串数组，再逐一比较大小即可。这种做法的时间复杂度为 O(m+n)，空间复杂度为 O(m+n)。</li><li>方法二：直接在原字符串上利用 ASCII 码计算数值分块大小，再进行比较得出答案。这种做法的时间复杂度为 O(m+n)，空间复杂度为 O(1)。</li></ul><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">version1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">version2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> compareVersion = <span class="keyword">function</span>(<span class="params">version1, version2</span>) &#123;</span><br><span class="line">    <span class="comment">// 分割原字符串</span></span><br><span class="line">    <span class="keyword">const</span> ver1 = version1.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> ver2 = version2.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ver1.<span class="property">length</span> &amp;&amp; i &lt; ver2.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 将每个小数点部分转化为 Number 类型进行比较</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Number</span>(ver1[i]) &gt; <span class="title class_">Number</span>(ver2[i]))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Number</span>(ver1[i]) &lt; <span class="title class_">Number</span>(ver2[i]))</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;            </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 比较字符串剩余数值</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; ver1.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Number</span>(ver1[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; ver2.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Number</span>(ver2[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">version1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">version2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> compareVersion = <span class="keyword">function</span>(<span class="params">version1, version2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; version1.<span class="property">length</span> || j &lt; version2.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i &lt; version1.<span class="property">length</span> &amp;&amp; version1[i] !== <span class="string">&#x27;.&#x27;</span>; i++)&#123;</span><br><span class="line">            x = x * <span class="number">10</span> + version1[i].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跳过 &#x27;.&#x27; , 以下 j 操作同理</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j &lt; version2.<span class="property">length</span> &amp;&amp; version2[j] !== <span class="string">&#x27;.&#x27;</span>; j++)&#123;</span><br><span class="line">            y = y * <span class="number">10</span> + version2[j].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;0&#x27;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; y)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; y)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>88. 合并两个有序数组</title>
      <link href="/post/7d6a5163.html"/>
      <url>/post/7d6a5163.html</url>
      
        <content type="html"><![CDATA[<h2 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a>88. 合并两个有序数组</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有几种解法，分别为：最容易想到的直接排序、顺序双指针法和逆序双指针法。</p><ul><li>方法一：将 nums2 直接插入到 nums1 尾部中，直接用排序算法排序即可得到答案，但是这样的时间复杂度为 O((m+n)log(m+n))，空间复杂度为 O(m+n)；</li><li>方法二：拷贝一份 nums1 的副本，然后通过双指针比较 nums1 副本和 nums2 中的元素大小并分别将其插入至 nums1 中，这种方法的时间复杂度为 O(m+n)，空间复杂度为 O(m+n)；</li><li>方法三：该方法为方法二的改进版本，由于 nums1 中尾部的空间为临时空间，我们可以从后往前遍历插入元素，通过推理可知 nums1 尾部的空间插入元素永远都不会覆盖前面未插入的元素。该方法的时间复杂度为 O(m+n)，空间复杂度为 O(1)。</li></ul><p>此处只给出方法三的具体实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">m</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) &#123;</span><br><span class="line">    <span class="comment">// i 为 nums1 的遍历下标，j 为 nums2 的遍历下标</span></span><br><span class="line">    <span class="keyword">let</span> i = m-<span class="number">1</span>, j = n-<span class="number">1</span>, k = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 因为题目要求非降序，所以此处选择较大元素插入到答案数组中</span></span><br><span class="line">        <span class="keyword">if</span>(nums1[i] &gt;= nums2[j])&#123;</span><br><span class="line">            nums1[k--] = nums1[i--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[k--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入剩余元素</span></span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        nums1[k--] = nums1[i--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        nums1[k--] = nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有玩家都全力向前冲刺, 却不知道向后才是胜利之门。–《头号玩家》</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> CodeTop </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1475. 商品折扣后的最终价格</title>
      <link href="/post/518627b5.html"/>
      <url>/post/518627b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="1475-商品折扣后的最终价格"><a href="#1475-商品折扣后的最终价格" class="headerlink" title="1475. 商品折扣后的最终价格"></a><a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/">1475. 商品折扣后的最终价格</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你一个数组 prices ，其中 prices[i] 是商店里第 i 件商品的价格。</p><p>商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices[j] 相等的折扣，其中 j 是满足 j &gt; i 且 prices[j] &lt;&#x3D; prices[i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。</p><p>请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [8,4,6,2,3]</span><br><span class="line">输出：[4,2,4,2,3]</span><br><span class="line">解释：</span><br><span class="line">商品 0 的价格为 price[0]=8 ，你将得到 prices[1]=4 的折扣，所以最终价格为 8 - 4 = 4 。</span><br><span class="line">商品 1 的价格为 price[1]=4 ，你将得到 prices[3]=2 的折扣，所以最终价格为 4 - 2 = 2 。</span><br><span class="line">商品 2 的价格为 price[2]=6 ，你将得到 prices[3]=2 的折扣，所以最终价格为 6 - 2 = 4 。</span><br><span class="line">商品 3 和 4 都没有折扣。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1,2,3,4,5]</span><br><span class="line">输出：[1,2,3,4,5]</span><br><span class="line">解释：在这个例子中，所有商品都没有折扣。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [10,1,1,6]</span><br><span class="line">输出：[9,0,1,6]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 500</code></li><li><code>1 &lt;= prices[i] &lt;= 10^3</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可以通过直接遍历求解出答案，但是这样会带来 O(n^2^) 的时间复杂度。利用单调栈的思想可以缩减到 O(n) 的时间复杂度，但需要 O(n) 的空间复杂度。具体做法为：新建一个用于存储价格的栈，从后往前遍历 prices 数组，如果栈不为空且栈顶元素大于当前价格，则一直出栈直到栈为空或者栈顶元素小于等于当前价格为止，否则计算出当前折扣价格存储至原数组中（不用额外开辟新空间），并将为打折的价格压入栈。循环直到 prices 数组遍历完为止。</p><p>注意：遇到类似下一个更大或者更小元素的问题，都可以借鉴单调栈的思想。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">finalPrices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用单调栈的方式</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">// 将比当前元素大的值出栈，直到栈空或者栈顶元素比当前元素小的情况（此时栈顶元素即为第一个比当前元素小的值）</span></span><br><span class="line">            <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; prices[i] &lt; s.<span class="built_in">top</span>())&#123;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="type">int</span> priceRecord = prices[i];</span><br><span class="line">            <span class="comment">// 计算当前加个折扣</span></span><br><span class="line">            prices[i] = s.<span class="built_in">empty</span>() ? prices[i] : prices[i] - s.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">// 将当前未打折的价格压入栈</span></span><br><span class="line">            s.<span class="built_in">push</span>(priceRecord);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>998. 最大二叉树 II</title>
      <link href="/post/d22c518a.html"/>
      <url>/post/d22c518a.html</url>
      
        <content type="html"><![CDATA[<h2 id="998-最大二叉树-II"><a href="#998-最大二叉树-II" class="headerlink" title="998. 最大二叉树 II"></a><a href="https://leetcode.cn/problems/maximum-binary-tree-ii/">998. 最大二叉树 II</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p><strong>最大树</strong> 定义：一棵树，并满足：其中每个节点的值都大于其子树中的任何其他值。</p><p>给你最大树的根节点 <code>root</code> 和一个整数 <code>val</code> 。</p><p>就像 <a href="https://leetcode.cn/problems/maximum-binary-tree/">之前的问题</a> 那样，给定的树是利用 <code>Construct(a)</code> 例程从列表 <code>a</code>（<code>root = Construct(a)</code>）递归地构建的：</p><ul><li>如果 <code>a</code> 为空，返回 <code>null</code> 。</li><li>否则，令 <code>a[i]</code> 作为 <code>a</code> 的最大元素。创建一个值为 <code>a[i]</code> 的根节点 <code>root</code> 。</li><li><code>root</code> 的左子树将被构建为 <code>Construct([a[0], a[1], ..., a[i - 1]])</code> 。</li><li><code>root</code> 的右子树将被构建为 <code>Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])</code> 。</li><li>返回 <code>root</code> 。</li></ul><p>请注意，题目没有直接给出 <code>a</code> ，只是给出一个根节点 <code>root = Construct(a)</code> 。</p><p>假设 <code>b</code> 是 <code>a</code> 的副本，并在末尾附加值 <code>val</code>。题目数据保证 <code>b</code> 中的值互不相同。</p><p>返回 <code>Construct(b)</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-1.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [4,1,3,null,null,2], val = 5</span><br><span class="line">输出：[5,4,null,1,3,null,null,2]</span><br><span class="line">解释：a = [1,4,2,3], b = [1,4,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 100]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 100</code></li><li>树中的所有值 <strong>互不相同</strong></li><li><code>1 &lt;= val &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题目基于《654. 最大二叉树 》进行拓展，通过最大二叉树建树的过程可知，题目假设 val 位于序列的最后一位，即以 val 为值的节点只可能是在某个节点的右孩子节点或者根节点，所以只需要遍历每个节点的右子树，直到找到比 val 更小的节点为止，找到该节点后直接新建一个以 val 为值，左孩子为当前子树的节点进行替换，再返回根节点即可。如果遍历完后仍未找到比 val 小的值，则新建一个以 val 为值的节点作为右叶子节点的右孩子，返回根节点即可。具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function">TreeNode* <span class="title">insertIntoMaxTree</span><span class="params">(TreeNode* root, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        TreeNode* parent = <span class="literal">nullptr</span>;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;val &gt; val)&#123;</span><br><span class="line">                parent = cur;</span><br><span class="line">                cur = cur-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遇到当前节点值比 val 小的时候有两种情况，一种是 cur 为 root 节点，另一种是 cur 不为 root 节点，需要分别进行处理</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(parent != <span class="literal">nullptr</span>)&#123; </span><br><span class="line">                parent-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val, cur, <span class="literal">nullptr</span>);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val, cur, <span class="literal">nullptr</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环遍历完后还是没找到比 val 小的情况则创建一个以 val 为值的节点加入到 parent 节点的右孩子中，并返回 root</span></span><br><span class="line">        parent-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>654. 最大二叉树</title>
      <link href="/post/ef2a688d.html"/>
      <url>/post/ef2a688d.html</url>
      
        <content type="html"><![CDATA[<h4 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="https://leetcode.cn/problems/maximum-binary-tree/">654. 最大二叉树</a></h4><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给定一个不重复的整数数组 <code>nums</code> 。 <strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code> 递归地构建:</p><ol><li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li><li>递归地在最大值 <strong>左边</strong> 的 <strong>子数组前缀上</strong> 构建左子树。</li><li>递归地在最大值 <strong>右边</strong> 的 <strong>子数组后缀上</strong> 构建右子树。</li></ol><p>返回 <em><code>nums</code> 构建的</em> *<strong>最大二叉树*</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,6,0,5]</span><br><span class="line">输出：[6,3,5,null,2,0,null,null,1]</span><br><span class="line">解释：递归调用如下所示：</span><br><span class="line">- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。</span><br><span class="line">    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。</span><br><span class="line">        - 空数组，无子节点。</span><br><span class="line">        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。</span><br><span class="line">            - 空数组，无子节点。</span><br><span class="line">            - 只有一个元素，所以子节点是一个值为 1 的节点。</span><br><span class="line">    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。</span><br><span class="line">        - 只有一个元素，所以子节点是一个值为 0 的节点。</span><br><span class="line">        - 空数组，无子节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1]</span><br><span class="line">输出：[3,null,2,null,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题是常规的递归题，按照题目所给思路进行递归，在函数传参的时候注意下标的处理即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructCore</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> max_index = left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left; i&lt;right; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[max_index])</span><br><span class="line">                max_index = i;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[max_index], <span class="built_in">constructCore</span>(nums, left, max_index), <span class="built_in">constructCore</span>(nums, max_index + <span class="number">1</span>, right));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">constructCore</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1470. 重新排列数组</title>
      <link href="/post/ef67bc27.html"/>
      <url>/post/ef67bc27.html</url>
      
        <content type="html"><![CDATA[<h2 id="1470-重新排列数组"><a href="#1470-重新排列数组" class="headerlink" title="1470. 重新排列数组"></a><a href="https://leetcode.cn/problems/shuffle-the-array/">1470. 重新排列数组</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>给你一个数组 nums，数组中有 2n 个元素，按 [x1,x2,…,xn,y1,y2,…,yn] 的格式排列。</p><p>请你将数组按 [x1,y1,x2,y2,…,xn,yn] 格式重新排列，返回重排后的数组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">输出：[2,3,5,4,1,7] </span><br><span class="line">解释：由于 x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 ，所以答案为 [2,3,5,4,1,7]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,4,3,2,1], n = 4</span><br><span class="line">输出：[1,4,2,3,3,2,4,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2,2], n = 2</span><br><span class="line">输出：[1,2,1,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 500</code></li><li><code>nums.length == 2n</code></li><li><code>1 &lt;= nums[i] &lt;= 10^3</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题最容易想到的思路是直接开辟一个新的空间大小为 2*n 的数组，再将原数组元素依次放入其中即可得出答案，但这种方式的空间复杂度为 O(2*n)。通过观察题目条件可知，数组元素每个数字大小不超过1000，即使用 10 bit 空间即可存储，而 int 类型有 32 bit 空间，我们可以考虑使用高 10 bit 的位置存储排列后的数值，这样就可以不用开辟额外空间，做到 O(1) 的空间复杂度，具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">shuffle</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)&#123;</span><br><span class="line">            <span class="comment">// 计算出当前元素排列后的下标</span></span><br><span class="line">            <span class="type">int</span> j = i &lt; n ? i * <span class="number">2</span> : (i - n) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 利用 nums[j] 高十位（10 ~ 19 位）来存储 nums[j],同时将原始数据保留在低十位</span></span><br><span class="line">            nums[j] = nums[j] | (nums[i] &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 nums 的每个元素都取高十位即可得出最后结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>&amp; t : nums)</span><br><span class="line">            t &gt;&gt;= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 每日一题 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>662. 二叉树最大宽度</title>
      <link href="/post/a9fad65f.html"/>
      <url>/post/a9fad65f.html</url>
      
        <content type="html"><![CDATA[<h2 id="662-二叉树最大宽度"><a href="#662-二叉树最大宽度" class="headerlink" title="662. 二叉树最大宽度"></a><a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/">662. 二叉树最大宽度</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一棵二叉树的根节点 <code>root</code> ，返回树的 <strong>最大宽度</strong> 。</p><p>树的 <strong>最大宽度</strong> 是所有层中最大的 <strong>宽度</strong> 。</p><p>每一层的 <strong>宽度</strong> 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 <code>null</code> 节点，这些 <code>null</code> 节点也计入长度。</p><p>题目数据保证答案将会在 <strong>32 位</strong> 带符号整数范围内。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,3,2,5,3,null,9]</span><br><span class="line">输出：4</span><br><span class="line">解释：最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,3,2,5,null,null,9,6,null,7]</span><br><span class="line">输出：7</span><br><span class="line">解释：最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目范围是 <code>[1, 3000]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这题采用可采用节点编号的方式求出节点之间的宽度差，即某个节点的编号为 i，则其左孩子节点编号为 i*2，其右孩子节点编号为 i*2 + 1，某两个节点的宽度等于其编号之差 + 1。利用这个方式配合广度优先遍历，通过求出遍历每一层节点最左边和最右边的节点宽度，取当前宽度最大值，遍历完后即可得出最大宽度。同理，本题也可采用深度遍历的方法，这里使用了广度优先遍历的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用 unsigned long long 是因为 res 有可能会超出 int 的表示范围</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 用 pair 来存储节点和其编号，自身编号为 i，左孩子节点为 i*2，右孩子节点为 i*2 + 1</span></span><br><span class="line">        queue&lt;pair&lt;TreeNode*, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;&gt; nQueue;</span><br><span class="line">        nQueue.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(root,<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span>(!nQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="comment">// 计算每一层最左边和最右边节点的宽度差(编号之差 + 1)，取当前最大值</span></span><br><span class="line">            res = <span class="built_in">max</span>(res, nQueue.<span class="built_in">back</span>().second - nQueue.<span class="built_in">front</span>().second + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 遍历下一层节点</span></span><br><span class="line">            <span class="type">int</span> len = nQueue.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nQueue.<span class="built_in">front</span>().first-&gt;left)</span><br><span class="line">                    nQueue.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(nQueue.<span class="built_in">front</span>().first-&gt;left,nQueue.<span class="built_in">front</span>().second * <span class="number">2</span>));</span><br><span class="line">                <span class="keyword">if</span>(nQueue.<span class="built_in">front</span>().first-&gt;right)</span><br><span class="line">                    nQueue.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(nQueue.<span class="built_in">front</span>().first-&gt;right,nQueue.<span class="built_in">front</span>().second * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">                nQueue.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 深度优先遍历 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 19. 正则表达式匹配</title>
      <link href="/post/96049971.html"/>
      <url>/post/96049971.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-19-正则表达式匹配"><a href="#剑指-Offer-19-正则表达式匹配" class="headerlink" title="剑指 Offer 19. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/">剑指 Offer 19. 正则表达式匹配</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：困难</strong></p><p>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释: &quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 &#x27;*&#x27; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#x27;a&#x27;。因此，字符串 &quot;aa&quot; 可被视为 &#x27;a&#x27; 重复了一次。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;ab&quot;</span><br><span class="line">p = &quot;.*&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: &quot;.*&quot; 表示可匹配零个或多个（&#x27;*&#x27;）任意字符（&#x27;.&#x27;）。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 因为 &#x27;*&#x27; 表示零个或多个，这里 &#x27;c&#x27; 为 0 个, &#x27;a&#x27; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">s = &quot;mississippi&quot;</span><br><span class="line">p = &quot;mis*is*p*.&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><ul><li><code>s</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母。</li><li><code>p</code> 可能为空，且只包含从 <code>a-z</code> 的小写字母以及字符 <code>.</code> 和 <code>*</code>，无连续的 <code>&#39;*&#39;</code>。</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可采用递归的方式求解。</p><p><strong>递归结束条件：</strong></p><p>str 和 pattern 都已经匹配完，返回 true</p><p>str 未匹配完，pattern 已匹配完，返回 false</p><p><strong>递归体：</strong></p><p>每次匹配分别从字符串和模式串中取出一个字符进行比较，比较的情况分为 pattern 第二个字符为 * 和 不为 * 的情况。</p><p>在 pattern 第二个字符为 * 的情况下，分为 str 和 pattern 匹配和不匹配两种情况：在匹配的情况下（即str&#x3D;&#x3D;pattern或者pattern&#x3D;&#x3D;‘.’）， pattern 向后移动两格或者不移动，str 向后移动一格或者不移动进行递归。在不匹配的情况下，pattern直接向后移两格进行递归。</p><p>在 pattern 第二个字符不为 * 的情况下，如果 str 和 pattern 匹配，则返回 true，如果不匹配则返回 false</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">matchCore</span><span class="params">(<span class="type">char</span>* str,<span class="type">char</span>* pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(*str == <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *pattern == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(*str != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *pattern  == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 将匹配情况分为 pattern 第二个字符为 * 和 不为 * 的情况</span></span><br><span class="line">        <span class="keyword">if</span>(*(pattern + <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">// str 和 pattern 匹配的情况</span></span><br><span class="line">            <span class="keyword">if</span>(*str == *pattern || (*str != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *pattern == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                <span class="comment">// matchCore(str, pattern + 2) 为 &quot;.*&quot; 不作匹配的情况</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">matchCore</span>(str + <span class="number">1</span>, pattern + <span class="number">2</span>) || <span class="built_in">matchCore</span>(str + <span class="number">1</span>, pattern) || <span class="built_in">matchCore</span>(str, pattern + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// str 和 pattern 不匹配的情况直接跳过</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">matchCore</span>(str, pattern + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(*str == *pattern || (*pattern == <span class="string">&#x27;.&#x27;</span> &amp;&amp; *str != <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">matchCore</span>(str + <span class="number">1</span>,pattern + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> str[<span class="number">41</span>],pattern[<span class="number">41</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(str, s.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">strcpy</span>(pattern, p.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">matchCore</span>(str, pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>字符串</strong>的编程能力</li><li>考查对<strong>正则表达式</strong>的理解</li><li>考查思维的全面性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 18. 删除链表的节点</title>
      <link href="/post/192b76d9.html"/>
      <url>/post/192b76d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-18-删除链表的节点"><a href="#剑指-Offer-18-删除链表的节点" class="headerlink" title="剑指 Offer 18. 删除链表的节点"></a><a href="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><h4 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h4><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。</p><p><strong>注意：</strong>此题对比原题有改动</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [4,5,1,9], val = 5</span><br><span class="line">输出: [4,1,9]</span><br><span class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [4,5,1,9], val = 1</span><br><span class="line">输出: [4,5,9]</span><br><span class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>题目保证链表中节点的值互不相同</li><li>若使用 C 或 C++ 语言，你不需要 <code>free</code> 或 <code>delete</code> 被删除的节点</li></ul><h4 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h4><p>在 O(1) 时间内删除链表节点。</p><p>给定单向链表的头指针和一个节点指针，定义一个函数在 O(1) 时间内删除该节点，链表节点与函数的定义如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m_nValue;</span><br><span class="line">    ListNode* m_pNext;    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteNode</span><span class="params">(ListNode** pListHead, ListNode* pToBeDeleted)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题针对 Leetcode 题型和原题的思路有所区别，但大致相同。对于 Leetcode 题型只能做到 O(n) 的复杂度，对于原题可以做到 O(1) 复杂度。</p><p>删除的情况可以分为三种：</p><ul><li>需要删除的节点是头节点</li><li>需要删除的节点是中间节点</li><li>需要删除的节点是尾节点</li></ul><p>针对以上三种分别处理即可</p><h4 id="Leetcode-1"><a href="#Leetcode-1" class="headerlink" title="Leetcode"></a>Leetcode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理头部为空和需要删除的节点是只有一个节点的情况</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || (head-&gt;next == <span class="literal">nullptr</span> &amp;&amp; head-&gt;val == val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理删除节点是头节点的情况</span></span><br><span class="line">        <span class="keyword">if</span>(head-&gt;val == val)</span><br><span class="line">            <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        ListNode* h = head;</span><br><span class="line">        <span class="comment">// 处理删除节点在中间和尾部的情况</span></span><br><span class="line">        <span class="keyword">while</span>(h-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h-&gt;next-&gt;val == val)&#123;</span><br><span class="line">                h-&gt;next = h-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;                                                                              </span><br><span class="line">            h = h-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="原题-1"><a href="#原题-1" class="headerlink" title="原题"></a>原题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteNode</span><span class="params">(ListNode** pListHead, ListNode* pToBeDeleted)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pListHead == <span class="literal">nullptr</span> || pToBeDeleted == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 处理删除节点在中间的情况</span></span><br><span class="line">        <span class="keyword">if</span>(pToBeDeleted-&gt;m_pNext != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            ListNode* pNode = pToBeDeleted-&gt;m_pNext;</span><br><span class="line">            pToBeDeleted-&gt;m_nValue = pNode-&gt;m_nValue;</span><br><span class="line">            pToBeDeleted-&gt;m_pNext = pNode-&gt;m_pNext;</span><br><span class="line">            <span class="keyword">delete</span> pNode;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理删除节点在头部的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(*pListHead == pToBeDeleted)&#123;</span><br><span class="line">            <span class="keyword">delete</span> pToBeDeleted;</span><br><span class="line">            pToBeDeleted = <span class="literal">nullptr</span>;</span><br><span class="line">            *pListHead = <span class="literal">nullptr</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理删除节点在尾部的情况</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ListNode* pNode = *pListHead;</span><br><span class="line">            <span class="keyword">while</span>(pNode-&gt;m_pNext != pToBeDeleted)&#123;</span><br><span class="line">                pNode = pNode-&gt;m_pNext;</span><br><span class="line">            &#125;            </span><br><span class="line">            pNode-&gt;m_pNext = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">delete</span> pListHead;</span><br><span class="line">            pToBeDeleted = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>链表</strong>的编程能力。</li><li>考查思维的全面性。本体要全面考虑删除节点的各种情况，包括删除节点位于链表的尾部和输入的链表只有一个节点这些特殊情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 链表 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 17. 打印从1到最大的n位数</title>
      <link href="/post/e0856953.html"/>
      <url>/post/e0856953.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-17-打印从1到最大的n位数"><a href="#剑指-Offer-17-打印从1到最大的n位数" class="headerlink" title="剑指 Offer 17. 打印从1到最大的n位数"></a><a href="https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">剑指 Offer 17. 打印从1到最大的n位数</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 1</span><br><span class="line">输出: [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>用返回一个整数列表来代替打印</li><li>n 为正整数</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题目（剑指 offer ）咋一看很简单，但实际的考点在 <strong>大数处理</strong> 和 <strong>输出处理</strong> 。大数处理需要注意的点是 n 位的最大数可能超出 int 或者 long 等其他数据类型的表示范围，这时候就需要其他表示方法来处理，例如字符串。输出处理需要注意的点是在以字符串形式表示大数进行输出的时候，不要把有效数据部分前面的 0 输出。</p><p>关于大数处理，有两种处理方式，一种是在字符串上模拟进位运算，另一种是以全排列的方式输出所有数据。</p><p>这里采用了全排列递归的方式。</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumbers</span><span class="params">(<span class="type">char</span> *numbers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> isBeginning0 = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(numbers);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isBeginning0 &amp;&amp; numbers[i] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            isBeginning0 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isBeginning0)</span><br><span class="line">            cout &lt;&lt; numbers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printToMaxOfNDigits</span><span class="params">(<span class="type">char</span> *numbers, <span class="type">int</span> length, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == length - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printNumbers</span>(numbers);</span><br><span class="line">        reutrn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        numbers[index + <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span> + i;</span><br><span class="line">        <span class="built_in">printToMaxOfNDigits</span>(numbers, length, index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printNumbers</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">        reutrn;</span><br><span class="line">    <span class="type">char</span> *numbers = <span class="keyword">new</span> <span class="type">char</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">char</span>[n] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        numbers[<span class="number">0</span>] = i + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printToMaxOfNDigits</span>(numbers, n, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] numbers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查解决<strong>大数</strong>问题的能力</li><li>考查字符串数字模拟加法过程中判断最大位是否产生进位的方式，不同的方法时间复杂度差距较大</li><li>考查全排列方式<strong>递归</strong>方法解决能力</li><li>考查是否考虑到输出时遇到的有效数据前 0 的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 大数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 16. 数值的整数次方</title>
      <link href="/post/f3feae3f.html"/>
      <url>/post/f3feae3f.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.00000, n = 10</span><br><span class="line">输出：1024.00000</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.10000, n = 3</span><br><span class="line">输出：9.26100</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.00000, n = -2</span><br><span class="line">输出：0.25000</span><br><span class="line">解释：2^-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li><code>-2^31 &lt;= n &lt;= 2^31-1</code></li><li><code>-104 &lt;= x^n &lt;= 104</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题主要考察编程的功能测试、边界测试和错误处理几个方面。</p><p>功能测试：确保能实现计算 x 的 n 次幂，并且需要考虑到 n 为负数的情况，以及 x 为 0 的情况，并且在计算 x 的 n 次幂的过程中可以使用快速幂的方法来优化，这个方法的思路类似于斐波那契数列求解的优化方法。</p><p>边界测试：考虑 n 或 x 取值在边界的情况，检查程序是否能正确处理这类大数值的情况。例如当 n 或者 x 超出 int 表示范围的情况处理。</p><p>错误处理：处理 x &#x3D; 0 和 n &lt; 0 的情况，这种情况的计算会出现除 0 的异常</p><p>时间复杂度：O(log n)</p><p>空间复杂度：O(log n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 使用全局变量的方式处理错误</span></span><br><span class="line">    <span class="type">bool</span> invalidInput = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 快速幂递归法</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">PowerWithUnsignedN</span><span class="params">(<span class="type">double</span> base, <span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> base;</span><br><span class="line">        <span class="comment">// 用位运算进行除2运算</span></span><br><span class="line">        <span class="type">double</span> result = <span class="built_in">PowerWithUnsignedN</span>(base,n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        result *= result;</span><br><span class="line">        <span class="comment">// 用位运算的方法判断奇偶效率更高</span></span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">0x1</span> == <span class="number">1</span>)</span><br><span class="line">            result *= base;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0.0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">                invalidInput = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="comment">// 使用 long long 的原因是有可能会超出表示 int 的取值范围</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n_abs = n;</span><br><span class="line">        <span class="keyword">return</span> n_abs &gt; <span class="number">0</span> ? <span class="built_in">PowerWithUnsignedN</span>(x, n_abs) : <span class="number">1.0</span> / <span class="built_in">PowerWithUnsignedN</span>(x, -n_abs);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本体考点"><a href="#本体考点" class="headerlink" title="本体考点"></a>本体考点</h3><ul><li>考查思维的全面性，主要是各种异常情况的处理。在面试时可以向面试官说明三种错误处理方式（函数返回值、全局变量、程序异常处理）的优缺点，并详细说明考虑到的各种异常处理。</li><li>考查<strong>快速乘方</strong>的解题思路，还有一些用<strong>位运算</strong>进行乘除法优化的思路</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 快速乘方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 15. 二进制中1的个数</title>
      <link href="/post/cd61d9b3.html"/>
      <url>/post/cd61d9b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 <a href="http://en.wikipedia.org/wiki/Hamming_weight">汉明重量</a>).）。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用 <a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a> 记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 11 (控制台输入 00000000000000000000000000001011)</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#x27;1&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 128 (控制台输入 00000000000000000000000010000000)</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#x27;1&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#x27;1&#x27;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题是基本的考查二进制和位运算题目。通常的思路有三种： </p><ol><li>每次将 n 与 1 进行与运算，可计算出 n 最后一为是 1 还是 0，然后将 n 右移 1 位，循环重复至 n 为 0</li><li>设置 <code>unsigned int flag = 1</code>，循环每次与 n 进行与运算，判断 n 上每一位是否为 1，直到 flag 超出 unsigned int 范围变为 0</li><li>利用 n &amp; (n-1) 位运算的特性计算 n 中 1 的个数（n &amp; (n-1) 可把 n 最右边的 1 变为 0）</li></ol><p>方法一在碰到负数的情况时，因为右移运算会把符号位右移导致死循环，所以方法二更合适。方法三则是利用了巧妙的位运算方法解决该问题，是能让人眼前一亮的新颖解法。</p><h4 id="方法一：常规右移位运算"><a href="#方法一：常规右移位运算" class="headerlink" title="方法一：常规右移位运算"></a>方法一：常规右移位运算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; <span class="number">1</span>)</span><br><span class="line">                res++;</span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二：改进版左移位运算"><a href="#方法二：改进版左移位运算" class="headerlink" title="方法二：改进版左移位运算"></a>方法二：改进版左移位运算</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 右移位运算解法</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n &amp; flag)</span><br><span class="line">                res++;</span><br><span class="line">            flag = flag &lt;&lt; <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法三：n-amp-n-1-位运算解法"><a href="#方法三：n-amp-n-1-位运算解法" class="headerlink" title="方法三：n &amp; n - 1 位运算解法"></a>方法三：n &amp; n - 1 位运算解法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// n &amp; n - 1 位运算解法</span></span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            n = n &amp; ( n<span class="number">-1</span> );</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>二进制</strong>及<strong>位运算</strong>的理解</li><li>考查分析、调试代码的能力</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 14- I. 剪绳子</title>
      <link href="/post/a93040e1.html"/>
      <url>/post/a93040e1.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-14-I-剪绳子"><a href="#剑指-Offer-14-I-剪绳子" class="headerlink" title="剑指 Offer 14- I. 剪绳子"></a><a href="https://leetcode.cn/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0]<em>k[1]</em>…*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 58</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可以考虑使用动态规划和贪心算法两种思路。</p><p>对于动态规划，剪绳子的过程可以理解为，先剪一段长度为 i 的绳子，则得到的乘积为 f(i) * f(i-j)，我们可以定义 f(n) &#x3D; max( f(i)* f(n-i) )，其中 i 为 1,2,…,n-1，这是从上往下的递推公式，但在递推过程中可能会产生大量的重复计算结果，所以在代码实现中可以考虑从下往上的计算方式。</p><p>对于贪心算法，通过数学推导可得知将绳子以长度为 3 等分为多段时，乘积最大。故在剪绳子的时候，尽可能多地剪长度为 3 的绳子，当剩下长度为 5 的时候，剪为长度为 2 和 3 的绳子；当剩下长度为 4 的时候，剪为长度为 2 的两段绳子。</p><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><h5 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将长度小于等于3的结果直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( n &lt;= <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 该数组用于存储每次切割结果的最大乘积，record[i] 代表切割 i 长度的绳子所能达到的最大乘积</span></span><br><span class="line">        <span class="type">int</span>* record = <span class="keyword">new</span> <span class="type">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        record[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        record[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        record[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        record[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">4</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i/<span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="comment">// 将绳子切割成长度为 j 和 i-j 的两段，计算他们的乘积和，与当前最大值进行比较选取较大值 </span></span><br><span class="line">                <span class="type">int</span> cur_record = record[j] * record[i-j];</span><br><span class="line">                <span class="keyword">if</span>(max &lt; cur_record)</span><br><span class="line">                    max = cur_record; </span><br><span class="line">            &#125;</span><br><span class="line">            record[i] = max;</span><br><span class="line">        &#125;</span><br><span class="line">        max = record[n];</span><br><span class="line">        <span class="keyword">delete</span>[] record;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><h5 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将长度小于等于3的结果直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( n &lt;= <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> indexOf3 = n / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>( n - indexOf3 * <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">            indexOf3--;</span><br><span class="line">        <span class="type">int</span> indexOf2 = ( n - indexOf3 * <span class="number">3</span> ) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">3</span>, indexOf3) * <span class="built_in">pow</span>(<span class="number">2</span>, indexOf2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查抽象建模能力。</li><li>考查对<strong>动态规划</strong>和<strong>贪心算法</strong>的理解。其中动态规划关键是具备从上往下分析问题，从下往上解决问题的能力，而贪心算法则需要一定的数学功底。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli 使用 process.env 配置全局 API</title>
      <link href="/post/4506e868.html"/>
      <url>/post/4506e868.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli-使用-process-env-配置全局-API"><a href="#vue-cli-使用-process-env-配置全局-API" class="headerlink" title="vue-cli 使用 process.env 配置全局 API"></a>vue-cli 使用 process.env 配置全局 API</h2><p>关于 vue-cli3 及以上版本的请求地址 api 环境变量的配置。在项目开发过程中，通常存在开发、生产和测试三种不同的环境，我们根据不同的环境对相应的请求地址进行配置。</p><h3 id="创建-env-文件"><a href="#创建-env-文件" class="headerlink" title="创建 .env 文件"></a>创建 .env 文件</h3><p> .env.development 文件，用于 serve 模式，即开发模式</p><p> .env.build 文件，用于 serve 模式，即生产模式</p><p> .env.test 文件，用于 test 模式，即测试模式</p><p>.env 系列文件定义以下内容即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置 process.env 中的变量</span><br><span class="line">VUE_APP_BASE_API = &#x27;需要请求的API&#x27;// 注：变量命名一定要有前缀 VUE_APP_ ，后面的变量内容自定义</span><br></pre></td></tr></table></figure><h3 id="使用-process-env-环境变量"><a href="#使用-process-env-环境变量" class="headerlink" title="使用 process.env 环境变量"></a>使用 process.env 环境变量</h3><h4 id="方法一：使用-xxx-js-文件独立导出变量"><a href="#方法一：使用-xxx-js-文件独立导出变量" class="headerlink" title="方法一：使用 xxx.js 文件独立导出变量"></a>方法一：使用 xxx.js 文件独立导出变量</h4><p>在需要使用的 js 文件直接访问 process.env.xxx 即可，例如在 src&#x2F;api 中创建 index.js 文件，编辑如下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_ROOT</span>=process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span><span class="comment">//vue自带域名方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> api=<span class="variable constant_">API_ROOT</span>+<span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><p>在其他文件中 import 即可使用</p><h4 id="方法二：通过-vue-resource-修改全局-API-前缀"><a href="#方法二：通过-vue-resource-修改全局-API-前缀" class="headerlink" title="方法二：通过 vue-resource 修改全局 API 前缀"></a>方法二：通过 vue-resource 修改全局 API 前缀</h4><p>在 main.js 中找到 vue-resource 挂载对象部分， 修改 Vue.http.options.root 配置，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue-resource 挂载部分</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueResource</span> <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueResource</span>)</span><br><span class="line"><span class="comment">// 将环境变量赋值给 Vue.http.options.root</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">http</span>.<span class="property">options</span>.<span class="property">root</span> = process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span></span><br></pre></td></tr></table></figure><p>在其他文件中使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getResult</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 此处 ’api/qa&#x27; 为所请求接口后缀（注；不要在最前面加 / )</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;api/qa&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="string">&#x27;question&#x27;</span>: <span class="variable language_">this</span>.<span class="property">inputMsg</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;, &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">bodyText</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> Vue </tag>
            
            <tag> vue-cli </tag>
            
            <tag> 环境变量配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 13. 机器人的运动范围</title>
      <link href="/post/8915785d.html"/>
      <url>/post/8915785d.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-13-机器人的运动范围"><a href="#剑指-Offer-13-机器人的运动范围" class="headerlink" title="剑指 Offer 13. 机器人的运动范围"></a><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">剑指 Offer 13. 机器人的运动范围</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7&#x3D;18。但它不能进入方格 [35, 38]，因为3+5+3+8&#x3D;19。请问该机器人能够到达多少个格子？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 2, n = 3, k = 1</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 1, k = 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n,m &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 20</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题和上一题的矩阵路径相似，都是遍历搜索可行路径。根据题意，我们可以使用深度优先遍历（DFS） + 剪枝或者广度优先遍历（BFS）方法来解决。</p><h4 id="深度优先遍历（DFS）"><a href="#深度优先遍历（DFS）" class="headerlink" title="深度优先遍历（DFS）"></a>深度优先遍历（DFS）</h4><ul><li><p><strong>递归参数：</strong>二维向量 visited(记得带引用&amp;，因为递归过程中需要修改)，坐标 i 和 j ，范围 k</p></li><li><p><strong>终止条件：</strong></p><ul><li><p>返回 0</p><ol><li>坐标 i 和 j 越界</li><li>坐标之和超出范围</li><li>已访问</li></ol></li><li><p>返回 1 +  dfs(visited, i+1, j, k) + dfs(visited, i, j+1, k)</p><ul><li>当前坐标未被访问且符合条件</li></ul></li></ul></li><li><p><strong>递推工作：</strong></p><ol><li>标记当前坐标已被访问</li><li>递归计算相邻节点</li></ol></li><li><p><strong>返回值</strong></p><ul><li>返回符合条件的格子数 1 +  dfs(visited, i+1, j, k) + dfs(visited, i, j+1, k)</li></ul></li><li><p><strong>时间复杂度：</strong> <em><strong>O(MN)</strong></em></p></li><li><p><strong>空间复杂度：</strong> <em><strong>O(MN)</strong></em></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 检查坐标之和是否小于k</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i != <span class="number">0</span> || j != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                x += i % <span class="number">10</span>;</span><br><span class="line">                i /= <span class="number">10</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">                y += j % <span class="number">10</span>;</span><br><span class="line">                j /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">if</span>(x + y &gt; k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; &amp;visited,<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 剪枝：坐标越界、坐标和超范围和已访问</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= visited.<span class="built_in">size</span>() || j &gt;= visited[<span class="number">0</span>].<span class="built_in">size</span>() || !<span class="built_in">check</span>(i, j, k) || visited[i][j])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">// 标记已经访问</span></span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 统计符合格子数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">dfs</span>(visited, i+<span class="number">1</span>, j, k) + <span class="built_in">dfs</span>(visited, i, j+<span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">dfs</span>(visited,<span class="number">0</span>,<span class="number">0</span>,k);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="广度优先遍历（BFS）"><a href="#广度优先遍历（BFS）" class="headerlink" title="广度优先遍历（BFS）"></a>广度优先遍历（BFS）</h4><ul><li><strong>初始化：</strong>将坐标 (0,0) 加入到队列中</li><li><strong>迭代终止条件：</strong>队列为空</li><li><strong>迭代工作：</strong><ol><li>将队首元素出队</li><li>检查该元素是否符合条件：是否越界、是否已访问和数位和是否超范围<ol><li>符合条件：标记该元素已访问并记录统计数 count、将该元素的相邻右下元素入队</li><li>不符合条件：continue</li></ol></li></ol></li><li><strong>返回值：</strong>返回统计数 count</li><li><strong>时间复杂度：</strong> <em><strong>O(MN)</strong></em></li><li><strong>空间复杂度：</strong> <em><strong>O(MN)</strong></em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 检查坐标之和是否小于k</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i != <span class="number">0</span> || j != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">                x += i % <span class="number">10</span>;</span><br><span class="line">                i /= <span class="number">10</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">                y += j % <span class="number">10</span>;</span><br><span class="line">                j /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">if</span>(x + y &gt; k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">visited</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        queue&lt;vector&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 从 0,0 开始遍历</span></span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; cor = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">// 判断出队元素是否符合条件</span></span><br><span class="line">            <span class="keyword">if</span>(cor[<span class="number">0</span>] &gt;= m || cor[<span class="number">1</span>] &gt;= n || !<span class="built_in">check</span>(cor[<span class="number">0</span>], cor[<span class="number">1</span>], k) || visited[cor[<span class="number">0</span>]][cor[<span class="number">1</span>]] )</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            visited[cor[<span class="number">0</span>]][cor[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">            count++;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;cor[<span class="number">0</span>] + <span class="number">1</span>, cor[<span class="number">1</span>]&#125;);</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;cor[<span class="number">0</span>], cor[<span class="number">1</span>] + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  count;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对 <strong>回溯法</strong> 的理解</li><li>考查对 <strong>深度优先遍历</strong>、<strong>剪枝法</strong> 和 <strong>广度优先遍历</strong> 的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 深度优先遍历 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 剪枝法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 12. 矩阵中的路径</title>
      <link href="/post/9e68b9c9.html"/>
      <url>/post/9e68b9c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">剑指 Offer 12. 矩阵中的路径</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="img"></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= board.length &lt;= 200</code></li><li><code>1 &lt;= board[i].length &lt;= 200</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题是典型的矩阵搜索问题，可考虑使用 <strong>深度优先遍历（DFS） + 剪枝</strong> 的方法。</p><ul><li><strong>深度优先搜索：</strong>暴力遍历矩阵中所有的字符串可能性。DFS 通过递归，先朝一个方向遍历到底，再回溯至上个节点，沿另一个方向搜索，以此类推。</li><li><strong>剪枝：</strong>在搜索过程中，遇到 <strong>这条路不可行</strong> 和 <strong>目标字符串匹配成功</strong> 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则立即返回，称之为 <strong>可行性剪枝</strong>。</li></ul><p><img src="https://pic.leetcode-cn.com/1604944042-glmqJO-Picture0.png" alt="Picture0.png"></p><h4 id="DFS-解析"><a href="#DFS-解析" class="headerlink" title="DFS 解析"></a>DFS 解析</h4><ul><li><strong>递归参数：</strong>当前元素在矩阵 <code>board</code> 中的行列索引 <code>i</code> 和 <code>j</code> ，当前目标字符在 <code>word</code> 中的索引 <code>k</code> </li><li><strong>终止条件：</strong><ol><li>返回 <em>false</em> ：<ol><li>下标越界</li><li>当前元素 <code>board[i][j]</code> 不等于 <code>word[k]</code></li><li>当前元素 <code>board[i][j]</code> 已被访问（可与2合并）</li></ol></li><li>返回 <em>true</em> ：<code>k == word.size() - 1</code>，即 <code>word</code> 已全部匹配。</li></ol></li><li><strong>递推工作：</strong><ol><li>标记当前元素 <code>board[i][j]</code> 已被访问，即 <code>board[i][j] = &#39;\0&#39;</code> ，防止后续的 DFS 重复访问</li><li>递归访问当前元素的上右下左方向的元素，使用 或 条件来连接，即找到一条路径就停止当前递归，不再做后续的 DFS，将搜索结果记录到 <code>hasPath</code>。</li><li>还原当前矩阵元素：将 <code>board[i][j]</code> 还原至原始值，即 <code>word[k]</code></li></ol></li><li><strong>返回值：</strong>返回结果布尔变量 <code>hasPath</code>，代表是否找到路径</li></ul><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(3<sup>K</sup> MN) 。每次选择有三个方向，最坏情况需要选择 K 次，即 3<sup>K </sup>次。又因为一共有 M * N 个起点，故时间复杂度为 O(3<sup>K</sup> MN) 。</li><li>空就复杂度：O(K)。调用递归的过程中深度不超过 K ，所以调用函数累积使用的栈空间占用 O(K)，最坏的情况为 K &#x3D; M * N，即此时空间复杂度为 O(K)。</li></ul><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// rows, cols 存储矩阵行数和列数</span></span><br><span class="line">    <span class="type">int</span> rows,cols;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 剪枝：碰到下标越界、当前元素与word[k]不同和当前元素已被遍历的情况则进行剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= rows || j &lt; <span class="number">0</span> || j &gt;= cols || board[i][j] != word[k])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 查找成功剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(k == word.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 标记当前元素已被访问</span></span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">// 向上右下左四个方向访问</span></span><br><span class="line">        <span class="type">bool</span> hasPath = <span class="built_in">dfs</span>(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || <span class="built_in">dfs</span>(board,</span><br><span class="line">         word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || <span class="built_in">dfs</span>(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || <span class="built_in">dfs</span>(board, word, i, j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 还原当前元素</span></span><br><span class="line">        board[i][j] = word[k];</span><br><span class="line">        <span class="keyword">return</span> hasPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        rows = board.<span class="built_in">size</span>();</span><br><span class="line">        cols = board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">                <span class="comment">// 使用深度优先遍历+剪枝方法进行查找</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dfs</span>(board, word, i, j, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;          </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对 <strong>回溯法</strong> 的理解</li><li>考查对 <strong>深度优先遍历</strong> 和 <strong>剪枝法</strong> 的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 深度优先遍历 </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 剪枝法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 11. 旋转数组的最小数字</title>
      <link href="/post/3d94766b.html"/>
      <url>/post/3d94766b.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在 <strong>重复</strong> 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的<strong>最小元素</strong>。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一次旋转，该数组的最小值为 1。  </p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [3,4,5,1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,2,2,0,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == numbers.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= numbers[i] &lt;= 5000</code></li><li><code>numbers</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题不难想出，直接顺序遍历一遍就可以找出最小值，但这样的做法带来的时间复杂度是O(n)，达不到面试官的要求。因此，需要考虑其他的做法。</p><p>因为数组本身是有序的，但是经过了旋转之后变成了两个有序的子数组，而且前面子数组的元素都大于或等于后面子数组的元素，我们可以利用子数组有序的特性来使用二分查找的方法搜索数组最小元素。我们使用两个指针 P<sub>1</sub> 和 P<sub>2</sub> ，P<sub>1</sub> 指向前面子数组的第一个元素，P<sub>2</sub> 指向后面子数组的最后一个元素，当中间元素大于等于 P<sub>1</sub>  时， 说明最小元素在中间元素的后面，同理，当 P<sub>2</sub> 小于等于中间元素时，说明最小元素在中间元素的前面。还有一种特殊情况，当 P<sub>1</sub> ，P<sub>2</sub>  和中间元素相等时，无法判断最小元素位于哪边，只能使用顺序查找来找出最小元素。</p><p>上述方法时间复杂度为 O(logn)。</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOrder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers,<span class="type">int</span> p1,<span class="type">int</span> p2)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 顺序查找最小值</span></span><br><span class="line">        <span class="type">int</span> min = numbers[p1];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = p1 + <span class="number">1</span>;i &lt;= p2;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[i] &lt; min)</span><br><span class="line">                min = numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> p2 = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid = p1;</span><br><span class="line">        <span class="keyword">while</span>(numbers[p1] &gt;= numbers[p2])&#123;</span><br><span class="line">            <span class="keyword">if</span>(p2 - p1 == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> numbers[p2];</span><br><span class="line">            mid = (p1 + p2)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 三个数相等的特殊情况处理</span></span><br><span class="line">            <span class="keyword">if</span>(numbers[p1] == numbers[p2] &amp;&amp; numbers[p1] == numbers[mid])</span><br><span class="line">                <span class="keyword">return</span>(<span class="built_in">minOrder</span>(numbers,p1,p2));</span><br><span class="line">            <span class="comment">// 通常情况，直接二分查找处理</span></span><br><span class="line">            <span class="keyword">if</span>(numbers[p1] &lt;= numbers[mid])</span><br><span class="line">                p1 = mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(numbers[p2] &gt;= numbers[mid])</span><br><span class="line">                p2 = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>二分查找</strong>的理解</li><li>考查思维的全面性。排序数组本身是数组旋转的一个特例，而且还要考虑到数组中有相同数字的特例，如何处理这些特例也是一个考查点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- II. 青蛙跳台阶问题</title>
      <link href="/post/ee60b5f6.html"/>
      <url>/post/ee60b5f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 7</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可以转换为斐波那契数列问题进行求解</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numWays</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 使用循环的方法求解</span></span><br><span class="line">        <span class="type">int</span> f1,f2,res;</span><br><span class="line">        f1 = <span class="number">1</span>;</span><br><span class="line">        f2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            res = (f1 + f2) % <span class="number">1000000007</span>;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>递归</strong>、<strong>循环</strong>的理解及编程能力</li><li>考查<strong>大数</strong>的处理</li><li>考查<strong>数学建模</strong>能力</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 循环 </tag>
            
            <tag> 大数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- I. 斐波那契数列</title>
      <link href="/post/7eea4da1.html"/>
      <url>/post/7eea4da1.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a><a href="https://leetcode.cn/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>写一个函数，输入 <code>n</code> ，求斐波那契（Fibonacci）数列的第 <code>n</code> 项（即 <code>F(N)</code>）。斐波那契数列的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 0,   F(1) = 1</span><br><span class="line">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有三种解法：第一种是基于递归的解法，这种方法虽然直观但时间效率太低；第二种是把递归的算法用循环实现；第三种是把求斐波那契数列转换成求矩阵的乘方，该方法可以用 O(log<em>n</em>) 求得矩阵的 n 次方，但由于实现这种解法的代码比较复杂，通常不太适合面试。</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(n<span class="number">-1</span>) + <span class="built_in">fib</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环实现递归方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> f1,f2,res;</span><br><span class="line">        f1 = <span class="number">0</span>;</span><br><span class="line">        f2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            res = (f1 + f2) % <span class="number">1000000007</span>;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本体考点"><a href="#本体考点" class="headerlink" title="本体考点"></a>本体考点</h3><ul><li>考查对<strong>递归</strong>、<strong>循环</strong>的理解及编程能力</li><li>考查<strong>大数</strong>的处理</li><li>考查对时间复杂度的分析能力</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 循环 </tag>
            
            <tag> 大数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 09. 用两个栈实现队列</title>
      <link href="/post/6fda8efa.html"/>
      <url>/post/6fda8efa.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[],[5],[2],[],[]]</span><br><span class="line">输出：[null,-1,null,null,5,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; values &lt;&#x3D; 10000</li><li>最多会对 appendTail、deleteHead 进行 10000 次调用</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据栈和队列的特性，得出使用两个栈实现队列的步骤：</p><p>入队：</p><ol><li>直接将元素压入栈1中</li></ol><p>出队：</p><ol><li>先判断栈1是否为空，如果不为空则将栈1中的元素转移到栈2中</li><li>如果栈2不为空则出栈</li></ol><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack1;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CQueue</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.<span class="built_in">push</span>(value);                                           </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="comment">// 如果栈2为空，则先将栈1中的元素转移到栈2中</span></span><br><span class="line">        <span class="keyword">if</span>(stack2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> value = stack1.<span class="built_in">top</span>();</span><br><span class="line">                stack1.<span class="built_in">pop</span>();</span><br><span class="line">                stack2.<span class="built_in">push</span>(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="comment">// 如果栈2为空，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(stack2.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> res = stack2.<span class="built_in">top</span>();</span><br><span class="line">        stack2.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue* obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这里提供额外功能的 JavaScript 实现版本，添加 peek、empty、size 和 inToOut 函数，分别实现返回队首元素、判断队列为空、返回队列大小和公用栈调度操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack1</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack2</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">n</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">push</span>(x);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">n</span>++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">inToOut</span>();</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">n</span>--;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="title function_">pop</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">inToOut</span>();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack2</span>[<span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">n</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">inToOut</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">stack1</span>.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stack2</span>.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">n</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyQueue()</span></span><br><span class="line"><span class="comment"> * obj.push(x)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.empty()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考察对<strong>栈</strong>和<strong>队列</strong>的理解</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 栈 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 08. 二叉树的下一个节点</title>
      <link href="/post/6120bdbd.html"/>
      <url>/post/6120bdbd.html</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一颗二叉树和其中的一个节点，如何找出中序遍历序列的下一个节点？树中的节点除了有两个分别指向左、右子节点的指针，还有一个指向父节点的指针。</p><p><strong>示例 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 测试用例使用的树</span><br><span class="line">//            a</span><br><span class="line">//         //   \\</span><br><span class="line">//        b       c</span><br><span class="line">//     //  \\   // \\</span><br><span class="line">//     d    e   f   g</span><br><span class="line">//        // \\</span><br><span class="line">//  h   i</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该树的中序遍历是 d b h e i a f c g</span><br><span class="line">如 b 节点的下一个节点为 h，d 节点的下一个节点为 b，i 节点的下一个节点为 a.</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题目的描述，对于每一个节点，都有以下三种情况：</p><ol><li>该节点有右子树，则该节点的下一个节点就是它的右子树中的最左子节点</li><li>该节点没有右子树，且它是它父节点的左节点，则该节点的下一个节点就是父节点</li><li>该节点没有右子树，且它是它父节点的右节点，则需要沿着指向父节点的指针一直向上遍历，直到找到一个是它父节点的左节点的节点，这个节点的父节点就是该节点的下一个节点。</li></ol><p>根据以上三种情况对二叉树进行搜索。</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BinaryTreeNode *<span class="title">GetNext</span><span class="params">(BinaryTreeNode *pNode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pNode == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    BinaryTreeNode *pNext = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (pNode-&gt;m_pRight != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BinaryTreeNode *pRight = pNode-&gt;m_pRight;</span><br><span class="line">        <span class="keyword">while</span> (pRight-&gt;m_pLeft != <span class="literal">nullptr</span>)</span><br><span class="line">            pRight = pRight-&gt;mLeft;</span><br><span class="line">        pNext = pRight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pNode-&gt;m_pParent != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BinaryTreeNode *pCurrent = pNode;</span><br><span class="line">        BinaryTreeNode *pParent = pNode-&gt;m_pParent;</span><br><span class="line">        <span class="keyword">while</span> (pParent != <span class="literal">nullptr</span> &amp;&amp; pCurrent != pParent-&gt;m_pRight)</span><br><span class="line">        &#123;</span><br><span class="line">            pCurrent = pParent;</span><br><span class="line">            pParent = pParent-&gt;m_pParent;</span><br><span class="line">        &#125;</span><br><span class="line">        pNext = pParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对二叉树<strong>中序遍历</strong>的理解程度。</li><li>考查分析复杂问题的能力。通过画出二叉树的结构图，从具体的例子找出中序遍历的下一个节点的规律，才能设计出可行的算法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 中序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 07. 重建二叉树</title>
      <link href="/post/e910865e.html"/>
      <url>/post/e910865e.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p><p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= 节点个数 &lt;= 5000</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题可采用递归的思路求解。根据建树的规律可以发现，前序遍历序列的第一个元素是根节点，扫描中序遍历序列，根节点的左边为左子树，根节点的右边为右子树，由此可得到左右子树。根据此规律，我们使用递归的思想完成二叉树的建立。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>二叉树根节点指针为 nullptr</li><li>输入的前序遍历序列和中序遍历序列不匹配</li></ul><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.<span class="built_in">empty</span>() || inorder.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 将前序遍历序列第一个元素作为根节点</span></span><br><span class="line">        TreeNode * root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>();</span><br><span class="line">        root-&gt;val = preorder[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 找到中序遍历序列中根节点的位置</span></span><br><span class="line">        <span class="keyword">auto</span> inRoot = <span class="built_in">find</span>(inorder.<span class="built_in">begin</span>(),inorder.<span class="built_in">end</span>(),preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 截取中序遍历序列的左右子树序列</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inLeft</span><span class="params">(inorder.begin(),inRoot)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inRight</span><span class="params">(inRoot+<span class="number">1</span>,inorder.end())</span></span>;</span><br><span class="line">        <span class="type">int</span> leftSize = inLeft.<span class="built_in">size</span>(); </span><br><span class="line">        <span class="comment">// 截取前序遍历序列的左右子树序列</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preLeft</span><span class="params">(preorder.begin()+<span class="number">1</span>,preorder.begin()+<span class="number">1</span>+leftSize)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preRight</span><span class="params">(preorder.begin()+<span class="number">1</span>+leftSize,preorder.end())</span></span>;</span><br><span class="line">        <span class="comment">// 递归获取左右子树根节点</span></span><br><span class="line">        root-&gt;left = <span class="built_in">buildTree</span>(preLeft,inLeft);</span><br><span class="line">        root-&gt;right = <span class="built_in">buildTree</span>(preRight,inRight);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查应聘者对<strong>二叉树</strong>的<strong>前序遍历</strong>和<strong>中序遍历</strong>的理解程度。</li><li>考查应聘者分析复杂问题的能力。即把构建二叉树的大问题分解成构建左右子树的两个小问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 前序遍历 </tag>
            
            <tag> 中序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 06. 从尾到头打印链表</title>
      <link href="/post/c6ba40be.html"/>
      <url>/post/c6ba40be.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-06-从尾到头打印链表"><a href="#剑指-Offer-06-从尾到头打印链表" class="headerlink" title="剑指 Offer 06. 从尾到头打印链表"></a><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= 链表长度 &lt;= 10000</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两个思考方向，一个是直接修改链表结构，将链表翻转再返回，另一个是不修改链表结构，用栈存储链表遍历顺序再使用出栈操作获得返回结果，或者使用递归的方法获取返回结果。具体使用哪种方式最好向面试官询问清楚。这里假设不修改链表结构。</p><p>方法一：用栈存储链表遍历结果，再从栈顶逐个获取元素存入返回数组中，最后栈空即可得到返回结果。此方法时间复杂度为 O(n)，空间复杂度为 O(n)。</p><p>方法二：使用递归遍历链表元素，将递归结果存储至数组中进行返回即可。此方法实现简单但是可能因为链表过长而导致函数调用栈溢出问题。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>空指针输入</li></ul><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>方法一：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            s.<span class="built_in">push</span>(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>());</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">traverse</span><span class="params">(ListNode* head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="built_in">traverse</span>(head-&gt;next);</span><br><span class="line">            res.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">traverse</span>(head);</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>单向链表</strong>的理解和编程能力</li><li>考查对<strong>循环</strong>、<strong>递归</strong>和<strong>栈</strong>3个相互关联的概念的理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 栈 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="/post/69dc1f94.html"/>
      <url>/post/69dc1f94.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 10000</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题有两种处理方式，一种是在原来的字符串上进行替换，另一种是创建新的字符串并在新的字符串上进行替换，具体需求最好向面试官询问清楚，确定考察点。现考虑在原字符串上进行替换。</p><p>方法一：直接从头到尾扫描字符串，遇到空格字符串的时候进行替换，次操作需要把空格后面的内容往后移两格。该方法时间复杂度为 O(n^2^) 。</p><p>方法二：先扫描一遍字符串统计空格数 count，再将字符串长度设置为 len + count * 2，令指针 i 指向原字符串末尾，指针 j 指向新字符串末尾。将指针 i 不断向前移动，逐个将指向的字符复制到指针 j 指向的位置，直到遇到第一个空格为止，遇到空格则 i 向前移动一格，j 指向的位置向前插入”%20”。不断重复这个过程直到 i &#x3D;&#x3D; j，即 i，j 指向同一个位置表明所有的空格都已经被替换。该方法的时间复杂度为 O(n)。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>空指针</li><li>空字符串</li><li>只有一个空格的字符串</li><li>只有多个空格的字符串</li></ul><h4 id="延伸扩展"><a href="#延伸扩展" class="headerlink" title="延伸扩展"></a>延伸扩展</h4><p>本题在赋值字符串时使用了从尾到头的方法，这样减少了数组元素的移动次数，提高了程序效率。同理在遇到类似的问题时，可考虑使用从尾到头的方法。</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c ==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">resize</span>(len + count*<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>,j = s.<span class="built_in">size</span>()<span class="number">-1</span>; i&lt;j;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                s[j--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s[j--] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s[j--] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s[j--] = s[i]; </span><br><span class="line">            &#125;         </span><br><span class="line">            i--;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>字符串</strong>的编程能力</li><li>考查分析时间效率的能力</li><li>考查对<strong>内存覆盖</strong>是否有高度的警惕</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 内存覆盖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="/post/da280a5b.html"/>
      <url>/post/da280a5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：中等</strong></p><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例:</strong></p><p>现有矩阵 matrix 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给定 target &#x3D; 5，返回 true。</p><p>给定 target &#x3D; 20，返回 false。</p><p><strong>限制：</strong></p><p>0 &lt;&#x3D; n &lt;&#x3D; 1000</p><p>0 &lt;&#x3D; m &lt;&#x3D; 1000</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题有两个解题思路，一个是暴力求解，另一个是根据二维数组的递增规律进行线性查找。根据数组每行按照从左到右依次递增，每列从上到下依次递增的规律，在进行查找时，可选取右上角的元素进行比较，当 matrix[i][j] 大于 target ，因为 matrix[i][j] 为 j 列最小的元素，故 target 不可能在这一列，则 j– 。同理 matrix[i][j] 小于 target 时 i++。同理可考虑选取左下角的元素进行比较。</p><p> 线性查找时间复杂度为 O(n+m)，暴力求解的时间复杂度为 O(n*m)。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>空指针</li><li>空向量</li></ul><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">matrix</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findNumberIn2DArray = <span class="keyword">function</span>(<span class="params">matrix, target</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(matrix.<span class="property">length</span> === <span class="number">0</span> || matrix[<span class="number">0</span>].<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = matrix[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; matrix.<span class="property">length</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[i][j] &gt; target)&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &lt; target)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">         i = <span class="number">0</span>;</span><br><span class="line">         j = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">while</span>(i &lt; matrix.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(matrix[i][j] &gt;  target)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &lt;  target)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查对<strong>二维数组</strong>的理解及编程能力。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 03. 数组中重复的数字</title>
      <link href="/post/8f676a7a.html"/>
      <url>/post/8f676a7a.html</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>难度：简单</strong></p><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;= n &lt;= 100000</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>因为数组中的数都在 0 ~ n - 1 范围内，所以可以利用数组下标和数组元素一一对应，对数组进行重排。假设当前下标为 i 的数组元素 m ，如果 m 等于 i ，则继续扫描下一个元素，若 m 不等于 i ，判断 m 是否等于 nums[m] ，若相等，则该元素为重复数字，若不相等，则交换 m 和 nums[m]。通过该思路对数组进行一趟扫描即可得出结果。该算法时间复杂度为 O(n)，空间复杂度为 O(1) 。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><ul><li>数组为空</li><li>数组中不包含重复数字</li><li>无效测试样例，例如数组元素 m 不在 0 到 n -1 范围内</li></ul><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRepeatNumber = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; <span class="number">0</span> || nums[i] &gt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> n = nums[i];</span><br><span class="line">        <span class="keyword">if</span> (n === i) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[n] === n) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            [nums[n], nums[i]] = [nums[i], nums[n]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] == nums[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;)&#123;</span><br><span class="line">            <span class="comment">// 数组元素值错误处理</span></span><br><span class="line">            <span class="keyword">if</span>( nums[i] &lt; <span class="number">0</span> || nums[i] &gt; len<span class="number">-1</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> m = nums[i];</span><br><span class="line">            <span class="comment">// 检查当前下标元素是否对位，对位则继续遍历，不对位则进行比较，若m等于nums[m]，则m为重复元素，否则交换m和nums[m]</span></span><br><span class="line">            <span class="keyword">if</span>(m == i)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m == nums[m])</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> t = nums[i];</span><br><span class="line">                nums[i] = nums[t];</span><br><span class="line">                nums[t] = t;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="本题考点"><a href="#本题考点" class="headerlink" title="本题考点"></a>本题考点</h3><ul><li>考查应聘者对一维<strong>数组</strong>的理解能力及编程能力</li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 剑指offer </tag>
            
            <tag> 一维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由</title>
      <link href="/post/10901cde.html"/>
      <url>/post/10901cde.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由组件的搭建"><a href="#路由组件的搭建" class="headerlink" title="路由组件的搭建"></a>路由组件的搭建</h2><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li>components 文件夹：通常放置非路由组件（全局共用的组件）</li><li>views &#x2F; pages 文件夹：通常放置路由组件</li></ul><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><ul><li>项目当中配置的路由一般放置在 router 文件中</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>路由组件与非路由组件的区别：<ul><li>路由组件一般放置在 views | pages 文件夹，非路由组件一般放置在 components 文件夹中</li><li>路由组件一般需要在 router 文件夹中进行注册（使用的即为组件的名字），非路由组件在使用的时候，一般都是以标签的形式使用</li></ul></li><li>注册完路由，不管是路由组件，还是非路由组件，都会带有 $route 和 $router 属性</li><li>$route ：一般用于获取路由信息（路径、query、params等）</li><li>$router：一般进行编程式导航进行路由跳转（ push | replace ）</li></ul><h3 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h3><ul><li>路由跳转有两种形式：<ul><li>声明式导航 router-link ，可以进行路由的跳转</li><li>编程式跳转 push | replace，可以进行路由跳转</li><li>注：声明式导航能完成的，编程式导航都能完成，但是编程式导航除了路由跳转，还可以做一些其他的业务逻辑</li></ul></li></ul><h3 id="Footer-组件显示与隐藏"><a href="#Footer-组件显示与隐藏" class="headerlink" title="Footer 组件显示与隐藏"></a>Footer 组件显示与隐藏</h3><ul><li>显示或者隐藏组件：v-if | v-show</li></ul><ol><li>可以根据组件上的 $route 获取当前路由信息，通过路由路径判断 Footer 显示与隐藏</li><li>配置路由的时候，可以给路由添加路由元信息（meta），路由需要配置对象</li></ol><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><ul><li><p>路由跳转的几种方式：</p><ul><li>声明式导航 router-link （务必要有 to 属性），可以实现路由的跳转</li><li>编程式导航：利用组件实例的 $router.push|replace 方法实现路由跳转（可添加自己需要的一些业务）。</li></ul></li><li><p>路由传参，参数书写的几种方式：</p><ol><li><p>字符串形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转处理函数部分</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/search/&quot;</span> + <span class="variable language_">this</span>.<span class="property">input</span> + <span class="string">&quot;?keyword=&quot;</span> + <span class="variable language_">this</span>.<span class="property">input</span>.<span class="title function_">toUpperCase</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转页接收部分</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;$route.params.value&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="comment">// 注意 params 穿过来的属性名在 router 注册组件里定义</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;$route.query.keyword&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="comment">// query 传过来的属性名由?后的字符串定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// router 路由组件部分</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;search&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/search/:value&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Search</span>,</span><br><span class="line"><span class="attr">meta</span>: &#123;</span><br><span class="line"><span class="attr">footerHide</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转处理函数部分</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/search/$&#123;this.input&#125;?keyword=$&#123;this.input.toUpperCase()&#125;&quot;</span>);</span><br><span class="line"><span class="comment">// 跳转页接收部分</span></span><br><span class="line">同上</span><br><span class="line"><span class="comment">// router 路由组件部分</span></span><br><span class="line">同上</span><br></pre></td></tr></table></figure></li><li><p>对象传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转处理函数部分</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;search&quot;</span>,<span class="comment">// 注意：跳转到的路由页面必须带有 name 属性！</span></span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">input</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">        <span class="attr">keyword</span>:<span class="variable language_">this</span>.<span class="property">input</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 跳转页接收部分</span></span><br><span class="line">同上</span><br><span class="line"><span class="comment">// router 路由组件部分</span></span><br><span class="line">同上</span><br></pre></td></tr></table></figure></li><li><p>一些面试题</p><ul><li><p>1.路由传递参数（对象写法）path 是否可以结合 params 参数一起使用？</p></li><li><p>答：不可以。路由跳转的时候，对象的写法可以使 name、path 形式，但是需要注意的是，path 这种写法不能与 params 参数结合使用</p></li><li><p>2.如何指定 params 参数可传可不传？</p></li><li><pre><code class="javascript">// router 注册组件部分&#123;    name:&#39;search&#39;,    path:&#39;/search/:value?&#39;,// 在 params 参数后面加上 ? 即可指定 params 可传可不传    component:Search,    meta: &#123;        footerHide: true    &#125;,&#125;,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 3.params 参数可以传递也可以不传递，但是如果传递的是空串，如何解决？</span><br><span class="line"></span><br><span class="line">+ ~~~ javascript</span><br><span class="line">  // 跳转处理函数部分</span><br><span class="line">  this.$route.push(&#123;</span><br><span class="line">      name:&quot;search&quot;,</span><br><span class="line">      params:&#123;</span><br><span class="line">          value:this.input || undefined// 在传递的参数后加上 undefined 即可解决空串传递的问题</span><br><span class="line">      &#125;,</span><br><span class="line">      query:&#123;</span><br><span class="line">          keyword:this.input.toUpperCase()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>4.路由组件能不能传递 props 数据</p></li><li><p>答：可以。有三种方式：</p></li><li><pre><code class="javascript">&#123;    name:&#39;search&#39;,    path:&#39;/search/:value?&#39;,    component:Search,    meta: &#123;        footerHide: true    &#125;,    // 1.布尔值写法：params    // props:true,    // 2.对象写法：额外的给路由组件传递一些 props    // props:&#123;a:1,b:2&#125;,    // 3.函数写法：可使用 params，query，通过 props 参数传递给路由组件    props:($route)=&gt;(&#123;keyword:$route.params.value,keyword:$route.query.keyword&#125;)&#125;,</code></pre></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
